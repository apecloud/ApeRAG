/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DebugFlowRequest } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { WorkflowDefinition } from '../models';
/**
 * FlowApi - axios parameter creator
 * @export
 */
export const FlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost: async (botId: string, debugFlowRequest: DebugFlowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'botId', botId)
            // verify required parameter 'debugFlowRequest' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'debugFlowRequest', debugFlowRequest)
            const localVarPath = `/bots/{bot_id}/flow/debug`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(debugFlowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowGet: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}/flow`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {string} botId 
         * @param {WorkflowDefinition} workflowDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowPut: async (botId: string, workflowDefinition: WorkflowDefinition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowPut', 'botId', botId)
            // verify required parameter 'workflowDefinition' is not null or undefined
            assertParamExists('botsBotIdFlowPut', 'workflowDefinition', workflowDefinition)
            const localVarPath = `/bots/{bot_id}/flow`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowDefinition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowApi - functional programming interface
 * @export
 */
export const FlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlowApiAxiosParamCreator(configuration)
    return {
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowDebugPost(botId: string, debugFlowRequest: DebugFlowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowDebugPost(botId, debugFlowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.botsBotIdFlowDebugPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowGet(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowGet(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.botsBotIdFlowGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {string} botId 
         * @param {WorkflowDefinition} workflowDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowPut(botId: string, workflowDefinition: WorkflowDefinition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowPut(botId, workflowDefinition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.botsBotIdFlowPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FlowApi - factory interface
 * @export
 */
export const FlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlowApiFp(configuration)
    return {
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {FlowApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost(requestParameters: FlowApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {FlowApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowGet(requestParameters: FlowApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDefinition> {
            return localVarFp.botsBotIdFlowGet(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {FlowApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowPut(requestParameters: FlowApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdFlowPut(requestParameters.botId, requestParameters.workflowDefinition, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlowApi - interface
 * @export
 * @interface FlowApi
 */
export interface FlowApiInterface {
    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {FlowApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApiInterface
     */
    botsBotIdFlowDebugPost(requestParameters: FlowApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get flow
     * @summary Get flow
     * @param {FlowApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApiInterface
     */
    botsBotIdFlowGet(requestParameters: FlowApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDefinition>;

    /**
     * Update flow
     * @summary Update flow
     * @param {FlowApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApiInterface
     */
    botsBotIdFlowPut(requestParameters: FlowApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for botsBotIdFlowDebugPost operation in FlowApi.
 * @export
 * @interface FlowApiBotsBotIdFlowDebugPostRequest
 */
export interface FlowApiBotsBotIdFlowDebugPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FlowApiBotsBotIdFlowDebugPost
     */
    readonly botId: string

    /**
     * 
     * @type {DebugFlowRequest}
     * @memberof FlowApiBotsBotIdFlowDebugPost
     */
    readonly debugFlowRequest: DebugFlowRequest
}

/**
 * Request parameters for botsBotIdFlowGet operation in FlowApi.
 * @export
 * @interface FlowApiBotsBotIdFlowGetRequest
 */
export interface FlowApiBotsBotIdFlowGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FlowApiBotsBotIdFlowGet
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdFlowPut operation in FlowApi.
 * @export
 * @interface FlowApiBotsBotIdFlowPutRequest
 */
export interface FlowApiBotsBotIdFlowPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FlowApiBotsBotIdFlowPut
     */
    readonly botId: string

    /**
     * 
     * @type {WorkflowDefinition}
     * @memberof FlowApiBotsBotIdFlowPut
     */
    readonly workflowDefinition: WorkflowDefinition
}

/**
 * FlowApi - object-oriented interface
 * @export
 * @class FlowApi
 * @extends {BaseAPI}
 */
export class FlowApi extends BaseAPI implements FlowApiInterface {
    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {FlowApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public botsBotIdFlowDebugPost(requestParameters: FlowApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get flow
     * @summary Get flow
     * @param {FlowApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public botsBotIdFlowGet(requestParameters: FlowApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).botsBotIdFlowGet(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update flow
     * @summary Update flow
     * @param {FlowApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public botsBotIdFlowPut(requestParameters: FlowApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).botsBotIdFlowPut(requestParameters.botId, requestParameters.workflowDefinition, options).then((request) => request(this.axios, this.basePath));
    }
}

