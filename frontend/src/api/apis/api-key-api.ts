/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiKey } from '../models';
// @ts-ignore
import type { ApiKeyCreate } from '../models';
// @ts-ignore
import type { ApiKeyList } from '../models';
// @ts-ignore
import type { ApiKeyUpdate } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export const ApiKeyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete API key
         * @summary Delete API key
         * @param {string} apikeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdDelete: async (apikeyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikeyId' is not null or undefined
            assertParamExists('apikeysApikeyIdDelete', 'apikeyId', apikeyId)
            const localVarPath = `/apikeys/{apikey_id}`
                .replace(`{${"apikey_id"}}`, encodeURIComponent(String(apikeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {string} apikeyId 
         * @param {ApiKeyUpdate} apiKeyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdPut: async (apikeyId: string, apiKeyUpdate: ApiKeyUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikeyId' is not null or undefined
            assertParamExists('apikeysApikeyIdPut', 'apikeyId', apikeyId)
            // verify required parameter 'apiKeyUpdate' is not null or undefined
            assertParamExists('apikeysApikeyIdPut', 'apiKeyUpdate', apiKeyUpdate)
            const localVarPath = `/apikeys/{apikey_id}`
                .replace(`{${"apikey_id"}}`, encodeURIComponent(String(apikeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {ApiKeyCreate} apiKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysPost: async (apiKeyCreate: ApiKeyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyCreate' is not null or undefined
            assertParamExists('apikeysPost', 'apiKeyCreate', apiKeyCreate)
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export const ApiKeyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeyApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete API key
         * @summary Delete API key
         * @param {string} apikeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysApikeyIdDelete(apikeyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysApikeyIdDelete(apikeyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeyApi.apikeysApikeyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {string} apikeyId 
         * @param {ApiKeyUpdate} apiKeyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysApikeyIdPut(apikeyId: string, apiKeyUpdate: ApiKeyUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysApikeyIdPut(apikeyId, apiKeyUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeyApi.apikeysApikeyIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeyApi.apikeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {ApiKeyCreate} apiKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysPost(apiKeyCreate: ApiKeyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysPost(apiKeyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeyApi.apikeysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiKeyApi - factory interface
 * @export
 */
export const ApiKeyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeyApiFp(configuration)
    return {
        /**
         * Delete API key
         * @summary Delete API key
         * @param {ApiKeyApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdDelete(requestParameters: ApiKeyApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apikeysApikeyIdDelete(requestParameters.apikeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {ApiKeyApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdPut(requestParameters: ApiKeyApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.apikeysApikeyIdPut(requestParameters.apikeyId, requestParameters.apiKeyUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList> {
            return localVarFp.apikeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {ApiKeyApiApikeysPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysPost(requestParameters: ApiKeyApiApikeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.apikeysPost(requestParameters.apiKeyCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiKeyApi - interface
 * @export
 * @interface ApiKeyApi
 */
export interface ApiKeyApiInterface {
    /**
     * Delete API key
     * @summary Delete API key
     * @param {ApiKeyApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiInterface
     */
    apikeysApikeyIdDelete(requestParameters: ApiKeyApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update API key
     * @summary Update API key
     * @param {ApiKeyApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiInterface
     */
    apikeysApikeyIdPut(requestParameters: ApiKeyApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey>;

    /**
     * Get API keys
     * @summary Get API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiInterface
     */
    apikeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList>;

    /**
     * Create API key
     * @summary Create API key
     * @param {ApiKeyApiApikeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiInterface
     */
    apikeysPost(requestParameters: ApiKeyApiApikeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey>;

}

/**
 * Request parameters for apikeysApikeyIdDelete operation in ApiKeyApi.
 * @export
 * @interface ApiKeyApiApikeysApikeyIdDeleteRequest
 */
export interface ApiKeyApiApikeysApikeyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeyApiApikeysApikeyIdDelete
     */
    readonly apikeyId: string
}

/**
 * Request parameters for apikeysApikeyIdPut operation in ApiKeyApi.
 * @export
 * @interface ApiKeyApiApikeysApikeyIdPutRequest
 */
export interface ApiKeyApiApikeysApikeyIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeyApiApikeysApikeyIdPut
     */
    readonly apikeyId: string

    /**
     * 
     * @type {ApiKeyUpdate}
     * @memberof ApiKeyApiApikeysApikeyIdPut
     */
    readonly apiKeyUpdate: ApiKeyUpdate
}

/**
 * Request parameters for apikeysPost operation in ApiKeyApi.
 * @export
 * @interface ApiKeyApiApikeysPostRequest
 */
export interface ApiKeyApiApikeysPostRequest {
    /**
     * 
     * @type {ApiKeyCreate}
     * @memberof ApiKeyApiApikeysPost
     */
    readonly apiKeyCreate: ApiKeyCreate
}

/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
export class ApiKeyApi extends BaseAPI implements ApiKeyApiInterface {
    /**
     * Delete API key
     * @summary Delete API key
     * @param {ApiKeyApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    public apikeysApikeyIdDelete(requestParameters: ApiKeyApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).apikeysApikeyIdDelete(requestParameters.apikeyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update API key
     * @summary Update API key
     * @param {ApiKeyApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    public apikeysApikeyIdPut(requestParameters: ApiKeyApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).apikeysApikeyIdPut(requestParameters.apikeyId, requestParameters.apiKeyUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get API keys
     * @summary Get API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    public apikeysGet(options?: RawAxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).apikeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create API key
     * @summary Create API key
     * @param {ApiKeyApiApikeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    public apikeysPost(requestParameters: ApiKeyApiApikeysPostRequest, options?: RawAxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).apikeysPost(requestParameters.apiKeyCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

