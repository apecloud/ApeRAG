/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { RerankRequest } from '../models';
// @ts-ignore
import type { RerankResponse } from '../models';
/**
 * RerankApi - axios parameter creator
 * @export
 */
export const RerankApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rerank a list of documents based on their relevance to a given query using the specified  provider and model. This endpoint follows the industry-standard rerank API format used by providers like Cohere, Jina AI, and others.  The endpoint supports both simple text lists and structured document objects with metadata. Documents are returned ordered by relevance score (highest first), with optional top_k  filtering to limit the number of results.  The provider must be configured in the user\'s Model Service Provider (MSP) settings with a valid API key and support rerank functionality. 
         * @summary Rerank documents
         * @param {RerankRequest} rerankRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerankPost: async (rerankRequest: RerankRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rerankRequest' is not null or undefined
            assertParamExists('rerankPost', 'rerankRequest', rerankRequest)
            const localVarPath = `/rerank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rerankRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RerankApi - functional programming interface
 * @export
 */
export const RerankApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RerankApiAxiosParamCreator(configuration)
    return {
        /**
         * Rerank a list of documents based on their relevance to a given query using the specified  provider and model. This endpoint follows the industry-standard rerank API format used by providers like Cohere, Jina AI, and others.  The endpoint supports both simple text lists and structured document objects with metadata. Documents are returned ordered by relevance score (highest first), with optional top_k  filtering to limit the number of results.  The provider must be configured in the user\'s Model Service Provider (MSP) settings with a valid API key and support rerank functionality. 
         * @summary Rerank documents
         * @param {RerankRequest} rerankRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rerankPost(rerankRequest: RerankRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RerankResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rerankPost(rerankRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RerankApi.rerankPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RerankApi - factory interface
 * @export
 */
export const RerankApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RerankApiFp(configuration)
    return {
        /**
         * Rerank a list of documents based on their relevance to a given query using the specified  provider and model. This endpoint follows the industry-standard rerank API format used by providers like Cohere, Jina AI, and others.  The endpoint supports both simple text lists and structured document objects with metadata. Documents are returned ordered by relevance score (highest first), with optional top_k  filtering to limit the number of results.  The provider must be configured in the user\'s Model Service Provider (MSP) settings with a valid API key and support rerank functionality. 
         * @summary Rerank documents
         * @param {RerankApiRerankPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerankPost(requestParameters: RerankApiRerankPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RerankResponse> {
            return localVarFp.rerankPost(requestParameters.rerankRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RerankApi - interface
 * @export
 * @interface RerankApi
 */
export interface RerankApiInterface {
    /**
     * Rerank a list of documents based on their relevance to a given query using the specified  provider and model. This endpoint follows the industry-standard rerank API format used by providers like Cohere, Jina AI, and others.  The endpoint supports both simple text lists and structured document objects with metadata. Documents are returned ordered by relevance score (highest first), with optional top_k  filtering to limit the number of results.  The provider must be configured in the user\'s Model Service Provider (MSP) settings with a valid API key and support rerank functionality. 
     * @summary Rerank documents
     * @param {RerankApiRerankPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RerankApiInterface
     */
    rerankPost(requestParameters: RerankApiRerankPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RerankResponse>;

}

/**
 * Request parameters for rerankPost operation in RerankApi.
 * @export
 * @interface RerankApiRerankPostRequest
 */
export interface RerankApiRerankPostRequest {
    /**
     * 
     * @type {RerankRequest}
     * @memberof RerankApiRerankPost
     */
    readonly rerankRequest: RerankRequest
}

/**
 * RerankApi - object-oriented interface
 * @export
 * @class RerankApi
 * @extends {BaseAPI}
 */
export class RerankApi extends BaseAPI implements RerankApiInterface {
    /**
     * Rerank a list of documents based on their relevance to a given query using the specified  provider and model. This endpoint follows the industry-standard rerank API format used by providers like Cohere, Jina AI, and others.  The endpoint supports both simple text lists and structured document objects with metadata. Documents are returned ordered by relevance score (highest first), with optional top_k  filtering to limit the number of results.  The provider must be configured in the user\'s Model Service Provider (MSP) settings with a valid API key and support rerank functionality. 
     * @summary Rerank documents
     * @param {RerankApiRerankPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RerankApi
     */
    public rerankPost(requestParameters: RerankApiRerankPostRequest, options?: RawAxiosRequestConfig) {
        return RerankApiFp(this.configuration).rerankPost(requestParameters.rerankRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

