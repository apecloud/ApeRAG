/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Config } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { LlmConfigurationResponse } from '../models';
// @ts-ignore
import type { LlmProvider } from '../models';
// @ts-ignore
import type { LlmProviderCreateWithApiKey } from '../models';
// @ts-ignore
import type { LlmProviderModel } from '../models';
// @ts-ignore
import type { LlmProviderModelCreate } from '../models';
// @ts-ignore
import type { LlmProviderModelList } from '../models';
// @ts-ignore
import type { LlmProviderModelUpdate } from '../models';
// @ts-ignore
import type { LlmProviderUpdateWithApiKey } from '../models';
// @ts-ignore
import type { ModelConfigList } from '../models';
// @ts-ignore
import type { TagFilterRequest } from '../models';
/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {TagFilterRequest} [tagFilterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableModelsPost: async (tagFilterRequest?: TagFilterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/available_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagFilterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmConfigurationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/llm_configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {string} [providerName] Optional filter by provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProviderModelsGet: async (providerName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/llm_provider_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providerName !== undefined) {
                localVarQueryParameter['provider_name'] = providerName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {LlmProviderCreateWithApiKey} llmProviderCreateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersPost: async (llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llmProviderCreateWithApiKey' is not null or undefined
            assertParamExists('llmProvidersPost', 'llmProviderCreateWithApiKey', llmProviderCreateWithApiKey)
            const localVarPath = `/llm_providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderCreateWithApiKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameDelete: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameDelete', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameGet: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameGet', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelDeleteApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelDelete: async (providerName: string, api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum, model: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'providerName', providerName)
            // verify required parameter 'api' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'api', api)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'model', model)
            const localVarPath = `/llm_providers/{provider_name}/models/{api}/{model}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)))
                .replace(`{${"api"}}`, encodeURIComponent(String(api)))
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelPutApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {LlmProviderModelUpdate} llmProviderModelUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelPut: async (providerName: string, api: LlmProvidersProviderNameModelsApiModelPutApiEnum, model: string, llmProviderModelUpdate: LlmProviderModelUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'providerName', providerName)
            // verify required parameter 'api' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'api', api)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'model', model)
            // verify required parameter 'llmProviderModelUpdate' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'llmProviderModelUpdate', llmProviderModelUpdate)
            const localVarPath = `/llm_providers/{provider_name}/models/{api}/{model}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)))
                .replace(`{${"api"}}`, encodeURIComponent(String(api)))
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderModelUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsGet: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsGet', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}/models`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {string} providerName Provider name
         * @param {LlmProviderModelCreate} llmProviderModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsPost: async (providerName: string, llmProviderModelCreate: LlmProviderModelCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsPost', 'providerName', providerName)
            // verify required parameter 'llmProviderModelCreate' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsPost', 'llmProviderModelCreate', llmProviderModelCreate)
            const localVarPath = `/llm_providers/{provider_name}/models`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderModelCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {string} providerName Provider name
         * @param {LlmProviderUpdateWithApiKey} llmProviderUpdateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNamePut: async (providerName: string, llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNamePut', 'providerName', providerName)
            // verify required parameter 'llmProviderUpdateWithApiKey' is not null or undefined
            assertParamExists('llmProvidersProviderNamePut', 'llmProviderUpdateWithApiKey', llmProviderUpdateWithApiKey)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderUpdateWithApiKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {TagFilterRequest} [tagFilterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableModelsPost(tagFilterRequest?: TagFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelConfigList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.availableModelsPost(tagFilterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.availableModelsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmConfigurationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmConfigurationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmConfigurationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmConfigurationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {string} [providerName] Optional filter by provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProviderModelsGet(providerName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProviderModelsGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProviderModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {LlmProviderCreateWithApiKey} llmProviderCreateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersPost(llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersPost(llmProviderCreateWithApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameDelete(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameDelete(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameGet(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelDeleteApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsApiModelDelete(providerName: string, api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum, model: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsApiModelDelete(providerName, api, model, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameModelsApiModelDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelPutApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {LlmProviderModelUpdate} llmProviderModelUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsApiModelPut(providerName: string, api: LlmProvidersProviderNameModelsApiModelPutApiEnum, model: string, llmProviderModelUpdate: LlmProviderModelUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsApiModelPut(providerName, api, model, llmProviderModelUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameModelsApiModelPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsGet(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {string} providerName Provider name
         * @param {LlmProviderModelCreate} llmProviderModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsPost(providerName: string, llmProviderModelCreate: LlmProviderModelCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsPost(providerName, llmProviderModelCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNameModelsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {string} providerName Provider name
         * @param {LlmProviderUpdateWithApiKey} llmProviderUpdateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNamePut(providerName: string, llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNamePut(providerName, llmProviderUpdateWithApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.llmProvidersProviderNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {ConfigApiAvailableModelsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableModelsPost(requestParameters: ConfigApiAvailableModelsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ModelConfigList> {
            return localVarFp.availableModelsPost(requestParameters.tagFilterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configGet(options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.configGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmConfigurationGet(options?: RawAxiosRequestConfig): AxiosPromise<LlmConfigurationResponse> {
            return localVarFp.llmConfigurationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {ConfigApiLlmProviderModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProviderModelsGet(requestParameters: ConfigApiLlmProviderModelsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList> {
            return localVarFp.llmProviderModelsGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {ConfigApiLlmProvidersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersPost(requestParameters: ConfigApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersPost(requestParameters.llmProviderCreateWithApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {ConfigApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameDelete(requestParameters: ConfigApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.llmProvidersProviderNameDelete(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {ConfigApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameGet(requestParameters: ConfigApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersProviderNameGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelDelete(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.llmProvidersProviderNameModelsApiModelDelete(requestParameters.providerName, requestParameters.api, requestParameters.model, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelPut(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel> {
            return localVarFp.llmProvidersProviderNameModelsApiModelPut(requestParameters.providerName, requestParameters.api, requestParameters.model, requestParameters.llmProviderModelUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {ConfigApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsGet(requestParameters: ConfigApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList> {
            return localVarFp.llmProvidersProviderNameModelsGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {ConfigApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsPost(requestParameters: ConfigApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel> {
            return localVarFp.llmProvidersProviderNameModelsPost(requestParameters.providerName, requestParameters.llmProviderModelCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {ConfigApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNamePut(requestParameters: ConfigApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersProviderNamePut(requestParameters.providerName, requestParameters.llmProviderUpdateWithApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigApi - interface
 * @export
 * @interface ConfigApi
 */
export interface ConfigApiInterface {
    /**
     * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
     * @summary Get available models with filtering
     * @param {ConfigApiAvailableModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    availableModelsPost(requestParameters?: ConfigApiAvailableModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelConfigList>;

    /**
     * Get system configuration
     * @summary Get system configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configGet(options?: RawAxiosRequestConfig): AxiosPromise<Config>;

    /**
     * Get complete LLM configuration including providers and models
     * @summary Get complete LLM configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmConfigurationGet(options?: RawAxiosRequestConfig): AxiosPromise<LlmConfigurationResponse>;

    /**
     * List all LLM provider models, optionally filtered by provider
     * @summary List all LLM provider models
     * @param {ConfigApiLlmProviderModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProviderModelsGet(requestParameters?: ConfigApiLlmProviderModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList>;

    /**
     * Create a new LLM provider with optional API key
     * @summary Create a new LLM provider
     * @param {ConfigApiLlmProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersPost(requestParameters: ConfigApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

    /**
     * Delete an LLM provider (soft delete)
     * @summary Delete an LLM provider
     * @param {ConfigApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameDelete(requestParameters: ConfigApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a specific LLM provider by name
     * @summary Get a specific LLM provider
     * @param {ConfigApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameGet(requestParameters: ConfigApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

    /**
     * Delete a specific model of a provider
     * @summary Delete a provider model
     * @param {ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameModelsApiModelDelete(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update a specific model of a provider
     * @summary Update a provider model
     * @param {ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameModelsApiModelPut(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel>;

    /**
     * Get all models for a specific provider
     * @summary Get models for a specific provider
     * @param {ConfigApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameModelsGet(requestParameters: ConfigApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList>;

    /**
     * Create a new model for a specific provider
     * @summary Create a new model for a provider
     * @param {ConfigApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNameModelsPost(requestParameters: ConfigApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel>;

    /**
     * Update an existing LLM provider with optional API key
     * @summary Update an LLM provider
     * @param {ConfigApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    llmProvidersProviderNamePut(requestParameters: ConfigApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

}

/**
 * Request parameters for availableModelsPost operation in ConfigApi.
 * @export
 * @interface ConfigApiAvailableModelsPostRequest
 */
export interface ConfigApiAvailableModelsPostRequest {
    /**
     * 
     * @type {TagFilterRequest}
     * @memberof ConfigApiAvailableModelsPost
     */
    readonly tagFilterRequest?: TagFilterRequest
}

/**
 * Request parameters for llmProviderModelsGet operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProviderModelsGetRequest
 */
export interface ConfigApiLlmProviderModelsGetRequest {
    /**
     * Optional filter by provider name
     * @type {string}
     * @memberof ConfigApiLlmProviderModelsGet
     */
    readonly providerName?: string
}

/**
 * Request parameters for llmProvidersPost operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersPostRequest
 */
export interface ConfigApiLlmProvidersPostRequest {
    /**
     * 
     * @type {LlmProviderCreateWithApiKey}
     * @memberof ConfigApiLlmProvidersPost
     */
    readonly llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey
}

/**
 * Request parameters for llmProvidersProviderNameDelete operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameDeleteRequest
 */
export interface ConfigApiLlmProvidersProviderNameDeleteRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameDelete
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameGet operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameGetRequest
 */
export interface ConfigApiLlmProvidersProviderNameGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameGet
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsApiModelDelete operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest
 */
export interface ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly providerName: string

    /**
     * API type
     * @type {'completion' | 'embedding' | 'rerank'}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum

    /**
     * Model name (supports names with slashes, will be URL decoded)
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly model: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsApiModelPut operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest
 */
export interface ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly providerName: string

    /**
     * API type
     * @type {'completion' | 'embedding' | 'rerank'}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly api: LlmProvidersProviderNameModelsApiModelPutApiEnum

    /**
     * Model name (supports names with slashes, will be URL decoded)
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly model: string

    /**
     * 
     * @type {LlmProviderModelUpdate}
     * @memberof ConfigApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly llmProviderModelUpdate: LlmProviderModelUpdate
}

/**
 * Request parameters for llmProvidersProviderNameModelsGet operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameModelsGetRequest
 */
export interface ConfigApiLlmProvidersProviderNameModelsGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsGet
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsPost operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNameModelsPostRequest
 */
export interface ConfigApiLlmProvidersProviderNameModelsPostRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNameModelsPost
     */
    readonly providerName: string

    /**
     * 
     * @type {LlmProviderModelCreate}
     * @memberof ConfigApiLlmProvidersProviderNameModelsPost
     */
    readonly llmProviderModelCreate: LlmProviderModelCreate
}

/**
 * Request parameters for llmProvidersProviderNamePut operation in ConfigApi.
 * @export
 * @interface ConfigApiLlmProvidersProviderNamePutRequest
 */
export interface ConfigApiLlmProvidersProviderNamePutRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof ConfigApiLlmProvidersProviderNamePut
     */
    readonly providerName: string

    /**
     * 
     * @type {LlmProviderUpdateWithApiKey}
     * @memberof ConfigApiLlmProvidersProviderNamePut
     */
    readonly llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey
}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI implements ConfigApiInterface {
    /**
     * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
     * @summary Get available models with filtering
     * @param {ConfigApiAvailableModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public availableModelsPost(requestParameters: ConfigApiAvailableModelsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).availableModelsPost(requestParameters.tagFilterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system configuration
     * @summary Get system configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configGet(options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get complete LLM configuration including providers and models
     * @summary Get complete LLM configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmConfigurationGet(options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmConfigurationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all LLM provider models, optionally filtered by provider
     * @summary List all LLM provider models
     * @param {ConfigApiLlmProviderModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProviderModelsGet(requestParameters: ConfigApiLlmProviderModelsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProviderModelsGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new LLM provider with optional API key
     * @summary Create a new LLM provider
     * @param {ConfigApiLlmProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersPost(requestParameters: ConfigApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersPost(requestParameters.llmProviderCreateWithApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an LLM provider (soft delete)
     * @summary Delete an LLM provider
     * @param {ConfigApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameDelete(requestParameters: ConfigApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameDelete(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific LLM provider by name
     * @summary Get a specific LLM provider
     * @param {ConfigApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameGet(requestParameters: ConfigApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific model of a provider
     * @summary Delete a provider model
     * @param {ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameModelsApiModelDelete(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameModelsApiModelDelete(requestParameters.providerName, requestParameters.api, requestParameters.model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific model of a provider
     * @summary Update a provider model
     * @param {ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameModelsApiModelPut(requestParameters: ConfigApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameModelsApiModelPut(requestParameters.providerName, requestParameters.api, requestParameters.model, requestParameters.llmProviderModelUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all models for a specific provider
     * @summary Get models for a specific provider
     * @param {ConfigApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameModelsGet(requestParameters: ConfigApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameModelsGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new model for a specific provider
     * @summary Create a new model for a provider
     * @param {ConfigApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNameModelsPost(requestParameters: ConfigApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNameModelsPost(requestParameters.providerName, requestParameters.llmProviderModelCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing LLM provider with optional API key
     * @summary Update an LLM provider
     * @param {ConfigApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public llmProvidersProviderNamePut(requestParameters: ConfigApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).llmProvidersProviderNamePut(requestParameters.providerName, requestParameters.llmProviderUpdateWithApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LlmProvidersProviderNameModelsApiModelDeleteApiEnum = {
    completion: 'completion',
    embedding: 'embedding',
    rerank: 'rerank'
} as const;
export type LlmProvidersProviderNameModelsApiModelDeleteApiEnum = typeof LlmProvidersProviderNameModelsApiModelDeleteApiEnum[keyof typeof LlmProvidersProviderNameModelsApiModelDeleteApiEnum];
/**
 * @export
 */
export const LlmProvidersProviderNameModelsApiModelPutApiEnum = {
    completion: 'completion',
    embedding: 'embedding',
    rerank: 'rerank'
} as const;
export type LlmProvidersProviderNameModelsApiModelPutApiEnum = typeof LlmProvidersProviderNameModelsApiModelPutApiEnum[keyof typeof LlmProvidersProviderNameModelsApiModelPutApiEnum];
