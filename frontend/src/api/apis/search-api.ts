/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { SearchRequest } from '../models';
// @ts-ignore
import type { SearchResult } from '../models';
// @ts-ignore
import type { SearchResultList } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/searches`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {string} collectionId 
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesPost: async (collectionId: string, searchRequest: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesPost', 'collectionId', collectionId)
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesPost', 'searchRequest', searchRequest)
            const localVarPath = `/collections/{collection_id}/searches`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {string} collectionId 
         * @param {string} searchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesSearchIdDelete: async (collectionId: string, searchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesSearchIdDelete', 'collectionId', collectionId)
            // verify required parameter 'searchId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesSearchIdDelete', 'searchId', searchId)
            const localVarPath = `/collections/{collection_id}/searches/{search_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"search_id"}}`, encodeURIComponent(String(searchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.collectionsCollectionIdSearchesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {string} collectionId 
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesPost(collectionId: string, searchRequest: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesPost(collectionId, searchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.collectionsCollectionIdSearchesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {string} collectionId 
         * @param {string} searchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesSearchIdDelete(collectionId: string, searchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesSearchIdDelete(collectionId, searchId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.collectionsCollectionIdSearchesSearchIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {SearchApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesGet(requestParameters: SearchApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResultList> {
            return localVarFp.collectionsCollectionIdSearchesGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {SearchApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesPost(requestParameters: SearchApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResult> {
            return localVarFp.collectionsCollectionIdSearchesPost(requestParameters.collectionId, requestParameters.searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesSearchIdDelete(requestParameters: SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdSearchesSearchIdDelete(requestParameters.collectionId, requestParameters.searchId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - interface
 * @export
 * @interface SearchApi
 */
export interface SearchApiInterface {
    /**
     * Get the history of searches
     * @summary Get search history
     * @param {SearchApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    collectionsCollectionIdSearchesGet(requestParameters: SearchApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResultList>;

    /**
     * Search in a collection with different search types
     * @summary Search in collection
     * @param {SearchApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    collectionsCollectionIdSearchesPost(requestParameters: SearchApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResult>;

    /**
     * Delete a search
     * @summary Delete a search
     * @param {SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    collectionsCollectionIdSearchesSearchIdDelete(requestParameters: SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for collectionsCollectionIdSearchesGet operation in SearchApi.
 * @export
 * @interface SearchApiCollectionsCollectionIdSearchesGetRequest
 */
export interface SearchApiCollectionsCollectionIdSearchesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchApiCollectionsCollectionIdSearchesGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdSearchesPost operation in SearchApi.
 * @export
 * @interface SearchApiCollectionsCollectionIdSearchesPostRequest
 */
export interface SearchApiCollectionsCollectionIdSearchesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchApiCollectionsCollectionIdSearchesPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {SearchRequest}
     * @memberof SearchApiCollectionsCollectionIdSearchesPost
     */
    readonly searchRequest: SearchRequest
}

/**
 * Request parameters for collectionsCollectionIdSearchesSearchIdDelete operation in SearchApi.
 * @export
 * @interface SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest
 */
export interface SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchApiCollectionsCollectionIdSearchesSearchIdDelete
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof SearchApiCollectionsCollectionIdSearchesSearchIdDelete
     */
    readonly searchId: string
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI implements SearchApiInterface {
    /**
     * Get the history of searches
     * @summary Get search history
     * @param {SearchApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public collectionsCollectionIdSearchesGet(requestParameters: SearchApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).collectionsCollectionIdSearchesGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search in a collection with different search types
     * @summary Search in collection
     * @param {SearchApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public collectionsCollectionIdSearchesPost(requestParameters: SearchApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).collectionsCollectionIdSearchesPost(requestParameters.collectionId, requestParameters.searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a search
     * @summary Delete a search
     * @param {SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public collectionsCollectionIdSearchesSearchIdDelete(requestParameters: SearchApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).collectionsCollectionIdSearchesSearchIdDelete(requestParameters.collectionId, requestParameters.searchId, options).then((request) => request(this.axios, this.basePath));
    }
}

