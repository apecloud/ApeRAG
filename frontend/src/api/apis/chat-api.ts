/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Chat } from '../models';
// @ts-ignore
import type { ChatCreate } from '../models';
// @ts-ignore
import type { ChatDetails } from '../models';
// @ts-ignore
import type { ChatList } from '../models';
// @ts-ignore
import type { ChatUpdate } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { Feedback } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdDelete: async (botId: string, chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdDelete', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdDelete', 'chatId', chatId)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdGet: async (botId: string, chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdGet', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdGet', 'chatId', chatId)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {string} botId 
         * @param {string} chatId 
         * @param {string} messageId 
         * @param {Feedback} feedback 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdMessagesMessageIdPost: async (botId: string, chatId: string, messageId: string, feedback: Feedback, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'messageId', messageId)
            // verify required parameter 'feedback' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'feedback', feedback)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}/messages/{message_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedback, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {ChatUpdate} chatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdPut: async (botId: string, chatId: string, chatUpdate: ChatUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'chatId', chatId)
            // verify required parameter 'chatUpdate' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'chatUpdate', chatUpdate)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {string} botId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsGet: async (botId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}/chats`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {string} botId 
         * @param {ChatCreate} chatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsPost: async (botId: string, chatCreate: ChatCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsPost', 'botId', botId)
            // verify required parameter 'chatCreate' is not null or undefined
            assertParamExists('botsBotIdChatsPost', 'chatCreate', chatCreate)
            const localVarPath = `/bots/{bot_id}/chats`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdDelete(botId: string, chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdDelete(botId, chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsChatIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdGet(botId: string, chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdGet(botId, chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsChatIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {string} botId 
         * @param {string} chatId 
         * @param {string} messageId 
         * @param {Feedback} feedback 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdMessagesMessageIdPost(botId: string, chatId: string, messageId: string, feedback: Feedback, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdMessagesMessageIdPost(botId, chatId, messageId, feedback, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsChatIdMessagesMessageIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {ChatUpdate} chatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdPut(botId: string, chatId: string, chatUpdate: ChatUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdPut(botId, chatId, chatUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsChatIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {string} botId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsGet(botId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsGet(botId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {string} botId 
         * @param {ChatCreate} chatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsPost(botId: string, chatCreate: ChatCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsPost(botId, chatCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.botsBotIdChatsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {ChatApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdDelete(requestParameters: ChatApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdChatsChatIdDelete(requestParameters.botId, requestParameters.chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {ChatApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdGet(requestParameters: ChatApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDetails> {
            return localVarFp.botsBotIdChatsChatIdGet(requestParameters.botId, requestParameters.chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters.botId, requestParameters.chatId, requestParameters.messageId, requestParameters.feedback, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {ChatApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdPut(requestParameters: ChatApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.botsBotIdChatsChatIdPut(requestParameters.botId, requestParameters.chatId, requestParameters.chatUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {ChatApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsGet(requestParameters: ChatApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatList> {
            return localVarFp.botsBotIdChatsGet(requestParameters.botId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {ChatApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsPost(requestParameters: ChatApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.botsBotIdChatsPost(requestParameters.botId, requestParameters.chatCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - interface
 * @export
 * @interface ChatApi
 */
export interface ChatApiInterface {
    /**
     * Delete a chat (idempotent operation)
     * @summary Delete a chat
     * @param {ChatApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsChatIdDelete(requestParameters: ChatApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific chat
     * @summary Get chat details
     * @param {ChatApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsChatIdGet(requestParameters: ChatApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDetails>;

    /**
     * Feedback a message
     * @summary Feedback a message
     * @param {ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update a chat
     * @summary Update a chat
     * @param {ChatApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsChatIdPut(requestParameters: ChatApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat>;

    /**
     * Get a list of chats
     * @summary List chats
     * @param {ChatApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsGet(requestParameters: ChatApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatList>;

    /**
     * Create a new chat
     * @summary Create a new chat
     * @param {ChatApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    botsBotIdChatsPost(requestParameters: ChatApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat>;

}

/**
 * Request parameters for botsBotIdChatsChatIdDelete operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsChatIdDeleteRequest
 */
export interface ChatApiBotsBotIdChatsChatIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdDelete
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdDelete
     */
    readonly chatId: string
}

/**
 * Request parameters for botsBotIdChatsChatIdGet operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsChatIdGetRequest
 */
export interface ChatApiBotsBotIdChatsChatIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdGet
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdGet
     */
    readonly chatId: string
}

/**
 * Request parameters for botsBotIdChatsChatIdMessagesMessageIdPost operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest
 */
export interface ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly chatId: string

    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly messageId: string

    /**
     * 
     * @type {Feedback}
     * @memberof ChatApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly feedback: Feedback
}

/**
 * Request parameters for botsBotIdChatsChatIdPut operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsChatIdPutRequest
 */
export interface ChatApiBotsBotIdChatsChatIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdPut
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsChatIdPut
     */
    readonly chatId: string

    /**
     * 
     * @type {ChatUpdate}
     * @memberof ChatApiBotsBotIdChatsChatIdPut
     */
    readonly chatUpdate: ChatUpdate
}

/**
 * Request parameters for botsBotIdChatsGet operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsGetRequest
 */
export interface ChatApiBotsBotIdChatsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsGet
     */
    readonly botId: string

    /**
     * 
     * @type {number}
     * @memberof ChatApiBotsBotIdChatsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ChatApiBotsBotIdChatsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for botsBotIdChatsPost operation in ChatApi.
 * @export
 * @interface ChatApiBotsBotIdChatsPostRequest
 */
export interface ChatApiBotsBotIdChatsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiBotsBotIdChatsPost
     */
    readonly botId: string

    /**
     * 
     * @type {ChatCreate}
     * @memberof ChatApiBotsBotIdChatsPost
     */
    readonly chatCreate: ChatCreate
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI implements ChatApiInterface {
    /**
     * Delete a chat (idempotent operation)
     * @summary Delete a chat
     * @param {ChatApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsChatIdDelete(requestParameters: ChatApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsChatIdDelete(requestParameters.botId, requestParameters.chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific chat
     * @summary Get chat details
     * @param {ChatApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsChatIdGet(requestParameters: ChatApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsChatIdGet(requestParameters.botId, requestParameters.chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Feedback a message
     * @summary Feedback a message
     * @param {ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: ChatApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters.botId, requestParameters.chatId, requestParameters.messageId, requestParameters.feedback, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a chat
     * @summary Update a chat
     * @param {ChatApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsChatIdPut(requestParameters: ChatApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsChatIdPut(requestParameters.botId, requestParameters.chatId, requestParameters.chatUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of chats
     * @summary List chats
     * @param {ChatApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsGet(requestParameters: ChatApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsGet(requestParameters.botId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new chat
     * @summary Create a new chat
     * @param {ChatApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public botsBotIdChatsPost(requestParameters: ChatApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).botsBotIdChatsPost(requestParameters.botId, requestParameters.chatCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

