/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Document } from '../models';
// @ts-ignore
import type { DocumentCreate } from '../models';
// @ts-ignore
import type { DocumentList } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { RebuildIndexesRequest } from '../models';
/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {RebuildIndexesRequest} rebuildIndexesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost: async (collectionId: string, documentId: string, rebuildIndexesRequest: RebuildIndexesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'documentId', documentId)
            // verify required parameter 'rebuildIndexesRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'rebuildIndexesRequest', rebuildIndexesRequest)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}/rebuild_indexes`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rebuildIndexesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet: async (collectionId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost: async (collectionId: string, documentCreate: DocumentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'collectionId', collectionId)
            // verify required parameter 'documentCreate' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'documentCreate', documentCreate)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdDelete(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdDelete(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentApi.collectionsCollectionIdDocumentsDocumentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdGet(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdGet(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentApi.collectionsCollectionIdDocumentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {RebuildIndexesRequest} rebuildIndexesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(collectionId: string, documentId: string, rebuildIndexesRequest: RebuildIndexesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(collectionId, documentId, rebuildIndexesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentApi.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsGet(collectionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsGet(collectionId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentApi.collectionsCollectionIdDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsPost(collectionId: string, documentCreate: DocumentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsPost(collectionId, documentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentApi.collectionsCollectionIdDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentApiFp(configuration)
    return {
        /**
         * Delete a document
         * @summary Delete a document
         * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters.collectionId, requestParameters.documentId, requestParameters.rebuildIndexesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {DocumentApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {DocumentApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentApi - interface
 * @export
 * @interface DocumentApi
 */
export interface DocumentApiInterface {
    /**
     * Delete a document
     * @summary Delete a document
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document>;

    /**
     * Rebuild specified types of indexes for a document
     * @summary Rebuild document indexes
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of documents
     * @summary List documents
     * @param {DocumentApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    collectionsCollectionIdDocumentsGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Create a new document
     * @summary Create a new document
     * @param {DocumentApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    collectionsCollectionIdDocumentsPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdDelete operation in DocumentApi.
 * @export
 * @interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest
 */
export interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdGet operation in DocumentApi.
 * @export
 * @interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest
 */
export interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost operation in DocumentApi.
 * @export
 * @interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest
 */
export interface DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly documentId: string

    /**
     * 
     * @type {RebuildIndexesRequest}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly rebuildIndexesRequest: RebuildIndexesRequest
}

/**
 * Request parameters for collectionsCollectionIdDocumentsGet operation in DocumentApi.
 * @export
 * @interface DocumentApiCollectionsCollectionIdDocumentsGetRequest
 */
export interface DocumentApiCollectionsCollectionIdDocumentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {number}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for collectionsCollectionIdDocumentsPost operation in DocumentApi.
 * @export
 * @interface DocumentApiCollectionsCollectionIdDocumentsPostRequest
 */
export interface DocumentApiCollectionsCollectionIdDocumentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {DocumentCreate}
     * @memberof DocumentApiCollectionsCollectionIdDocumentsPost
     */
    readonly documentCreate: DocumentCreate
}

/**
 * DocumentApi - object-oriented interface
 * @export
 * @class DocumentApi
 * @extends {BaseAPI}
 */
export class DocumentApi extends BaseAPI implements DocumentApiInterface {
    /**
     * Delete a document
     * @summary Delete a document
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DocumentApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig) {
        return DocumentApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rebuild specified types of indexes for a document
     * @summary Rebuild document indexes
     * @param {DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters.collectionId, requestParameters.documentId, requestParameters.rebuildIndexesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of documents
     * @summary List documents
     * @param {DocumentApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public collectionsCollectionIdDocumentsGet(requestParameters: DocumentApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig) {
        return DocumentApiFp(this.configuration).collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new document
     * @summary Create a new document
     * @param {DocumentApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public collectionsCollectionIdDocumentsPost(requestParameters: DocumentApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentApiFp(this.configuration).collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

