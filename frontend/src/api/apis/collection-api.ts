/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Collection } from '../models';
// @ts-ignore
import type { CollectionCreate } from '../models';
// @ts-ignore
import type { CollectionList } from '../models';
// @ts-ignore
import type { CollectionUpdate } from '../models';
// @ts-ignore
import type { Document } from '../models';
// @ts-ignore
import type { DocumentCreate } from '../models';
// @ts-ignore
import type { DocumentList } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
/**
 * CollectionApi - axios parameter creator
 * @export
 */
export const CollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDelete: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDelete', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet: async (collectionId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost: async (collectionId: string, documentCreate: DocumentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'collectionId', collectionId)
            // verify required parameter 'documentCreate' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'documentCreate', documentCreate)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {string} collectionId 
         * @param {CollectionUpdate} collectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdPut: async (collectionId: string, collectionUpdate: CollectionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdPut', 'collectionId', collectionId)
            // verify required parameter 'collectionUpdate' is not null or undefined
            assertParamExists('collectionsCollectionIdPut', 'collectionUpdate', collectionUpdate)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of collections
         * @summary List collections
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {CollectionCreate} collectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsPost: async (collectionCreate: CollectionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionCreate' is not null or undefined
            assertParamExists('collectionsPost', 'collectionCreate', collectionCreate)
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionApi - functional programming interface
 * @export
 */
export const CollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDelete(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDelete(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdDelete(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdDelete(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdDocumentsDocumentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdGet(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdGet(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdDocumentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsGet(collectionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsGet(collectionId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsPost(collectionId: string, documentCreate: DocumentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsPost(collectionId, documentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {string} collectionId 
         * @param {CollectionUpdate} collectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdPut(collectionId: string, collectionUpdate: CollectionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdPut(collectionId, collectionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsCollectionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of collections
         * @summary List collections
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {CollectionCreate} collectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsPost(collectionCreate: CollectionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsPost(collectionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CollectionApi - factory interface
 * @export
 */
export const CollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionApiFp(configuration)
    return {
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {CollectionApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {CollectionApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {CollectionApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost(requestParameters: CollectionApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {CollectionApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGet(requestParameters: CollectionApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {CollectionApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdPut(requestParameters: CollectionApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsCollectionIdPut(requestParameters.collectionId, requestParameters.collectionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of collections
         * @summary List collections
         * @param {CollectionApiCollectionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet(requestParameters: CollectionApiCollectionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CollectionList> {
            return localVarFp.collectionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {CollectionApiCollectionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsPost(requestParameters: CollectionApiCollectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsPost(requestParameters.collectionCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionApi - interface
 * @export
 * @interface CollectionApi
 */
export interface CollectionApiInterface {
    /**
     * Delete a collection
     * @summary Delete a collection
     * @param {CollectionApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete a document
     * @summary Delete a document
     * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document>;

    /**
     * Get a list of documents
     * @summary List documents
     * @param {CollectionApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdDocumentsGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Create a new document
     * @summary Create a new document
     * @param {CollectionApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdDocumentsPost(requestParameters: CollectionApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Get details of a specific collection
     * @summary Get collection details
     * @param {CollectionApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdGet(requestParameters: CollectionApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

    /**
     * Update a collection
     * @summary Update a collection
     * @param {CollectionApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsCollectionIdPut(requestParameters: CollectionApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

    /**
     * Get a list of collections
     * @summary List collections
     * @param {CollectionApiCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsGet(requestParameters?: CollectionApiCollectionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionList>;

    /**
     * Create a new collection
     * @summary Create a new collection
     * @param {CollectionApiCollectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiInterface
     */
    collectionsPost(requestParameters: CollectionApiCollectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

}

/**
 * Request parameters for collectionsCollectionIdDelete operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdDeleteRequest
 */
export interface CollectionApiCollectionsCollectionIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDelete
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdDelete operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest
 */
export interface CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdGet operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest
 */
export interface CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsGet operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdDocumentsGetRequest
 */
export interface CollectionApiCollectionsCollectionIdDocumentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {number}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for collectionsCollectionIdDocumentsPost operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdDocumentsPostRequest
 */
export interface CollectionApiCollectionsCollectionIdDocumentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {DocumentCreate}
     * @memberof CollectionApiCollectionsCollectionIdDocumentsPost
     */
    readonly documentCreate: DocumentCreate
}

/**
 * Request parameters for collectionsCollectionIdGet operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdGetRequest
 */
export interface CollectionApiCollectionsCollectionIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdPut operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsCollectionIdPutRequest
 */
export interface CollectionApiCollectionsCollectionIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CollectionApiCollectionsCollectionIdPut
     */
    readonly collectionId: string

    /**
     * 
     * @type {CollectionUpdate}
     * @memberof CollectionApiCollectionsCollectionIdPut
     */
    readonly collectionUpdate: CollectionUpdate
}

/**
 * Request parameters for collectionsGet operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsGetRequest
 */
export interface CollectionApiCollectionsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CollectionApiCollectionsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CollectionApiCollectionsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for collectionsPost operation in CollectionApi.
 * @export
 * @interface CollectionApiCollectionsPostRequest
 */
export interface CollectionApiCollectionsPostRequest {
    /**
     * 
     * @type {CollectionCreate}
     * @memberof CollectionApiCollectionsPost
     */
    readonly collectionCreate: CollectionCreate
}

/**
 * CollectionApi - object-oriented interface
 * @export
 * @class CollectionApi
 * @extends {BaseAPI}
 */
export class CollectionApi extends BaseAPI implements CollectionApiInterface {
    /**
     * Delete a collection
     * @summary Delete a collection
     * @param {CollectionApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a document
     * @summary Delete a document
     * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of documents
     * @summary List documents
     * @param {CollectionApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdDocumentsGet(requestParameters: CollectionApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new document
     * @summary Create a new document
     * @param {CollectionApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdDocumentsPost(requestParameters: CollectionApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific collection
     * @summary Get collection details
     * @param {CollectionApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdGet(requestParameters: CollectionApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a collection
     * @summary Update a collection
     * @param {CollectionApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsCollectionIdPut(requestParameters: CollectionApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsCollectionIdPut(requestParameters.collectionId, requestParameters.collectionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of collections
     * @summary List collections
     * @param {CollectionApiCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsGet(requestParameters: CollectionApiCollectionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new collection
     * @summary Create a new collection
     * @param {CollectionApiCollectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionsPost(requestParameters: CollectionApiCollectionsPostRequest, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionsPost(requestParameters.collectionCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

