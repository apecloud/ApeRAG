/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuditLog } from '../models';
// @ts-ignore
import type { AuditLogList } from '../models';
/**
 * AuditApi - axios parameter creator
 * @export
 */
export const AuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {string} auditId Audit log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLog: async (auditId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditId' is not null or undefined
            assertParamExists('getAuditLog', 'auditId', auditId)
            const localVarPath = `/audit-logs/{audit_id}`
                .replace(`{${"audit_id"}}`, encodeURIComponent(String(auditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List audit logs with filtering options
         * @summary List audit logs
         * @param {string} [apiName] Filter by API name
         * @param {string} [startDate] Filter by start date
         * @param {string} [endDate] Filter by end date
         * @param {number} [limit] Maximum number of records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (apiName?: string, startDate?: string, endDate?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audit-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiName !== undefined) {
                localVarQueryParameter['api_name'] = apiName;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditApi - functional programming interface
 * @export
 */
export const AuditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {string} auditId Audit log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditLog(auditId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditLog(auditId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditApi.getAuditLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List audit logs with filtering options
         * @summary List audit logs
         * @param {string} [apiName] Filter by API name
         * @param {string} [startDate] Filter by start date
         * @param {string} [endDate] Filter by end date
         * @param {number} [limit] Maximum number of records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(apiName?: string, startDate?: string, endDate?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(apiName, startDate, endDate, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditApi.listAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuditApi - factory interface
 * @export
 */
export const AuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditApiFp(configuration)
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog> {
            return localVarFp.getAuditLog(requestParameters.auditId, options).then((request) => request(axios, basePath));
        },
        /**
         * List audit logs with filtering options
         * @summary List audit logs
         * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(requestParameters: AuditApiListAuditLogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogList> {
            return localVarFp.listAuditLogs(requestParameters.apiName, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditApi - interface
 * @export
 * @interface AuditApi
 */
export interface AuditApiInterface {
    /**
     * Get a specific audit log by ID
     * @summary Get audit log detail
     * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApiInterface
     */
    getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog>;

    /**
     * List audit logs with filtering options
     * @summary List audit logs
     * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApiInterface
     */
    listAuditLogs(requestParameters?: AuditApiListAuditLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogList>;

}

/**
 * Request parameters for getAuditLog operation in AuditApi.
 * @export
 * @interface AuditApiGetAuditLogRequest
 */
export interface AuditApiGetAuditLogRequest {
    /**
     * Audit log ID
     * @type {string}
     * @memberof AuditApiGetAuditLog
     */
    readonly auditId: string
}

/**
 * Request parameters for listAuditLogs operation in AuditApi.
 * @export
 * @interface AuditApiListAuditLogsRequest
 */
export interface AuditApiListAuditLogsRequest {
    /**
     * Filter by API name
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly apiName?: string

    /**
     * Filter by start date
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly startDate?: string

    /**
     * Filter by end date
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly endDate?: string

    /**
     * Maximum number of records
     * @type {number}
     * @memberof AuditApiListAuditLogs
     */
    readonly limit?: number
}

/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export class AuditApi extends BaseAPI implements AuditApiInterface {
    /**
     * Get a specific audit log by ID
     * @summary Get audit log detail
     * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig) {
        return AuditApiFp(this.configuration).getAuditLog(requestParameters.auditId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List audit logs with filtering options
     * @summary List audit logs
     * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public listAuditLogs(requestParameters: AuditApiListAuditLogsRequest = {}, options?: RawAxiosRequestConfig) {
        return AuditApiFp(this.configuration).listAuditLogs(requestParameters.apiName, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

