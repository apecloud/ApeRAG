/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { Invitation } from '../models';
// @ts-ignore
import type { InvitationCreate } from '../models';
// @ts-ignore
import type { InvitationList } from '../models';
/**
 * InviteApi - axios parameter creator
 * @export
 */
export const InviteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {InvitationCreate} invitationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitePost: async (invitationCreate: InvitationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationCreate' is not null or undefined
            assertParamExists('invitePost', 'invitationCreate', invitationCreate)
            const localVarPath = `/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invitationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InviteApi - functional programming interface
 * @export
 */
export const InviteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InviteApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InviteApi.invitationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {InvitationCreate} invitationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitePost(invitationCreate: InvitationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitePost(invitationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InviteApi.invitePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InviteApi - factory interface
 * @export
 */
export const InviteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InviteApiFp(configuration)
    return {
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsGet(options?: RawAxiosRequestConfig): AxiosPromise<InvitationList> {
            return localVarFp.invitationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {InviteApiInvitePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitePost(requestParameters: InviteApiInvitePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Invitation> {
            return localVarFp.invitePost(requestParameters.invitationCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InviteApi - interface
 * @export
 * @interface InviteApi
 */
export interface InviteApiInterface {
    /**
     * Get all invitations
     * @summary Get all invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApiInterface
     */
    invitationsGet(options?: RawAxiosRequestConfig): AxiosPromise<InvitationList>;

    /**
     * Create a new invitation for a user to register
     * @summary Create an invitation
     * @param {InviteApiInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApiInterface
     */
    invitePost(requestParameters: InviteApiInvitePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Invitation>;

}

/**
 * Request parameters for invitePost operation in InviteApi.
 * @export
 * @interface InviteApiInvitePostRequest
 */
export interface InviteApiInvitePostRequest {
    /**
     * 
     * @type {InvitationCreate}
     * @memberof InviteApiInvitePost
     */
    readonly invitationCreate: InvitationCreate
}

/**
 * InviteApi - object-oriented interface
 * @export
 * @class InviteApi
 * @extends {BaseAPI}
 */
export class InviteApi extends BaseAPI implements InviteApiInterface {
    /**
     * Get all invitations
     * @summary Get all invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public invitationsGet(options?: RawAxiosRequestConfig) {
        return InviteApiFp(this.configuration).invitationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new invitation for a user to register
     * @summary Create an invitation
     * @param {InviteApiInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public invitePost(requestParameters: InviteApiInvitePostRequest, options?: RawAxiosRequestConfig) {
        return InviteApiFp(this.configuration).invitePost(requestParameters.invitationCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

