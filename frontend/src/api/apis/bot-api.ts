/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Bot } from '../models';
// @ts-ignore
import type { BotCreate } from '../models';
// @ts-ignore
import type { BotList } from '../models';
// @ts-ignore
import type { BotUpdate } from '../models';
// @ts-ignore
import type { DebugFlowRequest } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
/**
 * BotApi - axios parameter creator
 * @export
 */
export const BotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdDelete: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdDelete', 'botId', botId)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost: async (botId: string, debugFlowRequest: DebugFlowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'botId', botId)
            // verify required parameter 'debugFlowRequest' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'debugFlowRequest', debugFlowRequest)
            const localVarPath = `/bots/{bot_id}/flow/debug`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(debugFlowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdGet: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {string} botId 
         * @param {BotUpdate} botUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdPut: async (botId: string, botUpdate: BotUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdPut', 'botId', botId)
            // verify required parameter 'botUpdate' is not null or undefined
            assertParamExists('botsBotIdPut', 'botUpdate', botUpdate)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {BotCreate} botCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost: async (botCreate: BotCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botCreate' is not null or undefined
            assertParamExists('botsPost', 'botCreate', botCreate)
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BotApi - functional programming interface
 * @export
 */
export const BotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BotApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdDelete(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdDelete(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsBotIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowDebugPost(botId: string, debugFlowRequest: DebugFlowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowDebugPost(botId, debugFlowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsBotIdFlowDebugPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdGet(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdGet(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsBotIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {string} botId 
         * @param {BotUpdate} botUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdPut(botId: string, botUpdate: BotUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdPut(botId, botUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsBotIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {BotCreate} botCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsPost(botCreate: BotCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsPost(botCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BotApi.botsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BotApi - factory interface
 * @export
 */
export const BotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BotApiFp(configuration)
    return {
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {BotApiBotsBotIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdDelete(requestParameters: BotApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdDelete(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {BotApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost(requestParameters: BotApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {BotApiBotsBotIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdGet(requestParameters: BotApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot> {
            return localVarFp.botsBotIdGet(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {BotApiBotsBotIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdPut(requestParameters: BotApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdPut(requestParameters.botId, requestParameters.botUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {BotApiBotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(requestParameters: BotApiBotsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BotList> {
            return localVarFp.botsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {BotApiBotsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost(requestParameters: BotApiBotsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot> {
            return localVarFp.botsPost(requestParameters.botCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BotApi - interface
 * @export
 * @interface BotApi
 */
export interface BotApiInterface {
    /**
     * Delete a bot (idempotent operation)
     * @summary Delete a bot
     * @param {BotApiBotsBotIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsBotIdDelete(requestParameters: BotApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {BotApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsBotIdFlowDebugPost(requestParameters: BotApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific bot
     * @summary Get bot details
     * @param {BotApiBotsBotIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsBotIdGet(requestParameters: BotApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot>;

    /**
     * Update a bot
     * @summary Update a bot
     * @param {BotApiBotsBotIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsBotIdPut(requestParameters: BotApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of bots
     * @summary List bots
     * @param {BotApiBotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsGet(requestParameters?: BotApiBotsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BotList>;

    /**
     * Create a new bot
     * @summary Create a new bot
     * @param {BotApiBotsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApiInterface
     */
    botsPost(requestParameters: BotApiBotsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot>;

}

/**
 * Request parameters for botsBotIdDelete operation in BotApi.
 * @export
 * @interface BotApiBotsBotIdDeleteRequest
 */
export interface BotApiBotsBotIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotsBotIdDelete
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdFlowDebugPost operation in BotApi.
 * @export
 * @interface BotApiBotsBotIdFlowDebugPostRequest
 */
export interface BotApiBotsBotIdFlowDebugPostRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotsBotIdFlowDebugPost
     */
    readonly botId: string

    /**
     * 
     * @type {DebugFlowRequest}
     * @memberof BotApiBotsBotIdFlowDebugPost
     */
    readonly debugFlowRequest: DebugFlowRequest
}

/**
 * Request parameters for botsBotIdGet operation in BotApi.
 * @export
 * @interface BotApiBotsBotIdGetRequest
 */
export interface BotApiBotsBotIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotsBotIdGet
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdPut operation in BotApi.
 * @export
 * @interface BotApiBotsBotIdPutRequest
 */
export interface BotApiBotsBotIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotsBotIdPut
     */
    readonly botId: string

    /**
     * 
     * @type {BotUpdate}
     * @memberof BotApiBotsBotIdPut
     */
    readonly botUpdate: BotUpdate
}

/**
 * Request parameters for botsGet operation in BotApi.
 * @export
 * @interface BotApiBotsGetRequest
 */
export interface BotApiBotsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BotApiBotsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BotApiBotsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for botsPost operation in BotApi.
 * @export
 * @interface BotApiBotsPostRequest
 */
export interface BotApiBotsPostRequest {
    /**
     * 
     * @type {BotCreate}
     * @memberof BotApiBotsPost
     */
    readonly botCreate: BotCreate
}

/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export class BotApi extends BaseAPI implements BotApiInterface {
    /**
     * Delete a bot (idempotent operation)
     * @summary Delete a bot
     * @param {BotApiBotsBotIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsBotIdDelete(requestParameters: BotApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsBotIdDelete(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {BotApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsBotIdFlowDebugPost(requestParameters: BotApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific bot
     * @summary Get bot details
     * @param {BotApiBotsBotIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsBotIdGet(requestParameters: BotApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsBotIdGet(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a bot
     * @summary Update a bot
     * @param {BotApiBotsBotIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsBotIdPut(requestParameters: BotApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsBotIdPut(requestParameters.botId, requestParameters.botUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of bots
     * @summary List bots
     * @param {BotApiBotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsGet(requestParameters: BotApiBotsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new bot
     * @summary Create a new bot
     * @param {BotApiBotsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsPost(requestParameters: BotApiBotsPostRequest, options?: RawAxiosRequestConfig) {
        return BotApiFp(this.configuration).botsPost(requestParameters.botCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

