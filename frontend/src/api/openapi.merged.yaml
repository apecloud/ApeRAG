openapi: 3.0.0
info:
  title: ApeRAG API
  description: ApeRAG API Documentation
  version: 1.0.0
servers:
  - url: /api/v1
    description: API v1
paths:
  /bots:
    get:
      summary: List bots
      description: Get a list of bots
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/botList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new bot
      description: Create a new bot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botCreate'
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}:
    get:
      summary: Get bot details
      description: Get details of a specific bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a bot
      description: Delete a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bot deleted successfully
    put:
      summary: Update a bot
      description: Update a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botUpdate'
      responses:
        '200':
          description: Bot updated successfully
  /bots/{bot_id}/flow:
    get:
      summary: Get flow
      description: Get flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get flow successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update flow
      description: Update flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowDefinition'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/flow/debug:
    post:
      summary: Debug a flow
      description: Debug a flow
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/debugFlowRequest'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats:
    get:
      summary: List chats
      description: Get a list of chats
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new chat
      description: Create a new chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatCreate'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}:
    get:
      summary: Get chat details
      description: Get details of a specific chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a chat
      description: Update a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatUpdate'
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a chat
      description: Delete a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}/messages/{message_id}:
    post:
      summary: Feedback a message
      description: Feedback a message
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
      responses:
        '200':
          description: A message
  /collections:
    get:
      summary: List collections
      description: Get a list of collections
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new collection
      description: Create a new collection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionCreate'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}:
    get:
      summary: Get collection details
      description: Get details of a specific collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a collection
      description: Delete a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collection deleted successfully
    put:
      summary: Update a collection
      description: Update a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionUpdate'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}/documents:
    get:
      summary: List documents
      description: Get a list of documents
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new document
      description: Create a new document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentCreate'
      responses:
        '200':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}:
    get:
      summary: Get document details
      description: Get details of a specific document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a document
      description: Delete a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a document
      description: Update a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentUpdate'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searchTests:
    get:
      summary: Get search test history
      description: Get the history of search tests
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search test history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchTestResultList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Test search in collection
      description: Test search in a collection with different search types
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchTestRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchTestResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searchTests/{search_test_id}:
    delete:
      summary: Delete a search test
      description: Delete a search test
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: search_test_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Search test deleted successfully
        '401':
          description: Unauthorized
  /apikeys:
    get:
      summary: Get API keys
      description: Get API keys
      responses:
        '200':
          description: API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKeyList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create API key
      description: Create API key
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyCreate'
      responses:
        '200':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys/{apikey_id}:
    put:
      summary: Update API key
      description: Update API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyUpdate'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
    delete:
      summary: Delete API key
      description: Delete API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: API key not found
  /supported_model_service_providers:
    get:
      summary: Get model service providers
      description: Get model service providers
      responses:
        '200':
          description: Model service providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelServiceProviderList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /model_service_providers:
    get:
      summary: Get model service providers
      description: Get model service providers
      responses:
        '200':
          description: Model service providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelServiceProviderList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /model_service_providers/{provider}:
    put:
      summary: Update model service provider
      description: Update model service provider
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modelServiceProviderUpdate'
      responses:
        '200':
          description: Model service provider
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete model service provider
      description: Delete model service provider
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model service provider
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model service provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /available_models:
    get:
      summary: Get available models
      description: Get available models
      responses:
        '200':
          description: Available models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelConfigList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /config:
    get:
      summary: Get system configuration
      description: Get system configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /prompt-templates:
    get:
      summary: Get prompt templates
      description: Get prompt templates
      responses:
        '200':
          description: A list of prompt templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/promptTemplateList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invite:
    post:
      summary: Create an invitation
      description: Create a new invitation for a user to register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invitationCreate'
      responses:
        '200':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invitations:
    get:
      summary: Get all invitations
      description: Get all invitations
      responses:
        '200':
          description: Invitations fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitationList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /register:
    post:
      summary: Register a new user
      description: Register a new user with an invitation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /login:
    post:
      summary: Login a user
      description: Login a user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /logout:
    post:
      summary: Logout a user
      description: Logout a user
      responses:
        '200':
          description: Logout successful
  /users:
    get:
      summary: Get all users
      description: Get all users
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /user:
    get:
      summary: Get user info
      description: Get user info
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /change-password:
    post:
      summary: Change user password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: Password changed successfully
  /users/{user_id}:
    delete:
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    CookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
  schemas:
    bot:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    pageResult:
      description: PageResult info
      properties:
        page_number:
          type: integer
          description: The page number
        page_size:
          type: integer
          description: The page size
        count:
          type: integer
          description: The total count of items
      type: object
    botList:
      type: object
      description: A list of bots
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/bot'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    failResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        message:
          type: string
          description: Error message
          example: Invalid request
    botCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    botUpdate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    ExecutionConfig:
      type: object
      description: Configuration for workflow execution
      properties:
        timeout:
          type: integer
          description: Overall timeout in seconds
          example: 300
        retry:
          type: object
          properties:
            max_attempts:
              type: integer
              description: Maximum number of retry attempts
              example: 3
            delay:
              type: integer
              description: Delay between retries in seconds
              example: 5
        error_handling:
          type: object
          properties:
            strategy:
              type: string
              enum:
                - stop_on_error
                - continue_on_error
              description: Error handling strategy
              example: stop_on_error
            notification:
              type: object
              properties:
                email:
                  type: array
                  items:
                    type: string
                    format: email
                  example:
                    - admin@example.com
    SchemaDefinition:
      type: object
      description: JSON Schema definition
      properties:
        type:
          type: string
          enum:
            - object
            - array
            - string
            - number
            - integer
            - boolean
            - null
        properties:
          type: object
        required:
          type: array
          items:
            type: string
        additionalProperties:
          type: boolean
      additionalProperties: true
    Node:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          type: string
          description: Unique identifier for the node
          example: vector_search_3f8e2c1a
        ariaLabel:
          type: string
          description: label for the node
        type:
          type: string
          enum:
            - start
            - vector_search
            - fulltext_search
            - graph_search
            - merge
            - rerank
            - llm
          description: Type of node
          example: vector_search
        title:
          type: string
          description: Human-readable title of the node
          example: Vector Search
        data:
          type: object
          required:
            - input
            - output
          properties:
            input:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
                values:
                  type: object
                  description: Default values and template references
                  additionalProperties: true
            output:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
            collapsed:
              type: boolean
              description: Whether the node is collapsed, only useful for frontend to collapse the node
              example: false
        position:
          type: object
          description: Position of the node in the frontend
          properties:
            x:
              type: number
            'y':
              type: number
        dragHandle:
          type: string
          description: Drag handle of the node, only useful for frontend to drag the node
        measured:
          type: object
          description: Measured position of the node, only useful for frontend to measure the node
          properties:
            width:
              type: number
            height:
              type: number
        selected:
          type: boolean
          description: Whether the node is selected, only useful for frontend to select the node
        deletable:
          type: boolean
          description: Whether the node is deletable, only useful for frontend to delete the node
          example: true
    Edge:
      type: object
      required:
        - source
        - target
      properties:
        id:
          type: string
          description: Unique identifier for the edge, only useful for frontend to identify the edge
          example: edge_1
        deletable:
          type: boolean
          description: Whether the edge is deletable, only useful for frontend to delete the edge
          example: true
        type:
          type: string
          description: Type of the edge
          example: edge
        source:
          type: string
          description: ID of the source node
          example: start
        target:
          type: string
          description: ID of the target node
          example: vector_search_3f8e2c1a
    WorkflowStyle:
      type: object
      description: Workflow style
      properties:
        edgeType:
          type: string
          enum:
            - straight
            - step
            - smoothstep
            - default
            - simplebezier
        layoutDirection:
          type: string
          enum:
            - TB
            - LR
    WorkflowDefinition:
      type: object
      required:
        - name
        - title
        - version
        - nodes
        - edges
      properties:
        name:
          type: string
          description: Machine-readable identifier for the workflow
          example: rag_flow
        title:
          type: string
          description: Human-readable title of the workflow
          example: RAG Knowledge Base Flow
        description:
          type: string
          description: Detailed description of the workflow
          example: A typical RAG flow with parallel retrieval and reranking
        version:
          type: string
          description: Version number of the workflow definition
          example: 1.0.0
        execution:
          $ref: '#/components/schemas/ExecutionConfig'
        schema:
          type: object
          description: Custom schema definitions used across the workflow
          additionalProperties:
            $ref: '#/components/schemas/SchemaDefinition'
        nodes:
          type: array
          description: List of nodes in the workflow
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: List of edges connecting nodes in the workflow
          items:
            $ref: '#/components/schemas/Edge'
        style:
          $ref: '#/components/schemas/WorkflowStyle'
    debugFlowRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query
    chat:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatList:
      type: object
      description: A list of chats
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/chat'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    chatCreate:
      type: object
      properties:
        title:
          type: string
    reference:
      type: object
      properties:
        score:
          type: number
        text:
          type: string
        metadata:
          type: object
    feedback:
      type: object
      properties:
        type:
          type: string
          enum:
            - good
            - bad
        tag:
          type: string
          enum:
            - Harmful
            - Unsafe
            - Fake
            - Unhelpful
            - Other
        message:
          type: string
    chatMessage:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - welcome
            - message
            - start
            - stop
            - error
        timestamp:
          type: number
        role:
          type: string
          enum:
            - human
            - ai
        data:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
        urls:
          type: array
          items:
            type: string
        feedback:
          $ref: '#/components/schemas/feedback'
    chatDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        history:
          type: array
          items:
            $ref: '#/components/schemas/chatMessage'
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatUpdate:
      type: object
      properties:
        title:
          type: string
    crontabConfig:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to enable scheduled tasks
        minute:
          type: string
          description: Minute field in cron expression
          example: '0'
        hour:
          type: string
          description: Hour field in cron expression
          example: '0'
        day_of_month:
          type: string
          description: Day of month field in cron expression
          example: '*'
        month:
          type: string
          description: Month field in cron expression
          example: '*'
        day_of_week:
          type: string
          description: Day of week field in cron expression
          example: '*'
    modelSpec:
      type: object
      properties:
        model:
          type: string
          description: The name of the language model to use
          example: gpt-4o-mini
        model_service_provider:
          type: string
          description: Used for querying auth information (api_key/api_base/...) for a model service provider.
          example: openai
        custom_llm_provider:
          type: string
          description: Used for Non-OpenAI LLMs (e.g. 'bedrock' for amazon.titan-tg1-large)
          example: openai
        temperature:
          type: number
          description: Controls randomness in the output. Values between 0 and 2. Lower values make output more focused and deterministic
          minimum: 0
          maximum: 2
          example: 0.1
          default: 0.1
        max_tokens:
          type: integer
          description: Maximum number of tokens to generate
          minimum: 1
          example: 4096
        max_completion_tokens:
          type: integer
          description: Upper bound for generated completion tokens, including visible and reasoning tokens
          minimum: 1
          example: 4096
        timeout:
          type: integer
          description: Maximum execution time in seconds for the API request
          minimum: 1
        top_n:
          type: integer
          description: Number of top results to return when reranking documents
          minimum: 1
    collectionConfig:
      type: object
      properties:
        source:
          type: string
          description: Source system identifier
          example: system
        crontab:
          $ref: '#/components/schemas/crontabConfig'
        enable_knowledge_graph:
          type: boolean
          description: Whether to enable knowledge graph
        embedding:
          $ref: '#/components/schemas/modelSpec'
        completion:
          $ref: '#/components/schemas/modelSpec'
        path:
          type: string
          description: Path for local and ftp sources
          deprecated: true
        host:
          type: string
          description: FTP host
          deprecated: true
        username:
          type: string
          description: FTP username
          deprecated: true
        password:
          type: string
          description: FTP password
          deprecated: true
        region:
          type: string
          description: Region for S3/OSS
          deprecated: true
        access_key_id:
          type: string
          description: Access key ID for S3/OSS
          deprecated: true
        secret_access_key:
          type: string
          description: Secret access key for S3/OSS
          deprecated: true
        bucket:
          type: string
          description: Bucket name for S3/OSS
          deprecated: true
        dir:
          type: string
          description: Directory path in bucket for S3/OSS
          deprecated: true
        email_source:
          type: object
          description: Email source configuration
          deprecated: true
        pop_server:
          type: string
          description: POP3 server address
          deprecated: true
        port:
          type: string
          description: Email server port
          deprecated: true
        email_address:
          type: string
          description: Email address
          deprecated: true
        email_password:
          type: string
          description: Email password
          deprecated: true
        app_id:
          type: string
          description: Feishu app ID
          deprecated: true
        app_secret:
          type: string
          description: Feishu app secret
          deprecated: true
        space_id:
          type: string
          description: Feishu space ID
          deprecated: true
    collectionSource:
      type: object
      properties:
        category:
          type: string
          enum:
            - upload
            - tencent
            - oss
            - local
            - s3
            - ftp
            - email
            - url
            - github
        upload:
          type: object
        local:
          type: object
          properties:
            path:
              type: string
        oss:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
                properties:
                  bucket:
                    type: string
                  dir:
                    type: string
            bucket:
              type: string
            endpoint:
              type: string
            region:
              type: string
            dir:
              type: string
        s3:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
            bucket:
              type: string
            region:
              type: string
            dir:
              type: string
        ftp:
          type: object
          properties:
            path:
              type: string
            host:
              type: string
            port:
              type: number
            username:
              type: string
        email:
          type: object
          properties:
            pop_server:
              type: string
            port:
              type: number
            email_address:
              type: string
            email_password:
              type: string
            detect_spam:
              type: boolean
        url:
          type: object
          properties:
            url:
              type: string
            name:
              type: string
        feishu:
          type: object
          properties:
            app_id:
              type: string
            app_secret:
              type: string
            space_id:
              type: string
            node_id:
              type: string
            method:
              type: string
            target_format:
              type: string
    collection:
      description: Collection is a collection of documents
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    collectionList:
      type: object
      description: A list of collections
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/collection'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    collectionCreate:
      type: object
      properties:
        title:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        type:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
    collectionUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
    document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - DELETING
            - DELETED
            - WARNING
        vector_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        fulltext_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        graph_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        config:
          type: string
        size:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    documentList:
      type: object
      description: A list of documents
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/document'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    documentCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
        collection_id:
          type: string
    documentUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
    vectorSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        similarity:
          type: number
          description: Similarity threshold
          minimum: 0
          maximum: 1
    fulltextSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
    graphSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
    searchTestResultItem:
      type: object
      properties:
        rank:
          type: integer
          description: Result rank
        score:
          type: number
          description: Result score
        content:
          type: string
          description: Result content
        source:
          type: string
          description: Source document or metadata
        recall_type:
          type: string
          description: Recall type
          enum:
            - vector_search
            - graph_search
            - fulltext_search
    searchTestResult:
      type: object
      properties:
        id:
          type: string
          description: The id of the search test result
        query:
          type: string
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchTestResultItem'
        created:
          type: string
          format: date-time
          description: The creation time of the search test result
    searchTestResultList:
      type: object
      description: A list of search test results
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchTestResult'
    searchTestRequest:
      type: object
      properties:
        query:
          type: string
          description: The user input query
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
    apiKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
    apiKeyList:
      type: object
      description: A list of API keys
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiKey'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    apiKeyCreate:
      type: object
      properties:
        description:
          type: string
    apiKeyUpdate:
      type: object
      properties:
        description:
          type: string
    modelServiceProvider:
      type: object
      properties:
        name:
          type: string
        dialect:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
        api_key:
          type: string
    modelServiceProviderList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/modelServiceProvider'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    modelServiceProviderUpdate:
      type: object
      properties:
        name:
          type: string
        api_key:
          type: string
        base_url:
          type: string
        extra:
          type: string
    modelInfo:
      type: object
      properties:
        input_cost_per_token:
          type: number
          description: Input cost per token for single requests
          example: 0.0000025
        output_cost_per_token:
          type: number
          description: Output cost per token for single requests
          example: 0.00001
        input_cost_per_token_batches:
          type: number
          description: Input cost per token for batch requests
          example: 0.00000125
        output_cost_per_token_batches:
          type: number
          description: Output cost per token for batch requests
          example: 0.000005
    modelDefinition:
      type: object
      allOf:
        - $ref: '#/components/schemas/modelSpec'
        - $ref: '#/components/schemas/modelInfo'
    modelConfig:
      type: object
      properties:
        name:
          type: string
        dialect:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
        embedding:
          type: array
          items:
            $ref: '#/components/schemas/modelDefinition'
        completion:
          type: array
          items:
            $ref: '#/components/schemas/modelDefinition'
        rerank:
          type: array
          items:
            $ref: '#/components/schemas/modelDefinition'
    modelConfigList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/modelConfig'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    config:
      type: object
      properties:
        admin_user_exists:
          type: boolean
          description: Whether the admin user exists
        auth:
          type: object
          properties:
            type:
              type: string
              enum:
                - none
                - auth0
                - authing
                - logto
                - cookie
            auth0:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            authing:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            logto:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
    promptTemplate:
      type: object
      properties:
        name:
          type: string
        prompt:
          type: string
        description:
          type: string
    promptTemplateList:
      type: object
      description: A list of prompt templates
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/promptTemplate'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    invitationCreate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
    invitation:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        token:
          type: string
          description: The token of the invitation
        created_by:
          type: integer
          description: The ID of the user who created the invitation
        created_at:
          type: string
          description: The date and time the invitation was created
        is_valid:
          type: boolean
          description: Whether the invitation is valid
        used_at:
          type: string
          description: The date and time the invitation was used
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
        expires_at:
          type: string
          description: The date and time the invitation will expire
    invitationList:
      type: object
      description: A list of invitations
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/invitation'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    register:
      type: object
      description: The email of the user
      properties:
        token:
          type: string
          description: The invitation token
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    user:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user
        is_active:
          type: boolean
          description: Whether the user is active
        date_joined:
          type: string
          description: The date and time the user joined the system
    login:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    userList:
      type: object
      description: A list of users
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    changePassword:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        old_password:
          type: string
          description: The old password of the user
        new_password:
          type: string
          description: The new password of the user
