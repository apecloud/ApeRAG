openapi: 3.0.0
info:
  title: ApeRAG API
  description: ApeRAG API Documentation
  version: 1.0.0
servers:
  - url: /api/v1
    description: API v1
paths:
  /bots:
    get:
      summary: List bots
      description: Get a list of bots
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/botList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new bot
      description: Create a new bot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botCreate'
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}:
    get:
      summary: Get bot details
      description: Get details of a specific bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a bot
      description: Delete a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bot deleted successfully
    put:
      summary: Update a bot
      description: Update a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botUpdate'
      responses:
        '200':
          description: Bot updated successfully
  /bots/{bot_id}/chats:
    get:
      summary: List chats
      description: Get a list of chats
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new chat
      description: Create a new chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatCreate'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}:
    get:
      summary: Get chat details
      description: Get details of a specific chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a chat
      description: Update a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatUpdate'
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a chat
      description: Delete a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}/messages/{message_id}:
    post:
      summary: Feedback a message
      description: Feedback a message
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
      responses:
        '200':
          description: A message
  /bots/{bot_id}/web-chats:
    get:
      summary: Get all web chats
      description: Get all web chats
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of web chats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatList'
    post:
      summary: Create a new web chat
      description: Create a new web chat
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A web chat
  /bots/{bot_id}/web-chats/{chat_id}:
    get:
      summary: Get a web chat
      description: Get a web chat
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A web chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDetails'
    put:
      summary: Update a web chat
      description: Update a web chat
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A web chat
  /bots/{bot_id}/web-chats/{chat_id}/messages/{message_id}:
    post:
      summary: Feedback a message
      description: Feedback a message
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
      responses:
        '200':
          description: A message
  /collections:
    get:
      summary: List collections
      description: Get a list of collections
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new collection
      description: Create a new collection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionCreate'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}:
    get:
      summary: Get collection details
      description: Get details of a specific collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a collection
      description: Delete a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collection deleted successfully
    put:
      summary: Update a collection
      description: Update a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionUpdate'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}/documents:
    get:
      summary: List documents
      description: Get a list of documents
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new document
      description: Create a new document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentCreate'
      responses:
        '200':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}:
    get:
      summary: Get document details
      description: Get details of a specific document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a document
      description: Delete a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a document
      description: Update a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentUpdate'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/questions:
    get:
      summary: List questions
      description: Get a list of questions
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Trigger question generation
      description: Trigger question generation
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Question generation triggered successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/questions/{question_id}:
    get:
      summary: Get question details
      description: Get details of a specific question
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Question details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a question
      description: Update a question
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionUpdate'
      responses:
        '200':
          description: Question updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a question
      description: Delete a question
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Question deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys:
    get:
      summary: Get API keys
      description: Get API keys
      responses:
        '200':
          description: API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKeyList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create API key
      description: Create API key
      security:
        - BearerAuth: []
      responses:
        '200':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys/{apikey_id}:
    delete:
      summary: Delete API key
      description: Delete API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: API key not found
  /models:
    get:
      summary: Get models
      description: Get models
      responses:
        '200':
          description: Models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /supported_model_service_providers:
    get:
      summary: Get supported model service providers
      description: Get supported model service providers
      responses:
        '200':
          description: Supported model service providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/supportedModelServiceProviderList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /model_service_providers:
    get:
      summary: Get model service providers
      description: Get model service providers
      responses:
        '200':
          description: Model service providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelServiceProviderList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /model_service_providers/{provider}:
    put:
      summary: Update model service provider
      description: Update model service provider
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modelServiceProviderUpdate'
      responses:
        '200':
          description: Model service provider
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete model service provider
      description: Delete model service provider
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model service provider
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model service provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /available_embeddings:
    get:
      summary: Get available embeddings
      description: Get available embeddings
      responses:
        '200':
          description: Available embeddings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableEmbeddingList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /available_models:
    get:
      summary: Get available models
      description: Get available models
      responses:
        '200':
          description: Available models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableModelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /config:
    get:
      summary: Get system configuration
      description: Get system configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /prompt-templates:
    get:
      summary: Get prompt templates
      description: Get prompt templates
      responses:
        '200':
          description: A list of prompt templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/promptTemplateList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invite:
    post:
      summary: Create an invitation
      description: Create a new invitation for a user to register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invitationCreate'
      responses:
        '200':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invitations:
    get:
      summary: Get all invitations
      description: Get all invitations
      responses:
        '200':
          description: Invitations fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitationList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /register:
    post:
      summary: Register a new user
      description: Register a new user with an invitation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /login:
    post:
      summary: Login a user
      description: Login a user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /logout:
    post:
      summary: Logout a user
      description: Logout a user
      responses:
        '200':
          description: Logout successful
  /users:
    get:
      summary: Get all users
      description: Get all users
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /user:
    get:
      summary: Get user info
      description: Get user info
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /change-password:
    post:
      summary: Change user password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: Password changed successfully
  /users/{user_id}:
    delete:
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    CookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
  schemas:
    bot:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    pageResult:
      description: PageResult info
      properties:
        page_number:
          type: integer
          description: The page number
        page_size:
          type: integer
          description: The page size
        count:
          type: integer
          description: The total count of items
      type: object
    botList:
      type: object
      description: A list of bots
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/bot'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    failResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        message:
          type: string
          description: Error message
          example: Invalid request
    botCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    botUpdate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    chat:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatList:
      type: object
      description: A list of chats
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/chat'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    chatCreate:
      type: object
      properties:
        title:
          type: string
        bot_id:
          type: string
    reference:
      type: object
      properties:
        score:
          type: number
        text:
          type: string
        metadata:
          type: object
    chatMessage:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - welcome
            - message
            - start
            - stop
            - error
        timestamp:
          type: number
        role:
          type: string
          enum:
            - human
            - ai
        data:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
        urls:
          type: array
          items:
            type: string
        upvote:
          type: number
        downvote:
          type: number
        revised_answer:
          type: string
        feed_back_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
    chatDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        history:
          type: array
          items:
            $ref: '#/components/schemas/chatMessage'
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatUpdate:
      type: object
      properties:
        title:
          type: string
    feedback:
      type: object
      properties:
        upvote:
          type: integer
        downvote:
          type: integer
        revised_answer:
          type: string
    collectionSource:
      type: object
      properties:
        category:
          type: string
          enum:
            - upload
            - tencent
            - oss
            - local
            - s3
            - ftp
            - email
            - url
            - github
        upload:
          type: object
        local:
          type: object
          properties:
            path:
              type: string
        oss:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
                properties:
                  bucket:
                    type: string
                  dir:
                    type: string
            bucket:
              type: string
            endpoint:
              type: string
            region:
              type: string
            dir:
              type: string
        s3:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
            bucket:
              type: string
            region:
              type: string
            dir:
              type: string
        ftp:
          type: object
          properties:
            path:
              type: string
            host:
              type: string
            port:
              type: number
            username:
              type: string
        email:
          type: object
          properties:
            pop_server:
              type: string
            port:
              type: number
            email_address:
              type: string
            email_password:
              type: string
            detect_spam:
              type: boolean
        url:
          type: object
          properties:
            url:
              type: string
            name:
              type: string
        feishu:
          type: object
          properties:
            app_id:
              type: string
            app_secret:
              type: string
            space_id:
              type: string
            node_id:
              type: string
            method:
              type: string
            target_format:
              type: string
    collection:
      description: Collection is a collection of documents
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        config:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
            - QUESTION_PENDING
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    collectionList:
      type: object
      description: A list of collections
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/collection'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    collectionCreate:
      type: object
      properties:
        title:
          type: string
        config:
          type: string
        type:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
    collectionUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        config:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
    document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - DELETING
            - DELETED
            - WARNING
        config:
          type: string
        size:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        sensitive_info:
          type: array
          items:
            type: string
    documentList:
      type: object
      description: A list of documents
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/document'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    documentCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
        collection_id:
          type: string
    documentUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
    question:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        collection_id:
          type: string
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - failed
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    questionList:
      type: object
      description: A list of questions
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/question'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    questionUpdate:
      type: object
      properties:
        content:
          type: string
    apiKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
    apiKeyList:
      type: object
      description: A list of API keys
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiKey'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    model:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        enabled:
          type: boolean
        memory:
          type: boolean
        free_tier:
          type: boolean
        endpoint:
          type: string
        default_token:
          type: boolean
        prompt_template:
          type: string
        context_window:
          type: integer
        temperature:
          type: number
        similarity_score_threshold:
          type: number
        similarity_topk:
          type: integer
        family_name:
          type: string
        family_label:
          type: string
    modelList:
      type: object
      description: A list of models
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/model'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    supportedModelServiceProvider:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
    supportedModelServiceProviderList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/supportedModelServiceProvider'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    modelServiceProvider:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
        api_key:
          type: string
    modelServiceProviderList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/modelServiceProvider'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    modelServiceProviderUpdate:
      type: object
      properties:
        name:
          type: string
        api_key:
          type: string
        base_url:
          type: string
        extra:
          type: string
    availableEmbedding:
      type: object
      properties:
        model_service_provider:
          type: string
        embedding_name:
          type: string
    availableEmbeddingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/availableEmbedding'
    availableModel:
      type: object
      properties:
        model_service_provider:
          type: string
        model_name:
          type: string
    availableModelList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/availableModel'
    config:
      type: object
      properties:
        admin_user_exists:
          type: boolean
          description: Whether the admin user exists
        auth:
          type: object
          properties:
            type:
              type: string
              enum:
                - none
                - auth0
                - authing
                - logto
                - cookie
            auth0:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            authing:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            logto:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
    promptTemplate:
      type: object
      properties:
        name:
          type: string
        prompt:
          type: string
        description:
          type: string
    promptTemplateList:
      type: object
      description: A list of prompt templates
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/promptTemplate'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    invitationCreate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
    invitation:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        token:
          type: string
          description: The token of the invitation
        created_by:
          type: integer
          description: The ID of the user who created the invitation
        created_at:
          type: string
          description: The date and time the invitation was created
        is_valid:
          type: boolean
          description: Whether the invitation is valid
        used_at:
          type: string
          description: The date and time the invitation was used
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
        expires_at:
          type: string
          description: The date and time the invitation will expire
    invitationList:
      type: object
      description: A list of invitations
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/invitation'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    register:
      type: object
      description: The email of the user
      properties:
        token:
          type: string
          description: The invitation token
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    user:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user
        is_active:
          type: boolean
          description: Whether the user is active
        date_joined:
          type: string
          description: The date and time the user joined the system
    login:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    userList:
      type: object
      description: A list of users
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    changePassword:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        old_password:
          type: string
          description: The old password of the user
        new_password:
          type: string
          description: The new password of the user
