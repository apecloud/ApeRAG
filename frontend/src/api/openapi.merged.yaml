openapi: 3.0.0
info:
  title: ApeRAG API
  description: ApeRAG API Documentation
  version: 1.0.0
servers:
  - url: /api/v1
    description: API v1
paths:
  /bots:
    get:
      summary: List bots
      description: Get a list of bots
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/botList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new bot
      description: Create a new bot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botCreate'
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}:
    get:
      summary: Get bot details
      description: Get details of a specific bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a bot
      description: Delete a bot (idempotent operation)
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bot deleted successfully (or already deleted)
    put:
      summary: Update a bot
      description: Update a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botUpdate'
      responses:
        '200':
          description: Bot updated successfully
  /bots/{bot_id}/flow:
    get:
      summary: Get flow
      description: Get flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get flow successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update flow
      description: Update flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowDefinition'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/flow/debug:
    post:
      summary: Debug a flow
      description: Debug a flow
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/debugFlowRequest'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats:
    get:
      summary: List chats
      description: Get a list of chats
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new chat
      description: Create a new chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatCreate'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}:
    get:
      summary: Get chat details
      description: Get details of a specific chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a chat
      description: Update a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatUpdate'
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a chat
      description: Delete a chat (idempotent operation)
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted successfully (or already deleted)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}/messages/{message_id}:
    post:
      summary: Feedback a message
      description: Feedback a message
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
      responses:
        '200':
          description: A message
  /collections:
    get:
      summary: List collections
      description: Get a list of collections
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new collection
      description: Create a new collection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionCreate'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}:
    get:
      summary: Get collection details
      description: Get details of a specific collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a collection
      description: Delete a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collection deleted successfully
    put:
      summary: Update a collection
      description: Update a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionUpdate'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}/documents:
    get:
      summary: List documents
      description: Get a list of documents
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new document
      description: Create a new document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentCreate'
      responses:
        '200':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}:
    get:
      summary: Get document details
      description: Get details of a specific document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a document
      description: Delete a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a document
      description: Update a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentUpdate'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searches:
    get:
      summary: Get search history
      description: Get the history of searches
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResultList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Search in collection
      description: Search in a collection with different search types
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searches/{search_id}:
    delete:
      summary: Delete a search
      description: Delete a search
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: search_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys:
    get:
      summary: Get API keys
      description: Get API keys
      responses:
        '200':
          description: API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKeyList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create API key
      description: Create API key
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyCreate'
      responses:
        '200':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys/{apikey_id}:
    put:
      summary: Update API key
      description: Update API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyUpdate'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
    delete:
      summary: Delete API key
      description: Delete API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: API key not found
  /available_models:
    post:
      summary: Get available models with filtering
      description: |
        Get available models with tag filtering support.
        - No tag_filters or empty array: Returns only models with "recommend" tag (default)
        - Specific filters: Returns models matching the filter conditions
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagFilterRequest'
            examples:
              default:
                summary: Default (recommend only)
                description: Empty request body returns only models with "recommend" tag
                value: {}
              all_models:
                summary: Get all models
                description: Empty tag_filters array returns all models
                value:
                  tag_filters: []
              simple_filter:
                summary: Simple tag filter
                description: Models with recommend tag
                value:
                  tag_filters:
                    - operation: OR
                      tags:
                        - recommend
              and_filter:
                summary: AND filter
                description: Models with both free and recommend tags
                value:
                  tag_filters:
                    - operation: AND
                      tags:
                        - free
                        - recommend
              or_filter:
                summary: OR filter
                description: Models with either openai or gpt tags
                value:
                  tag_filters:
                    - operation: OR
                      tags:
                        - openai
                        - gpt
              combined_filter:
                summary: Combined filter
                description: Complex logic - (free AND recommend) OR (openai)
                value:
                  tag_filters:
                    - operation: AND
                      tags:
                        - free
                        - recommend
                    - operation: OR
                      tags:
                        - openai
      responses:
        '200':
          description: Available models matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelConfigList'
        '400':
          description: Invalid tag filter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_configuration:
    get:
      summary: Get complete LLM configuration
      description: Get complete LLM configuration including providers and models
      responses:
        '200':
          description: Complete LLM configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmConfigurationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers:
    post:
      summary: Create a new LLM provider
      description: Create a new LLM provider with optional API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderCreateWithApiKey'
      responses:
        '200':
          description: LLM provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}:
    get:
      summary: Get a specific LLM provider
      description: Get a specific LLM provider by name
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: LLM provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update an LLM provider
      description: Update an existing LLM provider with optional API key
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderUpdateWithApiKey'
      responses:
        '200':
          description: LLM provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete an LLM provider
      description: Delete an LLM provider (soft delete)
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: LLM provider deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}/models:
    get:
      summary: Get models for a specific provider
      description: Get all models for a specific provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: List of provider models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new model for a provider
      description: Create a new model for a specific provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderModelCreate'
      responses:
        '200':
          description: Model created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModel'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}/models/{api}/{model}:
    put:
      summary: Update a provider model
      description: Update a specific model of a provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
        - name: api
          in: path
          required: true
          schema:
            type: string
            enum:
              - completion
              - embedding
              - rerank
          description: API type
        - name: model
          in: path
          required: true
          schema:
            type: string
          description: Model name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderModelUpdate'
      responses:
        '200':
          description: Model updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModel'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a provider model
      description: Delete a specific model of a provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
        - name: api
          in: path
          required: true
          schema:
            type: string
            enum:
              - completion
              - embedding
              - rerank
          description: API type
        - name: model
          in: path
          required: true
          schema:
            type: string
          description: Model name
      responses:
        '200':
          description: Model deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_provider_models:
    get:
      summary: List all LLM provider models
      description: List all LLM provider models, optionally filtered by provider
      parameters:
        - name: provider_name
          in: query
          required: false
          schema:
            type: string
          description: Optional filter by provider name
      responses:
        '200':
          description: List of LLM provider models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /embeddings:
    post:
      summary: Create embeddings
      description: |
        Generate embeddings for the given input text(s) using the specified provider and model.
        This endpoint is compatible with OpenAI's embeddings API format, but includes an additional
        'provider' parameter to specify which LLM provider to use.

        The endpoint supports both single text inputs and batch processing of multiple texts.
        It requires the provider to be configured in the user's Model Service Provider (MSP) settings
        with a valid API key.
      tags:
        - LLM
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/embeddingRequest'
            examples:
              single_text:
                summary: Single text embedding
                description: Generate embedding for a single text input
                value:
                  provider: openai
                  model: text-embedding-3-small
                  input: The food was delicious and the waiter was very attentive.
              multiple_texts:
                summary: Batch text embeddings
                description: Generate embeddings for multiple text inputs
                value:
                  provider: openai
                  model: text-embedding-3-small
                  input:
                    - The food was delicious and the waiter was very attentive.
                    - I had a wonderful experience at this restaurant.
                    - The service was excellent and the ambiance was perfect.
              different_provider:
                summary: Using different provider
                description: Generate embeddings using a different provider
                value:
                  provider: anthropic
                  model: text-embedding-ada-002
                  input: This is a sample text for embedding generation.
      responses:
        '200':
          description: Successfully generated embeddings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/embeddingResponse'
              examples:
                single_result:
                  summary: Single embedding result
                  description: Response for single text input
                  value:
                    object: list
                    data:
                      - object: embedding
                        embedding:
                          - 0.0023064255
                          - -0.009327292
                          - 0.015797421
                          - -0.007654321
                        index: 0
                    model: text-embedding-3-small
                    usage:
                      prompt_tokens: 16
                      total_tokens: 16
                multiple_results:
                  summary: Multiple embedding results
                  description: Response for multiple text inputs
                  value:
                    object: list
                    data:
                      - object: embedding
                        embedding:
                          - 0.0023064255
                          - -0.009327292
                          - 0.015797421
                          - -0.007654321
                        index: 0
                      - object: embedding
                        embedding:
                          - 0.0012345678
                          - -0.0087654321
                          - 0.0199887766
                          - -0.003456789
                        index: 1
                    model: text-embedding-3-small
                    usage:
                      prompt_tokens: 32
                      total_tokens: 32
        '400':
          description: Bad request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_input:
                  summary: Empty input
                  description: Input cannot be empty
                  value:
                    success: false
                    message: Input cannot be empty
                invalid_provider:
                  summary: Provider not found
                  description: Specified provider is not configured for the user
                  value:
                    success: false
                    message: Provider 'invalid_provider' not found for user
                model_not_found:
                  summary: Model not found
                  description: Specified model not found for the provider
                  value:
                    success: false
                    message: Model 'invalid_model' not found for provider 'openai'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              example:
                success: false
                message: Authentication required
        '500':
          description: Internal server error - Embedding generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                embedding_error:
                  summary: Embedding generation failed
                  description: Error during embedding generation process
                  value:
                    success: false
                    message: 'Embedding generation failed: API rate limit exceeded'
                configuration_error:
                  summary: Configuration error
                  description: Provider configuration issue
                  value:
                    success: false
                    message: API key not configured for provider 'openai'
  /rerank:
    post:
      summary: Rerank documents
      description: |
        Rerank a list of documents based on their relevance to a given query using the specified 
        provider and model. This endpoint follows the industry-standard rerank API format used by
        providers like Cohere, Jina AI, and others.

        The endpoint supports both simple text lists and structured document objects with metadata.
        Documents are returned ordered by relevance score (highest first), with optional top_k 
        filtering to limit the number of results.

        The provider must be configured in the user's Model Service Provider (MSP) settings
        with a valid API key and support rerank functionality.
      tags:
        - LLM
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rerankRequest'
            examples:
              simple_text_list:
                summary: Simple text documents
                description: Rerank a list of text documents
                value:
                  provider: cohere
                  model: rerank-english-v3.0
                  query: What is the capital of France?
                  documents:
                    - Paris is the capital of France.
                    - London is the capital of England.
                    - Berlin is the capital of Germany.
                    - Madrid is the capital of Spain.
                  top_k: 3
                  return_documents: true
              structured_documents:
                summary: Documents with metadata
                description: Rerank documents with additional metadata
                value:
                  provider: jina_ai
                  model: jina-reranker-v1-base-en
                  query: artificial intelligence machine learning
                  documents:
                    - text: Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience.
                      metadata:
                        id: doc_1
                        source: encyclopedia
                        category: technology
                    - text: Natural language processing is a branch of AI that helps computers understand human language.
                      metadata:
                        id: doc_2
                        source: research_paper
                        category: nlp
                    - text: The weather today is sunny with a temperature of 25 degrees Celsius.
                      metadata:
                        id: doc_3
                        source: weather_report
                        category: weather
                  top_k: 2
                  return_documents: true
              different_provider:
                summary: Using different provider
                description: Rerank using a different provider and model
                value:
                  provider: huggingface
                  model: BAAI/bge-reranker-base
                  query: renewable energy sources
                  documents:
                    - Solar energy is a clean and renewable source of power.
                    - Coal is a non-renewable fossil fuel.
                    - Wind energy harnesses the power of wind to generate electricity.
                    - Nuclear energy provides a large amount of power from uranium.
                  top_k: 5
                  return_documents: false
      responses:
        '200':
          description: Successfully reranked documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rerankResponse'
              examples:
                simple_rerank_result:
                  summary: Simple rerank result
                  description: Response for simple text documents with full content
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.95
                        document:
                          text: Paris is the capital of France.
                      - index: 3
                        relevance_score: 0.12
                        document:
                          text: Madrid is the capital of Spain.
                      - index: 1
                        relevance_score: 0.08
                        document:
                          text: London is the capital of England.
                    model: rerank-english-v3.0
                    usage:
                      total_tokens: 156
                structured_rerank_result:
                  summary: Structured documents result
                  description: Response for documents with metadata
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.92
                        document:
                          text: Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience.
                          metadata:
                            id: doc_1
                            source: encyclopedia
                            category: technology
                      - index: 1
                        relevance_score: 0.87
                        document:
                          text: Natural language processing is a branch of AI that helps computers understand human language.
                          metadata:
                            id: doc_2
                            source: research_paper
                            category: nlp
                    model: jina-reranker-v1-base-en
                    usage:
                      total_tokens: 284
                score_only_result:
                  summary: Scores without documents
                  description: Response when return_documents=false
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.89
                      - index: 2
                        relevance_score: 0.76
                      - index: 3
                        relevance_score: 0.23
                    model: BAAI/bge-reranker-base
                    usage:
                      total_tokens: 198
        '400':
          description: Bad request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_query:
                  summary: Empty query
                  description: Query cannot be empty
                  value:
                    success: false
                    message: Query cannot be empty
                empty_documents:
                  summary: Empty documents
                  description: Documents list cannot be empty
                  value:
                    success: false
                    message: Documents list cannot be empty
                invalid_provider:
                  summary: Provider not found
                  description: Specified provider is not configured for the user
                  value:
                    success: false
                    message: Provider 'invalid_provider' not found for user
                model_not_found:
                  summary: Model not found
                  description: Specified model not found for the provider
                  value:
                    success: false
                    message: Model 'invalid_model' not found for provider 'cohere'
                too_many_documents:
                  summary: Too many documents
                  description: Document count exceeds provider limits
                  value:
                    success: false
                    message: 'Too many documents: 1500 exceeds maximum 1000 for model ''rerank-english-v3.0'''
                invalid_top_k:
                  summary: Invalid top_k value
                  description: top_k must be positive and not exceed document count
                  value:
                    success: false
                    message: top_k value 15 exceeds document count 10
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              example:
                success: false
                message: Authentication required
        '500':
          description: Internal server error - Rerank operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                rerank_error:
                  summary: Rerank operation failed
                  description: Error during rerank process
                  value:
                    success: false
                    message: 'Rerank operation failed: API rate limit exceeded'
                configuration_error:
                  summary: Configuration error
                  description: Provider configuration issue
                  value:
                    success: false
                    message: API key not configured for provider 'cohere'
  /config:
    get:
      summary: Get system configuration
      description: Get system configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /prompt-templates:
    get:
      summary: Get prompt templates
      description: Get prompt templates
      responses:
        '200':
          description: A list of prompt templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/promptTemplateList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /audit-logs:
    get:
      tags:
        - audit
      summary: List audit logs
      description: List audit logs with filtering options
      operationId: list_audit_logs
      parameters:
        - name: api_name
          in: query
          required: false
          schema:
            type: string
          description: Filter by API name
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by start date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by end date
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            maximum: 5000
            default: 1000
          description: Maximum number of records
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditLogList'
        '403':
          description: Admin access required
  /audit-logs/{audit_id}:
    get:
      tags:
        - audit
      summary: Get audit log detail
      description: Get a specific audit log by ID
      operationId: get_audit_log
      parameters:
        - name: audit_id
          in: path
          required: true
          schema:
            type: string
          description: Audit log ID
      responses:
        '200':
          description: Audit log retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditLog'
        '403':
          description: Admin access required
        '404':
          description: Audit log not found
  /invite:
    post:
      summary: Create an invitation
      description: Create a new invitation for a user to register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invitationCreate'
      responses:
        '200':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invitations:
    get:
      summary: Get all invitations
      description: Get all invitations
      responses:
        '200':
          description: Invitations fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitationList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /register:
    post:
      summary: Register a new user
      description: Register a new user with an invitation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /login:
    post:
      summary: Login a user
      description: Login a user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /logout:
    post:
      summary: Logout a user
      description: Logout a user
      responses:
        '200':
          description: Logout successful
  /users:
    get:
      summary: Get all users
      description: Get all users
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /user:
    get:
      summary: Get user info
      description: Get user info
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /change-password:
    post:
      summary: Change user password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: Password changed successfully
  /users/{user_id}:
    delete:
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    CookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
  schemas:
    bot:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    pageResult:
      description: PageResult info
      properties:
        page_number:
          type: integer
          description: The page number
        page_size:
          type: integer
          description: The page size
        count:
          type: integer
          description: The total count of items
      type: object
    botList:
      type: object
      description: A list of bots
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/bot'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    failResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        message:
          type: string
          description: Error message
          example: Invalid request
    botCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    botUpdate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
        config:
          type: string
        collection_ids:
          type: array
          items:
            type: string
    ExecutionConfig:
      type: object
      description: Configuration for workflow execution
      properties:
        timeout:
          type: integer
          description: Overall timeout in seconds
          example: 300
        retry:
          type: object
          properties:
            max_attempts:
              type: integer
              description: Maximum number of retry attempts
              example: 3
            delay:
              type: integer
              description: Delay between retries in seconds
              example: 5
        error_handling:
          type: object
          properties:
            strategy:
              type: string
              enum:
                - stop_on_error
                - continue_on_error
              description: Error handling strategy
              example: stop_on_error
            notification:
              type: object
              properties:
                email:
                  type: array
                  items:
                    type: string
                    format: email
                  example:
                    - admin@example.com
    SchemaDefinition:
      type: object
      description: JSON Schema definition
      properties:
        type:
          type: string
          enum:
            - object
            - array
            - string
            - number
            - integer
            - boolean
            - null
        properties:
          type: object
        required:
          type: array
          items:
            type: string
        additionalProperties:
          type: boolean
      additionalProperties: true
    Node:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          type: string
          description: Unique identifier for the node
          example: vector_search_3f8e2c1a
        ariaLabel:
          type: string
          description: label for the node
        type:
          type: string
          enum:
            - start
            - vector_search
            - fulltext_search
            - graph_search
            - merge
            - rerank
            - llm
          description: Type of node
          example: vector_search
        title:
          type: string
          description: Human-readable title of the node
          example: Vector Search
        data:
          type: object
          required:
            - input
            - output
          properties:
            input:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
                values:
                  type: object
                  description: Default values and template references
                  additionalProperties: true
            output:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
            collapsed:
              type: boolean
              description: Whether the node is collapsed, only useful for frontend to collapse the node
              example: false
        position:
          type: object
          description: Position of the node in the frontend
          properties:
            x:
              type: number
            'y':
              type: number
        dragHandle:
          type: string
          description: Drag handle of the node, only useful for frontend to drag the node
        measured:
          type: object
          description: Measured position of the node, only useful for frontend to measure the node
          properties:
            width:
              type: number
            height:
              type: number
        selected:
          type: boolean
          description: Whether the node is selected, only useful for frontend to select the node
        deletable:
          type: boolean
          description: Whether the node is deletable, only useful for frontend to delete the node
          example: true
    Edge:
      type: object
      required:
        - source
        - target
      properties:
        id:
          type: string
          description: Unique identifier for the edge, only useful for frontend to identify the edge
          example: edge_1
        deletable:
          type: boolean
          description: Whether the edge is deletable, only useful for frontend to delete the edge
          example: true
        type:
          type: string
          description: Type of the edge
          example: edge
        source:
          type: string
          description: ID of the source node
          example: start
        target:
          type: string
          description: ID of the target node
          example: vector_search_3f8e2c1a
    WorkflowStyle:
      type: object
      description: Workflow style
      properties:
        edgeType:
          type: string
          enum:
            - straight
            - step
            - smoothstep
            - default
            - simplebezier
        layoutDirection:
          type: string
          enum:
            - TB
            - LR
    WorkflowDefinition:
      type: object
      required:
        - name
        - title
        - version
        - nodes
        - edges
      properties:
        name:
          type: string
          description: Machine-readable identifier for the workflow
          example: rag_flow
        title:
          type: string
          description: Human-readable title of the workflow
          example: RAG Knowledge Base Flow
        description:
          type: string
          description: Detailed description of the workflow
          example: A typical RAG flow with parallel retrieval and reranking
        version:
          type: string
          description: Version number of the workflow definition
          example: 1.0.0
        execution:
          $ref: '#/components/schemas/ExecutionConfig'
        schema:
          type: object
          description: Custom schema definitions used across the workflow
          additionalProperties:
            $ref: '#/components/schemas/SchemaDefinition'
        nodes:
          type: array
          description: List of nodes in the workflow
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: List of edges connecting nodes in the workflow
          items:
            $ref: '#/components/schemas/Edge'
        style:
          $ref: '#/components/schemas/WorkflowStyle'
    debugFlowRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query
    chat:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatList:
      type: object
      description: A list of chats
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/chat'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    chatCreate:
      type: object
      properties:
        title:
          type: string
    reference:
      type: object
      properties:
        score:
          type: number
        text:
          type: string
        metadata:
          type: object
    feedback:
      type: object
      properties:
        type:
          type: string
          enum:
            - good
            - bad
        tag:
          type: string
          enum:
            - Harmful
            - Unsafe
            - Fake
            - Unhelpful
            - Other
        message:
          type: string
    chatMessage:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - welcome
            - message
            - start
            - stop
            - error
        timestamp:
          type: number
        role:
          type: string
          enum:
            - human
            - ai
        data:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
        urls:
          type: array
          items:
            type: string
        feedback:
          $ref: '#/components/schemas/feedback'
    chatDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        history:
          type: array
          items:
            $ref: '#/components/schemas/chatMessage'
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatUpdate:
      type: object
      properties:
        title:
          type: string
    crontabConfig:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to enable scheduled tasks
        minute:
          type: string
          description: Minute field in cron expression
          example: '0'
        hour:
          type: string
          description: Hour field in cron expression
          example: '0'
        day_of_month:
          type: string
          description: Day of month field in cron expression
          example: '*'
        month:
          type: string
          description: Month field in cron expression
          example: '*'
        day_of_week:
          type: string
          description: Day of week field in cron expression
          example: '*'
    modelSpec:
      type: object
      properties:
        model:
          type: string
          description: The name of the language model to use
          example: gpt-4o-mini
        model_service_provider:
          type: string
          description: Used for querying auth information (api_key/api_base/...) for a model service provider.
          example: openai
        custom_llm_provider:
          type: string
          description: Used for Non-OpenAI LLMs (e.g. 'bedrock' for amazon.titan-tg1-large)
          example: openai
        temperature:
          type: number
          description: Controls randomness in the output. Values between 0 and 2. Lower values make output more focused and deterministic
          minimum: 0
          maximum: 2
          example: 0.1
          default: 0.1
        max_tokens:
          type: integer
          description: Maximum number of tokens to generate
          minimum: 1
          example: 4096
        max_completion_tokens:
          type: integer
          description: Upper bound for generated completion tokens, including visible and reasoning tokens
          minimum: 1
          example: 4096
        timeout:
          type: integer
          description: Maximum execution time in seconds for the API request
          minimum: 1
        top_n:
          type: integer
          description: Number of top results to return when reranking documents
          minimum: 1
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          example:
            - free
            - recommend
          default: []
    collectionConfig:
      type: object
      properties:
        source:
          type: string
          description: Source system identifier
          example: system
        crontab:
          $ref: '#/components/schemas/crontabConfig'
        enable_knowledge_graph:
          type: boolean
          description: Whether to enable knowledge graph
        embedding:
          $ref: '#/components/schemas/modelSpec'
        completion:
          $ref: '#/components/schemas/modelSpec'
        path:
          type: string
          description: Path for local and ftp sources
          deprecated: true
        host:
          type: string
          description: FTP host
          deprecated: true
        username:
          type: string
          description: FTP username
          deprecated: true
        password:
          type: string
          description: FTP password
          deprecated: true
        region:
          type: string
          description: Region for S3/OSS
          deprecated: true
        access_key_id:
          type: string
          description: Access key ID for S3/OSS
          deprecated: true
        secret_access_key:
          type: string
          description: Secret access key for S3/OSS
          deprecated: true
        bucket:
          type: string
          description: Bucket name for S3/OSS
          deprecated: true
        dir:
          type: string
          description: Directory path in bucket for S3/OSS
          deprecated: true
        email_source:
          type: object
          description: Email source configuration
          deprecated: true
        pop_server:
          type: string
          description: POP3 server address
          deprecated: true
        port:
          type: string
          description: Email server port
          deprecated: true
        email_address:
          type: string
          description: Email address
          deprecated: true
        email_password:
          type: string
          description: Email password
          deprecated: true
        app_id:
          type: string
          description: Feishu app ID
          deprecated: true
        app_secret:
          type: string
          description: Feishu app secret
          deprecated: true
        space_id:
          type: string
          description: Feishu space ID
          deprecated: true
    collectionSource:
      type: object
      properties:
        category:
          type: string
          enum:
            - upload
            - tencent
            - oss
            - local
            - s3
            - ftp
            - email
            - url
            - github
        upload:
          type: object
        local:
          type: object
          properties:
            path:
              type: string
        oss:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
                properties:
                  bucket:
                    type: string
                  dir:
                    type: string
            bucket:
              type: string
            endpoint:
              type: string
            region:
              type: string
            dir:
              type: string
        s3:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
            bucket:
              type: string
            region:
              type: string
            dir:
              type: string
        ftp:
          type: object
          properties:
            path:
              type: string
            host:
              type: string
            port:
              type: number
            username:
              type: string
        email:
          type: object
          properties:
            pop_server:
              type: string
            port:
              type: number
            email_address:
              type: string
            email_password:
              type: string
            detect_spam:
              type: boolean
        url:
          type: object
          properties:
            url:
              type: string
            name:
              type: string
        feishu:
          type: object
          properties:
            app_id:
              type: string
            app_secret:
              type: string
            space_id:
              type: string
            node_id:
              type: string
            method:
              type: string
            target_format:
              type: string
    collection:
      description: Collection is a collection of documents
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    collectionList:
      type: object
      description: A list of collections
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/collection'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    collectionCreate:
      type: object
      properties:
        title:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        type:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
    collectionUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
    document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - DELETING
            - DELETED
            - WARNING
        vector_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        fulltext_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        graph_index_status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - SKIPPED
        config:
          type: string
        size:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    documentList:
      type: object
      description: A list of documents
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/document'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    documentCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
        collection_id:
          type: string
    documentUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
    vectorSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        similarity:
          type: number
          description: Similarity threshold
          minimum: 0
          maximum: 1
    fulltextSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
    graphSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
    searchResultItem:
      type: object
      properties:
        rank:
          type: integer
          description: Result rank
        score:
          type: number
          description: Result score
        content:
          type: string
          description: Result content
        source:
          type: string
          description: Source document or metadata
        recall_type:
          type: string
          description: Recall type
          enum:
            - vector_search
            - graph_search
            - fulltext_search
    searchResult:
      type: object
      properties:
        id:
          type: string
          description: The id of the search result
        query:
          type: string
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchResultItem'
        created:
          type: string
          format: date-time
          description: The creation time of the search result
    searchResultList:
      type: object
      description: A list of search results
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchResult'
    searchRequest:
      type: object
      description: Search request
      properties:
        query:
          type: string
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
    apiKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
    apiKeyList:
      type: object
      description: A list of API keys
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiKey'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    apiKeyCreate:
      type: object
      properties:
        description:
          type: string
    apiKeyUpdate:
      type: object
      properties:
        description:
          type: string
    tagFilterCondition:
      type: object
      properties:
        operation:
          type: string
          enum:
            - AND
            - OR
          description: Logical operation for tags in this condition
          example: AND
        tags:
          type: array
          items:
            type: string
          description: List of tags for this condition
          example:
            - free
            - recommend
      required:
        - operation
        - tags
    tagFilterRequest:
      type: object
      properties:
        tag_filters:
          type: array
          items:
            $ref: '#/components/schemas/tagFilterCondition'
          description: List of tag filter conditions (OR relationship between conditions). If not provided or empty, returns models with "recommend" tag by default.
          example:
            - operation: AND
              tags:
                - free
                - recommend
            - operation: OR
              tags:
                - openai
                - gpt
      description: Tag filtering request. Empty request body or empty tag_filters returns recommend models by default.
    modelConfig:
      type: object
      properties:
        name:
          type: string
        completion_dialect:
          type: string
        embedding_dialect:
          type: string
        rerank_dialect:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
        embedding:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
        completion:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
        rerank:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
    modelConfigList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/modelConfig'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    llmProvider:
      type: object
      properties:
        name:
          type: string
          description: Unique provider name identifier
          example: openai
        label:
          type: string
          description: Human-readable provider display name
          example: OpenAI
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
          example: openai
          default: openai
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
          example: openai
          default: openai
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
          example: jina_ai
          default: jina_ai
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
          default: false
        base_url:
          type: string
          description: Default API base URL for this provider
          example: https://api.openai.com/v1
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: API key for this provider (if configured by user)
        created:
          type: string
          format: date-time
          description: Creation timestamp
        updated:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - name
        - label
        - base_url
    llmProviderModel:
      type: object
      properties:
        provider_name:
          type: string
          description: Reference to LLMProvider.name
          example: openai
        api:
          type: string
          enum:
            - completion
            - embedding
            - rerank
          description: API type for this model
          example: completion
        model:
          type: string
          description: Model name/identifier
          example: gpt-4o-mini
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
          example: openai
        max_tokens:
          type: integer
          description: Maximum tokens for this model
          example: 4096
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          example:
            - free
            - recommend
          default: []
        created:
          type: string
          format: date-time
          description: Creation timestamp
        updated:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - provider_name
        - api
        - model
        - custom_llm_provider
    llmConfigurationResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/llmProvider'
          description: List of LLM providers
          default: []
        models:
          type: array
          items:
            $ref: '#/components/schemas/llmProviderModel'
          description: List of LLM provider models
          default: []
      required:
        - providers
        - models
    llmProviderCreateWithApiKey:
      type: object
      properties:
        name:
          type: string
          description: Unique provider name identifier (auto-generated if not provided)
        label:
          type: string
          description: Human-readable provider display name
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
          default: openai
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
          default: openai
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
          default: jina_ai
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
          default: false
        base_url:
          type: string
          description: Default API base URL for this provider
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: Optional API key for this provider
      required:
        - label
        - base_url
    llmProviderUpdateWithApiKey:
      type: object
      properties:
        label:
          type: string
          description: Human-readable provider display name
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
        base_url:
          type: string
          description: Default API base URL for this provider
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: Optional API key for this provider
    llmProviderModelList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/llmProviderModel'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    llmProviderModelCreate:
      type: object
      properties:
        provider_name:
          type: string
          description: Reference to LLMProvider.name
        api:
          type: string
          enum:
            - completion
            - embedding
            - rerank
          description: API type for this model
        model:
          type: string
          description: Model name/identifier
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
        max_tokens:
          type: integer
          description: Maximum tokens for this model
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          default: []
      required:
        - provider_name
        - api
        - model
        - custom_llm_provider
    llmProviderModelUpdate:
      type: object
      properties:
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
        max_tokens:
          type: integer
          description: Maximum tokens for this model
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
    embeddingRequest:
      type: object
      description: Request to generate embeddings for text inputs
      properties:
        provider:
          type: string
          description: LLM provider name (e.g., openai, anthropic)
          example: openai
        model:
          type: string
          description: Model name for embedding generation
          example: text-embedding-3-small
        input:
          oneOf:
            - type: string
              description: Single text input to embed
              example: The food was delicious and the waiter was very attentive.
            - type: array
              description: List of text inputs to embed
              items:
                type: string
              example:
                - The food was delicious and the waiter was very attentive.
                - I had a wonderful experience at this restaurant.
      required:
        - provider
        - model
        - input
    embeddingData:
      type: object
      description: Individual embedding result
      properties:
        object:
          type: string
          description: Object type identifier
          example: embedding
          default: embedding
        embedding:
          type: array
          description: The embedding vector as a list of floats
          items:
            type: number
            format: float
          example:
            - 0.0023064255
            - -0.009327292
            - 0.015797421
            - 0.0012345678
        index:
          type: integer
          description: Index of the input text corresponding to this embedding
          example: 0
      required:
        - object
        - embedding
        - index
    embeddingUsage:
      type: object
      description: Token usage information for the embedding request
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the input text(s)
          example: 16
        total_tokens:
          type: integer
          description: Total number of tokens used (same as prompt_tokens for embeddings)
          example: 16
      required:
        - prompt_tokens
        - total_tokens
    embeddingResponse:
      type: object
      description: Response containing generated embeddings in OpenAI-compatible format
      properties:
        object:
          type: string
          description: Object type identifier
          example: list
          default: list
        data:
          type: array
          description: List of embedding results
          items:
            $ref: '#/components/schemas/embeddingData'
        model:
          type: string
          description: Model used for embedding generation
          example: text-embedding-3-small
        usage:
          $ref: '#/components/schemas/embeddingUsage'
      required:
        - object
        - data
        - model
        - usage
    rerankRequest:
      type: object
      description: Request to rerank documents based on query relevance
      properties:
        provider:
          type: string
          description: LLM provider name (e.g., cohere, jina_ai)
          example: cohere
        model:
          type: string
          description: Model name for reranking
          example: rerank-english-v3.0
        query:
          type: string
          description: Search query to rank documents against
          example: What is the capital of France?
        documents:
          oneOf:
            - type: array
              description: List of text documents to rerank
              items:
                type: string
              example:
                - Paris is the capital of France.
                - London is the capital of England.
                - Berlin is the capital of Germany.
            - type: array
              description: List of document objects with text and optional metadata
              items:
                type: object
                properties:
                  text:
                    type: string
                    description: Document text content
                    example: Paris is the capital of France.
                  metadata:
                    type: object
                    description: Optional document metadata
                    additionalProperties: true
                    example:
                      id: doc_123
                      source: wikipedia
                required:
                  - text
              example:
                - text: Paris is the capital of France.
                  metadata:
                    id: doc_1
                    source: wikipedia
                - text: London is the capital of England.
                  metadata:
                    id: doc_2
                    source: encyclopedia
        top_k:
          type: integer
          description: Maximum number of top-ranked documents to return
          minimum: 1
          maximum: 1000
          default: 10
          example: 3
        return_documents:
          type: boolean
          description: Whether to return document content in response
          default: true
          example: true
      required:
        - provider
        - model
        - query
        - documents
    rerankDocument:
      type: object
      description: Individual reranked document result
      properties:
        index:
          type: integer
          description: Original index of the document in the input array
          example: 0
        relevance_score:
          type: number
          format: float
          description: Relevance score between 0 and 1 (higher is more relevant)
          minimum: 0
          maximum: 1
          example: 0.95
        document:
          type: object
          description: Document content and metadata (only present if return_documents=true)
          properties:
            text:
              type: string
              description: Document text content
              example: Paris is the capital of France.
            metadata:
              type: object
              description: Document metadata if provided in the request
              additionalProperties: true
              example:
                id: doc_123
                source: wikipedia
          required:
            - text
      required:
        - index
        - relevance_score
    rerankUsage:
      type: object
      description: Token usage information for the rerank request
      properties:
        total_tokens:
          type: integer
          description: Total number of tokens processed (query + all documents)
          example: 156
      required:
        - total_tokens
    rerankResponse:
      type: object
      description: Response containing reranked documents in industry-standard format
      properties:
        object:
          type: string
          description: Object type identifier
          example: list
          default: list
        data:
          type: array
          description: List of reranked documents ordered by relevance (highest first)
          items:
            $ref: '#/components/schemas/rerankDocument'
        model:
          type: string
          description: Model used for reranking
          example: rerank-english-v3.0
        usage:
          $ref: '#/components/schemas/rerankUsage'
      required:
        - object
        - data
        - model
        - usage
    config:
      type: object
      properties:
        admin_user_exists:
          type: boolean
          description: Whether the admin user exists
        auth:
          type: object
          properties:
            type:
              type: string
              enum:
                - none
                - auth0
                - authing
                - logto
                - cookie
            auth0:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            authing:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            logto:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
    promptTemplate:
      type: object
      properties:
        name:
          type: string
        prompt:
          type: string
        description:
          type: string
    promptTemplateList:
      type: object
      description: A list of prompt templates
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/promptTemplate'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    auditLog:
      type: object
      description: Audit log entry
      properties:
        id:
          type: string
          description: Audit log ID
        user_id:
          type: string
          nullable: true
          description: User ID who performed the action
        username:
          type: string
          nullable: true
          description: Username for display
        resource_type:
          type: string
          enum:
            - collection
            - document
            - bot
            - chat
            - message
            - api_key
            - llm_provider
            - llm_provider_model
            - model_service_provider
            - user
            - flow
            - search_test
          nullable: true
          description: Type of resource
        resource_id:
          type: string
          nullable: true
          description: ID of the resource (extracted at query time)
        api_name:
          type: string
          description: API operation name
        http_method:
          type: string
          description: HTTP method (POST, PUT, DELETE)
        path:
          type: string
          description: API path
        status_code:
          type: integer
          nullable: true
          description: HTTP status code
        start_time:
          type: integer
          format: int64
          description: Request start time (milliseconds since epoch)
        end_time:
          type: integer
          format: int64
          nullable: true
          description: Request end time (milliseconds since epoch)
        duration_ms:
          type: integer
          nullable: true
          description: Request duration in milliseconds (calculated)
        request_data:
          type: string
          nullable: true
          description: Request data (JSON string)
        response_data:
          type: string
          nullable: true
          description: Response data (JSON string)
        error_message:
          type: string
          nullable: true
          description: Error message if failed
        ip_address:
          type: string
          nullable: true
          description: Client IP address
        user_agent:
          type: string
          nullable: true
          description: User agent string
        request_id:
          type: string
          description: Request ID for tracking
        created:
          type: string
          format: date-time
          description: Created timestamp
    auditLogList:
      type: object
      description: List of audit logs
      properties:
        items:
          type: array
          description: Audit log entries
          items:
            $ref: '#/components/schemas/auditLog'
    invitationCreate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
    invitation:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        token:
          type: string
          description: The token of the invitation
        created_by:
          type: string
          description: The ID of the user who created the invitation
        created_at:
          type: string
          description: The date and time the invitation was created
        is_valid:
          type: boolean
          description: Whether the invitation is valid
        used_at:
          type: string
          description: The date and time the invitation was used
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
        expires_at:
          type: string
          description: The date and time the invitation will expire
    invitationList:
      type: object
      description: A list of invitations
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/invitation'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    register:
      type: object
      description: The email of the user
      properties:
        token:
          type: string
          description: The invitation token
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    user:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user
        is_active:
          type: boolean
          description: Whether the user is active
        date_joined:
          type: string
          description: The date and time the user joined the system
    login:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    userList:
      type: object
      description: A list of users
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    changePassword:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        old_password:
          type: string
          description: The old password of the user
        new_password:
          type: string
          description: The new password of the user
