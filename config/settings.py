# Copyright 2025 ApeCloud, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import json
import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
env_file = os.path.join(BASE_DIR, ".env")
if os.path.exists(env_file):
    env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-!_e+#j5vn=jg9fd(i#3jn0-eypw-62om4^gn*s$xq7(%4w-w@t"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "aperag",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware"
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {"default": env.db("DATABASE_URL", default=f"sqlite:///{BASE_DIR}/db.sqlite3")}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

MEDIA_ROOT = env.str("MEDIA_ROOT", ".")

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS
CORS_ALLOWED_ORIGINS = [
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://\w+\.kubeblocks\.io$",
    r"http://localhost:*",
    # TODO reconsider this
    r"http://*:*",
    r"https://*:*",
]

# CSRF
CSRF_TRUSTED_ORIGINS = ["https://*.kubeblocks.io", "https://*.apecloud.com"]

SESSION_COOKIE_NAME = env.str("SESSION_COOKIE_NAME", default="sessionid")

# Auth
AUTH_TYPE = env.str("AUTH_TYPE", default="none")

# Load Auth0 application settings into memory
AUTH0_DOMAIN = env.str("AUTH0_DOMAIN", default="aperag-dev.auting.cn")
AUTH0_CLIENT_ID = env.str("AUTH0_CLIENT_ID", default="")

# Load Authing application settings into memory
AUTHING_DOMAIN = env.str("AUTHING_DOMAIN", default="aperag.authing.cn")
AUTHING_APP_ID = env.str("AUTHING_APP_ID", default="")

# Load Logto application settings into memory
LOGTO_DOMAIN = env.str("LOGTO_DOMAIN", default="aperag.authing.cn")
LOGTO_APP_ID = env.str("LOGTO_APP_ID", default="")

# Celery
# ------------------------------------------------------------------------------
if USE_TZ:
    # https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-broker_url
# CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://redis:6379/0")
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/0")
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_backend
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-extended
CELERY_RESULT_EXTENDED = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-always-retry
# https://github.com/celery/celery/pull/6122
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-max-retries
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-time-limit
# TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_TIME_LIMIT = 5 * 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-soft-time-limit
# TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_SOFT_TIME_LIMIT = 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#beat-scheduler
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#worker-send-task-events
CELERY_WORKER_SEND_TASK_EVENTS = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std-setting-task_send_sent_event
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_TASK_TRACK_STARTED = True
INSTALLED_APPS += ["django_celery_beat"]

LOCAL_QUEUE_NAME = env.str("LOCAL_QUEUE_NAME", default="")

# WebSockets
INSTALLED_APPS += ["channels"]

ASGI_APPLICATION = "config.asgi.application"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "LiteLLM": {
            "handlers": ["console"],
            "level": env.str("LITELLM_LOG_LEVEL", default="WARNING"),  # Read from environment variable
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": env.str("DJANGO_LOG_LEVEL", default="INFO"),
    },
}

EMBEDDING_MAX_CHUNKS_IN_BATCH = env.int("EMBEDDING_MAX_CHUNKS_IN_BATCH", default=16)

# Memory backend
MEMORY_REDIS_URL = env.str("MEMORY_REDIS_URL", default="redis://127.0.0.1:6379/1")

VECTOR_DB_TYPE = env.str("VECTOR_DB_TYPE", default="qdrant")
VECTOR_DB_CONTEXT = env.str(
    "VECTOR_DB_CONTEXT", '{"url":"http://localhost", "port":6333, "distance":"Cosine"}'
)

OBJECT_STORE_TYPE = env.str("OBJECT_STORE_TYPE", default="local")
OBJECT_STORE_LOCAL_CONFIG = None
OBJECT_STORE_S3_CONFIG = None
match OBJECT_STORE_TYPE:
    case "local":
        OBJECT_STORE_LOCAL_CONFIG = {
            "root_dir": env.str("OBJECT_STORE_LOCAL_ROOT_DIR", default=".objects"),
        }
    case "s3":
        OBJECT_STORE_S3_CONFIG = {
            "endpoint": env.str("OBJECT_STORE_S3_ENDPOINT", default="http://127.0.0.1:9000"),
            "access_key": env.str("OBJECT_STORE_S3_ACCESS_KEY", default="minioadmin"),
            "secret_key": env.str("OBJECT_STORE_S3_SECRET_KEY", default="minioadmin"),
            "bucket": env.str("OBJECT_STORE_S3_BUCKET", default="aperag"),
            "region": env.str("OBJECT_STORE_S3_REGION", default=None),
            "prefix_path": env.str("OBJECT_STORE_S3_PREFIX_PATH", default=None),
            "use_path_style": env.bool("OBJECT_STORE_S3_USE_PATH_STYLE", default=True),
        }
    case _:
        raise ValueError(
            f"Unsupported OBJECT_STORE_TYPE: {OBJECT_STORE_TYPE}. Supported types are: local, s3."
        )

# prometheus
INSTALLED_APPS += ["django_prometheus"]

STATIC_ROOT = BASE_DIR / "static"

# feishu app used for auth
FEISHU_APP_ID = env.str("FEISHU_APP_ID", default="")
FEISHU_APP_SECRET = env.str("FEISHU_APP_SECRET", default="")
FEISHU_ENCRYPT_KEY = env.str("FEISHU_ENCRYPT_KEY", default="")

MAX_BOT_COUNT = env.int("MAX_BOT_COUNT", default=10)
MAX_COLLECTION_COUNT = env.int("MAX_COLLECTION_COUNT", default=50)
MAX_DOCUMENT_COUNT = env.int("MAX_DOCUMENT_COUNT", default=1000)
MAX_DOCUMENT_SIZE = env.int('MAX_DOCUMENT_SIZE', default=100 * 1024 * 1024)
MAX_CONVERSATION_COUNT = env.int("MAX_CONVERSATION_COUNT", default=100)

RETRIEVE_MODE = "classic" # todo delete me

# Chunking Settings
CHUNK_SIZE = env.int("CHUNK_SIZE", default=400)
CHUNK_OVERLAP_SIZE = env.int("CHUNK_OVERLAP_SIZE", default=20)

REDIS_HOST = env.str("REDIS_HOST", default="localhost")
REDIS_PORT = env.str("REDIS_PORT", default="6379")
REDIS_USERNAME = env.str("REDIS_USERNAME", default="")
REDIS_PASSWORD = env.str("REDIS_PASSWORD", default="")

ENABLE_FULLTEXT_SEARCH = env.bool("ENABLE_FULLTEXT_SEARCH", default=True)
ES_HOST = env.str("ES_HOST", "http://localhost:9200")

QIANFAN_API_KEY = env.str("QIANFAN_API_KEY", default="")
QIANFAN_SECRET_KEY = env.str("QIANFAN_SECRET_KEY", default="")

WHISPER_HOST = env.str("WHISPER_HOST", default="")
PADDLEOCR_HOST = env.str("PADDLEOCR_HOST", default="")
DOCRAY_HOST = env.str("DOCRAY_HOST", default="")

ADMIN_USER = env.str("ADMIN_USER", default="aperag")
ADMIN_TOKEN = env.str("ADMIN_TOKEN", default="")

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env.str('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env.str('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', default='noreply@aperag.com')
SITE_URL = env.str('SITE_URL', default='http://localhost:8000')

REGISTER_MODE = env.str('REGISTER_MODE', default='unlimited')
