{
  "definitions": {
    "orgList": {
      "description": "OrgList is a list of Orgs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of Org objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "org": {
      "description": "Org info",
      "type": "object",
      "required": [
        "createdAt",
        "updatedAt",
        "name"
      ],
      "properties": {
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "description": "The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "nodeList": {
      "description": "nodeList is a list of nodes",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of Org objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/node"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "node": {
      "description": "node info",
      "type": "object",
      "required": [
        "createdAt",
        "hostName",
        "ip"
      ],
      "properties": {
        "hostName": {
          "description": "Host name of the node",
          "type": "string"
        },
        "ip": {
          "description": "IP address of the node",
          "type": "string"
        },
        "cpu": {
          "description": "CPU cores of the node",
          "type": "integer",
          "format": "int64"
        },
        "memory": {
          "description": "Memory of the node, unit is GiB",
          "type": "integer",
          "format": "int64"
        },
        "cpuStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "memoryStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "zone": {
          "description": "Zone of the node",
          "type": "string"
        },
        "instanceType": {
          "description": "Instance type of the node",
          "type": "string"
        },
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "resourceStats": {
      "description": "ResourceStats holds the requests, limits, and available stats for a resource.",
      "type": "object",
      "required": [
        "requests",
        "limits",
        "allocatable",
        "usage"
      ],
      "properties": {
        "requests": {
          "type": "number",
          "format": "double",
          "description": "The number of CPU or Memory resources requested by pods running on the node. Unit is GiB for memory and Cores for CPU."
        },
        "limits": {
          "type": "number",
          "format": "double",
          "description": "The maximum number of CPU or Memory resources pods are allowed to use on the node.  Unit is GiB for memory and Cores for CPU"
        },
        "allocatable": {
          "type": "number",
          "format": "double",
          "description": "The amount of CPU or Memory resources that are available on the node. Unit is GiB for memory and Cores for CPU."
        },
        "usage": {
          "type": "number",
          "format": "double",
          "description": "The amount of CPU or Memory resources that are already used on the node. Unit is GiB for memory and Cores for CPU."
        }
      }
    },
    "storageStats": {
      "description": "StorageStats holds the resource stats of the volume, such as provisioned capacity, etc.",
      "type": "object",
      "required": [
        "provisionedCapacity"
      ],
      "properties": {
        "provisionedCapacity": {
          "description": "ProvisionedCapacity is the actual size of the volumes that is bound to the PVC, unit is GiB",
          "type": "number",
          "format": "double"
        }
      }
    },
    "environmentResourceStats": {
      "description": "EnvironmentResourceStats holds the cpuStats for a environment.",
      "type": "object",
      "required": [
        "name",
        "cpuStats",
        "memoryStats",
        "storageStats"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment.",
          "type": "string"
        },
        "cpuStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "memoryStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "storageStats": {
          "$ref": "#/definitions/storageStats"
        }
      }
    },
    "envState": {
      "description": "EnvironmentStatus holds status info for registered environment",
      "type": "object",
      "required": [
        "environmentID",
        "status"
      ],
      "properties": {
        "environmentID": {
          "description": "ID of the environment",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/contextState"
        }
      }
    },
    "envStateList": {
      "description": "EnvironmentStatusList status info for all of the registered environments",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Name of the environment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/envState"
          }
        }
      }
    },
    "nodeResourceStats": {
      "description": "ResourceStats holds the requests, limits, and available stats for a resource.",
      "type": "object",
      "required": [
        "name",
        "cpuStats",
        "memoryStats"
      ],
      "properties": {
        "name": {
          "description": "Name of the node.",
          "type": "string"
        },
        "cpuStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "memoryStats": {
          "$ref": "#/definitions/resourceStats"
        }
      }
    },
    "nodeResourceStatsList": {
      "description": "NodeResourceStatsList is a list of NodeResourceStats",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of NodeResourceStats objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodeResourceStats"
          }
        }
      }
    },
    "instanceResourceStats": {
      "description": "InstanceResourceStats holds the requests, limits, and available stats for a instance.",
      "type": "object",
      "required": [
        "name",
        "cpuStats",
        "memoryStats"
      ],
      "properties": {
        "name": {
          "description": "Name of the instance.",
          "type": "string"
        },
        "type": {
          "description": "Type of the instance, choose cluster or system",
          "type": "string",
          "enum": [
            "cluster",
            "system"
          ]
        },
        "cpuStats": {
          "$ref": "#/definitions/resourceStats"
        },
        "memoryStats": {
          "$ref": "#/definitions/resourceStats"
        }
      }
    },
    "instanceResourceStatsList": {
      "description": "InstanceResourceStatsList is a list of InstanceResourceStats",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of InstanceResourceStats objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceResourceStats"
          }
        }
      }
    },
    "orgCreate": {
      "description": "OrgCreate is the payload for organization creation",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "name": {
          "description": "The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        }
      }
    },
    "memberAdd": {
      "description": "MemberAdd is the payload for adding organization member",
      "type": "object",
      "required": [
        "roleName"
      ],
      "properties": {
        "roleName": {
          "description": "The name of the role in the organization",
          "type": "string"
        }
      }
    },
    "orgUpdate": {
      "description": "Organization update",
      "properties": {
        "displayName": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionList": {
      "type": "object",
      "description": "A list of permissions.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "description": "The list of Permission objects.",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the permission."
        },
        "name": {
          "type": "string",
          "description": "The name of the permission."
        },
        "base_url": {
          "type": "string",
          "description": "The base URL for the permission."
        },
        "description": {
          "type": "string",
          "description": "The description of the permission."
        },
        "resource_actions": {
          "type": "object",
          "description": "The resource actions for the permission.",
          "properties": {}
        },
        "deleted_at": {
          "type": "string",
          "description": "The timestamp for when the permission was deleted."
        }
      },
      "required": [
        "id",
        "name",
        "base_url",
        "resource_actions"
      ]
    },
    "orgMemberList": {
      "description": "OrgMemberList is org member list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of OrgMember objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/orgMember"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "orgMember": {
      "description": "Org Member info",
      "type": "object",
      "required": [
        "userId",
        "role",
        "email"
      ],
      "properties": {
        "displayName": {
          "description": "The display name of User. Read-Only",
          "type": "string"
        },
        "email": {
          "description": "The email of User. Required when create. Read-Only after create",
          "type": "string"
        },
        "role": {
          "description": "The role of the User in the Org. Required",
          "type": "string",
          "enum": [
            "admin",
            "developer"
          ]
        },
        "userId": {
          "description": "The ID of User. Read-Only",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "orgMemberUpdate": {
      "description": "Org Member update",
      "properties": {
        "role": {
          "description": "The role of the User in the Org. Required",
          "type": "string",
          "enum": [
            "admin",
            "developer"
          ]
        }
      },
      "required": [
        "role"
      ],
      "type": "object"
    },
    "invitationList": {
      "description": "InvitationList is a list of invitations",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of Invitation objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/invitation"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "invitation": {
      "description": "Invitation info",
      "type": "object",
      "required": [
        "id",
        "accepted",
        "email",
        "expireTime",
        "lastEmailTime",
        "orgName",
        "roleName",
        "token"
      ],
      "properties": {
        "accepted": {
          "description": "User has accepted or not",
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "description": "The email of the invitee",
          "type": "string"
        },
        "expireTime": {
          "description": "Expire time of this invitation",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID for the invitation",
          "type": "string",
          "format": "uint64"
        },
        "lastEmailTime": {
          "description": "Last email send time",
          "type": "string",
          "format": "date-time"
        },
        "orgName": {
          "description": "The name of the organization, for output only",
          "type": "string"
        },
        "roleName": {
          "description": "The name of the role",
          "type": "string"
        },
        "sender": {
          "$ref": "#/definitions/invitationSender"
        },
        "token": {
          "description": "[internal, not for caller display] token of invitation, base64 encoded string including invitation and org ID",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "invitationCreate": {
      "description": "Invitation create payload",
      "type": "object",
      "required": [
        "email",
        "orgName",
        "roleName"
      ],
      "properties": {
        "email": {
          "description": "The email of the invitee",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the organization, for output only",
          "type": "string"
        },
        "roleName": {
          "description": "The name of the role",
          "type": "string"
        }
      }
    },
    "invitationSender": {
      "description": "InvitationSender is the User who send the Invitation",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email of the User",
          "type": "string"
        },
        "id": {
          "description": "The ID of the User",
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "description": "The name of the User",
          "type": "string"
        }
      }
    },
    "accessreview": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "resourceURI": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "useShell": {
          "type": "boolean"
        }
      },
      "required": [
        "method",
        "orgName",
        "resourceURI",
        "token",
        "useShell"
      ]
    },
    "accessreviewResp": {
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "allowed"
      ]
    },
    "phoneNumber": {
      "type": "string",
      "pattern": "\\+\\d{1,3}\\d{11}",
      "description": "The phonenumber for the user.",
      "example": "+8618912345678"
    },
    "user": {
      "description": "User info",
      "required": [
        "createdAt",
        "updatedAt",
        "id",
        "email"
      ],
      "properties": {
        "id": {
          "description": "The ID for the user",
          "type": "string"
        },
        "email": {
          "description": "The email for the user",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the user",
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/phoneNumber"
        },
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "userCreate": {
      "description": "User create",
      "type": "object",
      "required": [
        "id",
        "email",
        "idProvider",
        "externalId"
      ],
      "properties": {
        "displayName": {
          "description": "The display name of the user",
          "type": "string"
        },
        "email": {
          "description": "The email for the user",
          "type": "string"
        },
        "externalId": {
          "description": "An externally-generated and managed IDP ID for this user",
          "type": "string"
        },
        "id": {
          "description": "The ID of the user",
          "type": "string",
          "format": "uint64"
        },
        "idProvider": {
          "description": "The IDP name of the user",
          "type": "string"
        }
      }
    },
    "userUpdate": {
      "description": "User update",
      "properties": {
        "email": {
          "description": "The email for the user",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the user",
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/phoneNumber"
        },
        "verificationCode": {
          "description": "verrification code for the phone number. Must set if phoneNumber is set",
          "type": "string"
        }
      },
      "type": "object"
    },
    "contextList": {
      "description": "ContextList is a list of Contexts",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of Context objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/context"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "context": {
      "description": "Context info",
      "type": "object",
      "required": [
        "createdAt",
        "updatedAt",
        "name",
        "id",
        "connectInfo",
        "state"
      ],
      "properties": {
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the context",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "connectInfo": {
          "$ref": "#/definitions/connectInfo"
        },
        "name": {
          "description": "The full, unique name of this Object in the format contexts/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "$ref": "#/definitions/contextState"
        }
      }
    },
    "contextState": {
      "description": "Output only. State of the Context resource",
      "type": "string",
      "enum": [
        "PENDING",
        "CONNECTED",
        "READY",
        "UNREACHABLE"
      ]
    },
    "contextCreate": {
      "description": "ContextCreate is the payload for context creation",
      "type": "object",
      "required": [
        "name",
        "kubernetesProvider"
      ],
      "properties": {
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "name": {
          "description": "The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        },
        "kubernetesProvider": {
          "$ref": "#/definitions/kubernetesProvider"
        },
        "proxyConfig": {
          "$ref": "#/definitions/proxyConfig"
        }
      }
    },
    "connectInfo": {
      "description": "ConnectInfo contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata",
      "type": "object",
      "required": [
        "kubernetesProvider",
        "relays"
      ],
      "properties": {
        "kubernetesProvider": {
          "$ref": "#/definitions/kubernetesProvider"
        },
        "relays": {
          "description": "Endpoints to which the relay agent is to be registered",
          "type": "string"
        },
        "proxyConfig": {
          "$ref": "#/definitions/proxyConfig"
        }
      }
    },
    "kubernetesProvider": {
      "type": "object",
      "required": [
        "managedType",
        "platform"
      ],
      "properties": {
        "managedType": {
          "type": "string",
          "enum": [
            "FULL",
            "SELF"
          ]
        },
        "platform": {
          "type": "string",
          "enum": [
            "EKS",
            "GKE",
            "AKS",
            "ACK",
            "AWS",
            "GCP",
            "Alibaba Cloud",
            "On-premise"
          ]
        }
      }
    },
    "proxyConfig": {
      "type": "object",
      "properties": {
        "httpProxy": {
          "type": "string",
          "description": "http proxy",
          "title": "HttpProxy"
        },
        "httpsProxy": {
          "type": "string",
          "description": "https proxy",
          "title": "HttpsProxy"
        },
        "noProxy": {
          "type": "string",
          "description": "noproxy",
          "title": "noproxy"
        },
        "proxyAuth": {
          "type": "string",
          "description": "proxy auth",
          "title": "ProxyAuth"
        },
        "allowInsecureBootstrap": {
          "type": "boolean",
          "description": "Allow insecure bootstrap",
          "title": "AllowInsecureBootstrap"
        },
        "enabled": {
          "type": "boolean",
          "description": "enabled",
          "title": "Enabled"
        },
        "bootstrapCA": {
          "type": "string",
          "description": "Certificate Authority of bootstrap server",
          "title": "BootstrapCA"
        }
      }
    },
    "userExternalIDUpdate": {
      "description": "User externalID update",
      "properties": {
        "externalId": {
          "description": "An externally-generated and managed IDP ID for this user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "httpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        }
      },
      "title": ""
    },
    "environmentList": {
      "description": "EnvironmentList is a list of Environments",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of Environment objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/environment"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "environmentCreate": {
      "description": "Environment info",
      "type": "object",
      "required": [
        "cloudProvider",
        "name",
        "type"
      ],
      "properties": {
        "cloudProvider": {
          "title": "Cloud Provider",
          "description": "Cloud Provider",
          "type": "string"
        },
        "cloudRegion": {
          "title": "Cloud Region",
          "description": "Cloud Region",
          "type": "string"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the context",
          "type": "string"
        },
        "name": {
          "description": "The full, unique name of this Object in the format contexts/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        },
        "type": {
          "description": "Type of this environment",
          "type": "string",
          "enum": [
            "fullManaged",
            "managed",
            "registered"
          ]
        },
        "kubeConfig": {
          "description": "KubeConfig file to connect to this environment",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "overSellingRatio": {
          "description": "CPU and memory over selling ratio of this environment",
          "type": "number"
        }
      }
    },
    "environmentUpdate": {
      "description": "Environment info",
      "type": "object",
      "properties": {
        "cloudRegion": {
          "title": "Cloud Region",
          "description": "Cloud Region",
          "type": "string"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the context",
          "type": "string"
        }
      }
    },
    "environmentCondition": {
      "description": "EnvironmentCondition contains details for the current condition of this environment.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string",
          "enum": [
            "True",
            "False",
            "Unknown"
          ]
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      }
    },
    "environmentStatus": {
      "description": "Environment status",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Current service state of environment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/environmentCondition"
          }
        }
      }
    },
    "environment": {
      "description": "Environment info",
      "type": "object",
      "required": [
        "orgName",
        "cloudProvider",
        "createdAt",
        "updatedAt",
        "name",
        "id",
        "state"
      ],
      "properties": {
        "orgName": {
          "title": "Organization Name",
          "description": "Organization Name",
          "type": "string"
        },
        "cloudProvider": {
          "title": "Cloud Provider",
          "description": "Cloud Provider",
          "type": "string"
        },
        "cloudRegion": {
          "title": "Cloud Region",
          "description": "Cloud Region",
          "type": "string"
        },
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the organization",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the context",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string",
          "enum": [
            "fullManaged",
            "managed",
            "registered"
          ]
        },
        "name": {
          "description": "The full, unique name of this Object in the format contexts/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "$ref": "#/definitions/contextState"
        },
        "overSellingRatio": {
          "description": "CPU and memory over selling ratio of this environment",
          "type": "number"
        }
      }
    },
    "vipPool": {
      "description": "VIP Pool",
      "type": "object",
      "required": [
        "addresses",
        "total",
        "used"
      ],
      "properties": {
        "id": {
          "title": "ID",
          "description": "ID of VIP Pool"
        },
        "addresses": {
          "title": "IP Addresses",
          "description": "IP Addresses",
          "type": "string"
        },
        "total": {
          "description": "Total number of IP addresses",
          "type": "integer",
          "format": "int64"
        },
        "used": {
          "description": "Used number of IP addresses",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "vipPoolList": {
      "description": "vipPoolList is a list of vip pools",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of vip pool objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vipPool"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "vipPoolCreate": {
      "description": "VIP Pool create",
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "title": "IP Addresses",
          "description": "IP Addresses",
          "type": "string"
        }
      }
    },
    "kubeblocksCreate": {
      "description": "Kubeblocks Create info",
      "type": "object",
      "properties": {
        "version": {
          "title": "Kubeblocks Version",
          "description": "Kubeblocks Version",
          "type": "string"
        }
      }
    },
    "pageResult": {
      "description": "PageResult info",
      "type": "object",
      "properties": {
        "first": {
          "description": "a link to the first page of results. This link is optional for collections that cannot be indexed directly to a given page",
          "type": "string"
        },
        "last": {
          "description": "a link to the last page of results. This link is optional for collections that cannot be indexed directly to a given page",
          "type": "string"
        },
        "next": {
          "description": "a link to the next page of results. A response that does not contain a next link does not have further data to fetch",
          "type": "string"
        },
        "prev": {
          "description": "a link to the previous page of results. A response that does not contain a prev link has no previous data. This link is optional for collections that cannot be traversed backward",
          "type": "string"
        },
        "totalSize": {
          "description": "the total count of items in the list irrespective of pagination",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "cloudItem": {
      "description": "CloudProvider contains information",
      "type": "object",
      "required": [
        "name",
        "environment"
      ],
      "properties": {
        "name": {
          "description": "Name of cloud provider",
          "type": "string"
        },
        "environment": {
          "description": "Environment Name",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "mysqlParam": {
      "description": "KubeBlocks cluster information",
      "type": "object",
      "properties": {
        "proxyEnabled": {
          "title": "Proxy",
          "description": "Enable proxy or not.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "cluster": {
      "description": "KubeBlocks cluster information",
      "type": "object",
      "required": [
        "environmentName",
        "name",
        "version"
      ],
      "properties": {
        "id": {
          "title": "ID",
          "description": "Cluster ID"
        },
        "orgName": {
          "title": "Org Name",
          "description": "Org Name",
          "type": "string"
        },
        "cloudProvider": {
          "title": "Cloud Provider",
          "description": "Cloud Provider",
          "type": "string"
        },
        "environmentName": {
          "title": "Environment Name",
          "description": "Environment Name",
          "type": "string"
        },
        "cloudRegion": {
          "title": "Cloud Region",
          "description": "Cloud Region",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "Name of cluster. Name must be unique within a Org",
          "type": "string"
        },
        "hash": {
          "title": "Hash",
          "description": "Hash of cluster. Name must be unique within a Org",
          "type": "string"
        },
        "engine": {
          "title": "Engine",
          "description": "Cluster Application Engine",
          "type": "string"
        },
        "engineMode": {
          "description": "engine mode",
          "type": "string"
        },
        "version": {
          "title": "Version",
          "description": "Cluster Application Version",
          "type": "string"
        },
        "replicas": {
          "title": "Replicas",
          "description": "The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.",
          "type": "integer",
          "default": 1,
          "minimum": 1,
          "maximum": 5
        },
        "cpu": {
          "title": "CPU",
          "description": "CPU cores.",
          "type": [
            "number",
            "string"
          ],
          "default": 0.5,
          "minimum": 0.5,
          "maximum": 64,
          "multipleOf": 0.5
        },
        "memory": {
          "title": "Memory(Gi)",
          "description": "Memory, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "default": 0.5,
          "minimum": 0.5,
          "maximum": 1000
        },
        "storage": {
          "title": "Storage(Gi)",
          "description": "Storage size, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "default": 20,
          "minimum": 1,
          "maximum": 10000
        },
        "terminationPolicy": {
          "title": "Termination Policy",
          "description": "The termination policy of cluster.",
          "type": "string",
          "default": "Delete",
          "enum": [
            "DoNotTerminate",
            "Halt",
            "Delete",
            "WipeOut"
          ]
        },
        "monitorEnabled": {
          "title": "Monitor Enabled",
          "description": "Specify whether the cluster enable monitoring.",
          "type": "boolean",
          "default": false
        },
        "vpcEndpointEnabled": {
          "title": "VPC Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from within the VPC.",
          "type": "boolean",
          "default": false
        },
        "internetEndpointEnabled": {
          "title": "Internet Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from the public internet.",
          "type": "boolean",
          "default": false
        },
        "status": {
          "title": "Status",
          "description": "Cluster Status",
          "type": "string"
        },
        "paramTplName": {
          "title": "Parameter Template Name",
          "description": "name of assigned parameter template",
          "type": "string"
        },
        "mysql": {
          "$ref": "#/definitions/mysqlParam"
        },
        "createdAt": {
          "title": "CreatedAt",
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "title": "UpdatedAt",
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "clusterV2": {
      "description": "KubeBlocks cluster information",
      "type": "object",
      "required": [
        "environmentName",
        "name",
        "engine"
      ],
      "properties": {
        "id": {
          "title": "ID",
          "description": "Cluster ID"
        },
        "orgName": {
          "title": "Org Name",
          "description": "Org Name",
          "type": "string"
        },
        "cloudProvider": {
          "title": "Cloud Provider",
          "description": "Cloud Provider",
          "type": "string"
        },
        "environmentName": {
          "title": "Environment Name",
          "description": "Environment Name",
          "type": "string"
        },
        "environmentType": {
          "title": "Environment Type",
          "description": "Environment Types",
          "type": "string"
        },
        "cloudRegion": {
          "title": "Cloud Region",
          "description": "Cloud Region",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "Name of cluster. Name must be unique within a Org",
          "type": "string"
        },
        "hash": {
          "title": "Hash",
          "description": "Hash of cluster. Name must be unique within a Org",
          "type": "string"
        },
        "engine": {
          "title": "Engine",
          "description": "Cluster Application Engine",
          "type": "string"
        },
        "engineMode": {
          "description": "engine mode",
          "type": "string"
        },
        "paramTplName": {
          "title": "Parameter Template Name",
          "description": "name of assigned parameter template",
          "type": "string"
        },
        "paramTplPartition": {
          "title": "Parameter Template partition",
          "description": "partition of assigned parameter template",
          "type": "string",
          "enum": [
            "default",
            "custom"
          ]
        },
        "version": {
          "title": "Version",
          "description": "Cluster Application Version",
          "type": "string"
        },
        "replicas": {
          "title": "Replicas",
          "description": "The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.",
          "type": "integer",
          "default": 1,
          "minimum": 1,
          "maximum": 5
        },
        "cpu": {
          "title": "CPU",
          "description": "CPU cores.",
          "type": [
            "number",
            "string"
          ],
          "default": 0.5,
          "minimum": 0.5,
          "maximum": 64,
          "multipleOf": 0.5
        },
        "memory": {
          "title": "Memory(Gi)",
          "description": "Memory, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "default": 0.5,
          "minimum": 0.5,
          "maximum": 1000
        },
        "storage": {
          "title": "Storage(Gi)",
          "description": "Storage size, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "default": 20,
          "minimum": 1,
          "maximum": 10000
        },
        "terminationPolicy": {
          "title": "Termination Policy",
          "description": "The termination policy of cluster.",
          "type": "string",
          "default": "Delete",
          "enum": [
            "DoNotTerminate",
            "Halt",
            "Delete",
            "WipeOut"
          ]
        },
        "monitorEnabled": {
          "title": "Monitor Enabled",
          "description": "Specify whether the cluster enable monitoring.",
          "type": "boolean",
          "default": false
        },
        "vpcEndpointEnabled": {
          "title": "VPC Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from within the VPC.",
          "type": "boolean",
          "default": false
        },
        "internetEndpointEnabled": {
          "title": "Internet Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from the public internet.",
          "type": "boolean",
          "default": false
        },
        "tlsEnabled": {
          "title": "TLS Enabled",
          "description": "Enable the cluster to provide TLS connection or not.",
          "type": "boolean",
          "default": false
        },
        "nodePortEnabled": {
          "title": "NodePort service enabled",
          "description": "Enable the cluster to provide NodePort service or not.",
          "type": "boolean",
          "default": false
        },
        "status": {
          "title": "Status",
          "description": "Cluster Status",
          "type": "string"
        },
        "mysql": {
          "$ref": "#/definitions/mysqlParam"
        },
        "createdAt": {
          "title": "CreatedAt",
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "title": "UpdatedAt",
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "createOnlySet": {
          "title": "CreateOnlySet",
          "description": "CreateOnlySet",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "Mode",
          "type": "string"
        },
        "proxyEnabled": {
          "title": "ProxyEnabled",
          "description": "Proxy Enabled",
          "type": "boolean",
          "default": false
        },
        "components": {
          "$ref": "#/definitions/components"
        },
        "extra": {
          "title": "Values",
          "description": "Values",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "components": {
      "description": "Items is the list of ComponentSpec in the list",
      "type": "array",
      "items": {
        "type": "object",
        "minItems": 1,
        "properties": {
          "name": {
            "type": "string",
            "description": "component name"
          },
          "componentDefRef": {
            "type": "string",
            "description": "component definition name"
          },
          "compNum": {
            "title": "CompNum",
            "description": "number of components",
            "type": "integer"
          },
          "monitor": {
            "type": "boolean",
            "description": "enable monitor"
          },
          "replicas": {
            "title": "Replicas",
            "description": "The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 5
          },
          "cpu": {
            "title": "CPU",
            "description": "CPU cores.",
            "type": [
              "number",
              "string"
            ],
            "default": 0.5,
            "minimum": 0.5,
            "maximum": 64,
            "multipleOf": 0.5
          },
          "memory": {
            "title": "Memory(Gi)",
            "description": "Memory, the unit is Gi.",
            "type": [
              "number",
              "string"
            ],
            "default": 0.5,
            "minimum": 0.5,
            "maximum": 1000
          },
          "storage": {
            "title": "Storage",
            "description": "Storage",
            "type": "string"
          },
          "volumes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "volume name"
                },
                "storage": {
                  "title": "Storage(Gi)",
                  "description": "Storage size, the unit is Gi.",
                  "type": [
                    "number",
                    "string"
                  ],
                  "default": 20,
                  "minimum": 1,
                  "maximum": 10000
                }
              }
            }
          }
        }
      }
    },
    "clusterListItem": {
      "description": "KubeBlocks cluster information",
      "type": "object",
      "required": [
        "id",
        "name",
        "engine",
        "version",
        "terminationPolicy",
        "status",
        "cloudProvider",
        "environmentName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "description": "Id of cluster",
          "type": "string"
        },
        "name": {
          "description": "Name of cluster. Name must be unique within a Org",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of cluster.",
          "type": "string"
        },
        "engine": {
          "description": "Cluster Application Engine",
          "type": "string"
        },
        "engineMode": {
          "description": "engine mode",
          "type": "string"
        },
        "version": {
          "description": "Cluster Application Version",
          "type": "string"
        },
        "terminationPolicy": {
          "description": "Cluster termination policy",
          "type": "string"
        },
        "status": {
          "description": "Cluster Status",
          "type": "string"
        },
        "cloudProvider": {
          "description": "Cloud Provider",
          "type": "string"
        },
        "environmentName": {
          "description": "Environment Name",
          "type": "string"
        },
        "cloudRegion": {
          "description": "Cloud Provider",
          "type": "string"
        },
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "clusterUpdate": {
      "description": "ClusterUpdate is the payload to update a KubeBlocks cluster",
      "type": "object",
      "properties": {
        "replicas": {
          "title": "Replicas",
          "description": "The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.",
          "type": "integer",
          "minimum": 1,
          "maximum": 5
        },
        "cpu": {
          "title": "CPU",
          "description": "CPU cores.",
          "type": [
            "number",
            "string"
          ],
          "minimum": 0.5,
          "maximum": 64,
          "multipleOf": 0.5
        },
        "memory": {
          "title": "Memory(Gi)",
          "description": "Memory, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "minimum": 0.5,
          "maximum": 1000
        },
        "storage": {
          "title": "Storage(Gi)",
          "description": "Storage size, the unit is Gi.",
          "type": [
            "number",
            "string"
          ],
          "minimum": 1,
          "maximum": 10000
        },
        "terminationPolicy": {
          "title": "Termination Policy",
          "description": "The termination policy of cluster.",
          "type": "string",
          "default": "Delete",
          "enum": [
            "DoNotTerminate",
            "Halt",
            "Delete",
            "WipeOut"
          ]
        },
        "monitorEnabled": {
          "title": "Monitor Enabled",
          "description": "Specify whether the cluster enable monitoring.",
          "type": "boolean"
        },
        "vpcEndpointEnabled": {
          "title": "VPC Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from within the VPC.",
          "type": "boolean"
        },
        "internetEndpointEnabled": {
          "title": "Internet Endpoint Enabled",
          "description": "Specify whether the cluster can be accessed from the public internet.",
          "type": "boolean"
        },
        "paramTplName": {
          "title": "Parameter Template Name",
          "description": "name of assigned parameter template",
          "type": "string"
        },
        "paramTplPartition": {
          "title": "Parameter Template partition",
          "description": "partition of assigned parameter template",
          "type": "string",
          "enum": [
            "default",
            "custom"
          ]
        },
        "mysql": {
          "$ref": "#/definitions/mysqlParam"
        }
      }
    },
    "kubernetesManifests": {
      "description": "Items is the list of Kubernetes objects in the list",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "minItems": 1
    },
    "kubernetesManifestList": {
      "description": "KubernetesManifestList is the list of Kubernetes objects in the list",
      "type": "object",
      "properties": {
        "kubernetesManifests": {
          "$ref": "#/definitions/kubernetesManifests"
        }
      }
    },
    "clusterList": {
      "description": "ClusterList is a list of KubeBlocks clusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of KubeBlocks cluster objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clusterListItem"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "account": {
      "description": "Cluster account information",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "title": "name",
          "description": "Specify the name of user, which must be unique.",
          "type": "string"
        },
        "component": {
          "description": "Specify the name of component to be connected. If not specified, pick the first one.",
          "title": "component",
          "type": "string"
        },
        "instance": {
          "description": "Specify the name of instance to be connected.",
          "title": "instance",
          "type": "string"
        },
        "password": {
          "description": "Specify the password of user. The default value is empty, which means a random password will be generated.",
          "title": "password",
          "type": "string"
        },
        "role": {
          "description": "Role name should be one of [SUPERUSER, READWRITE, READONLY].",
          "title": "role",
          "type": "string",
          "default": "SUPERUSER",
          "enum": [
            "SUPERUSER",
            "READWRITE",
            "READONLY"
          ]
        }
      }
    },
    "cloudList": {
      "description": "ClusterList is a list of KubeBlocks clusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of cloud provider",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudItem"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "instance": {
      "description": "Instance is the information of KubeBlocks cluster instances",
      "type": "object",
      "required": [
        "name",
        "cluster",
        "component",
        "status",
        "role",
        "accessMode",
        "cloud",
        "region",
        "zone",
        "cpu",
        "memory",
        "storage",
        "node",
        "createdAt"
      ],
      "properties": {
        "name": {
          "description": "Instance name",
          "type": "string"
        },
        "cluster": {
          "description": "Cluster name",
          "type": "string"
        },
        "component": {
          "description": "Component for instance",
          "type": "string"
        },
        "status": {
          "description": "Status for instance",
          "type": "string"
        },
        "role": {
          "description": "Role for instance",
          "type": "string"
        },
        "accessMode": {
          "description": "Access mode for instance",
          "type": "string"
        },
        "cloud": {
          "description": "Cloud for instance",
          "type": "string"
        },
        "region": {
          "description": "Region for instance",
          "type": "string"
        },
        "zone": {
          "description": "Available zone for instance",
          "type": "string"
        },
        "cpu": {
          "description": "cpu sets CPU requests and limits mapping keys.",
          "type": "object",
          "properties": {
            "limits": {
              "description": "Limits value mapping key.",
              "type": "string"
            },
            "requests": {
              "description": "Requests value mapping key.",
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "memory sets Memory requests and limits mapping keys.",
          "type": "object",
          "properties": {
            "limits": {
              "description": "Limits value mapping key.",
              "type": "string"
            },
            "requests": {
              "description": "Requests value mapping key.",
              "type": "string"
            }
          }
        },
        "storage": {
          "description": "storage sets the storage size value mapping key",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "size"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          }
        },
        "node": {
          "description": "node name",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "type": "string"
        }
      }
    },
    "instanceList": {
      "description": "ClusterList is a list of KubeBlocks clusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of KubeBlocks cluster objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instance"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "backupCreate": {
      "description": "BackupCreate is the payload to create a KubeBlocks cluster backup",
      "type": "object",
      "properties": {
        "name": {
          "description": "name of the backup, if not specified, a name will be generated automatically",
          "type": "string"
        },
        "useVolumeSnapshot": {
          "description": "Use volume snapshot or not",
          "type": "boolean",
          "default": true
        }
      }
    },
    "backupList": {
      "description": "BackupList is a list of backups",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of backup policy objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/backup"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "backup": {
      "description": "backup is the payload for KubeBlocks cluster backup",
      "type": "object",
      "required": [
        "name",
        "backupPolicyName",
        "backupMethod",
        "backupType",
        "snapshotVolumes",
        "creationTimestamp",
        "completionTimestamp",
        "startTimestamp",
        "duration",
        "totalSize",
        "status",
        "sourceCluster",
        "autoBackup",
        "orgName"
      ],
      "properties": {
        "name": {
          "description": "name of the backup",
          "type": "string"
        },
        "backupPolicyName": {
          "description": "Which backupPolicy is applied to perform this backup",
          "type": "string",
          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
        },
        "backupMethod": {
          "description": "Backup Method.",
          "type": "string"
        },
        "backupRepo": {
          "description": "backupRepo is the name of backupRepo and it is used to store the backup data",
          "type": "string"
        },
        "backupType": {
          "description": "Backup Type.",
          "type": "string",
          "enum": [
            "Full",
            "Incremental",
            "Differential",
            "Continuous"
          ]
        },
        "snapshotVolumes": {
          "description": "snapshotVolumes specifies whether to take snapshots of persistent volumes to back up",
          "type": "boolean"
        },
        "creationTimestamp": {
          "description": "Date/time when the backup was created.",
          "type": "string",
          "format": "date-time"
        },
        "completionTimestamp": {
          "description": "Date/time when the backup finished being processed.",
          "type": "string",
          "format": "date-time"
        },
        "startTimestamp": {
          "description": "Date/time when the backup started being processed.",
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "description": "The duration time of backup execution. When converted to a string, the form is \"1h2m0.5s\".",
          "type": "string"
        },
        "totalSize": {
          "description": "Backup total size. A string with capacity units in the form of \"1Gi\", \"1Mi\", \"1Ki\".",
          "type": "string"
        },
        "status": {
          "description": "The current status. Valid values are New, InProgress, Completed, Failed.",
          "type": "string",
          "enum": [
            "New",
            "InProgress",
            "Running",
            "Completed",
            "Failed",
            "Deleting"
          ]
        },
        "sourceCluster": {
          "description": "sourceCluster records the source cluster information for this backup.",
          "type": "string"
        },
        "autoBackup": {
          "description": "autoBackup or not",
          "type": "boolean"
        },
        "orgName": {
          "description": "orgName records the organization name for this backup.",
          "type": "string"
        },
        "timeRangeStart": {
          "description": "timeRangeStart records the start time of the backup.",
          "type": "string",
          "format": "date-time"
        },
        "timeRangeEnd": {
          "description": "timeRangeEnd records the end time of the backup.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "backupPolicy": {
      "description": "BackupPolicy is the payload for KubeBlocks cluster backup policy",
      "type": "object",
      "properties": {
        "backupPolicyName": {
          "description": "name of the backupPolicy custom object",
          "type": "string"
        },
        "backupRepoName": {
          "description": "backupRepoName is the name of backupRepo and it is used to store the backup data",
          "type": "string"
        },
        "pathPrefix": {
          "description": "pathPrefix is the directory inside the backup repository to store the backup data",
          "type": "string"
        },
        "backoffLimit": {
          "description": "backoffLimit is the number of retries before marking this job failed",
          "type": "integer"
        },
        "backupMethod": {
          "description": "name of the backup method",
          "type": "string"
        },
        "useVolumeSnapshot": {
          "description": "whether to take snapshots of persistent volumes to back up",
          "type": "boolean"
        },
        "backupType": {
          "description": "backupType specifies the backup type",
          "type": "string",
          "enum": [
            "Full",
            "Incremental",
            "Differential",
            "Continuous"
          ]
        },
        "retentionPeriod": {
          "description": "retentionPeriod specifies the retention period",
          "type": "string"
        },
        "cronExpression": {
          "description": "cronExpression specifies the cron expression",
          "type": "string"
        },
        "startingDeadlineMinutes": {
          "description": "startingDeadlineMinutes defines the deadline in minutes for starting the backup job if it misses scheduled time for any reason",
          "type": "integer"
        },
        "autoBackup": {
          "description": "autoBackup or not",
          "type": "boolean",
          "default": false
        },
        "PITREnabled": {
          "description": "PITREnabled or not",
          "type": "boolean",
          "default": false
        }
      }
    },
    "backupRepoList": {
      "description": "BackupRepoList is a list of backupRepo",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of backupRepo objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/backupRepo"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "backupRepoCreate": {
      "description": "BackupRepoCreate is the payload to create a KubeBlocks cluster backup repo",
      "type": "object",
      "required": [
        "name",
        "environmentId",
        "storageProvider",
        "params"
      ],
      "properties": {
        "name": {
          "description": "name of the backupRepo",
          "type": "string"
        },
        "environmentId": {
          "description": "environmentId of the backupRepo",
          "type": "string",
          "format": "uuid"
        },
        "storageProvider": {
          "description": "storageProvider specifies the storage provider of the backupRepo",
          "type": "string"
        },
        "accessMethod": {
          "description": "accessMethod specifies the access method of the backupRepo",
          "type": "string",
          "enum": [
            "Mount",
            "Tool"
          ]
        },
        "params": {
          "description": "the parameters specified by the storage provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "default": {
          "description": "default specifies whether the backupRepo is the default backupRepo",
          "type": "boolean"
        },
        "pvReclaimPolicy": {
          "description": "Specify the reclaim policy for PVs created by this backup repo",
          "type": "string",
          "enum": [
            "Retain",
            "Delete"
          ]
        },
        "volumeCapacity": {
          "description": "Specify the capacity of the new created PVC",
          "type": "string"
        }
      }
    },
    "backupRepoUpdate": {
      "description": "BackupRepoUpdate is the payload to update a KubeBlocks cluster backup repo",
      "type": "object",
      "properties": {
        "default": {
          "description": "default specifies whether the backupRepo is the default backupRepo",
          "type": "boolean"
        },
        "credential": {
          "description": "credential specifies the credential of the storage provider",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "storageProvider": {
      "description": "storageProvider defines the necessary information about creating a backup repo",
      "type": "object",
      "required": [
        "name",
        "params",
        "required"
      ],
      "properties": {
        "name": {
          "description": "name of the storage provider",
          "type": "string"
        },
        "params": {
          "description": "params specifies the parameters of the storage provider",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "type": {
                "description": "type specifies the type of the parameter",
                "type": "string"
              },
              "description": {
                "description": "description specifies the description of the parameter",
                "type": "string"
              },
              "default": {
                "description": "default specifies the default value of the parameter",
                "type": "string"
              }
            }
          }
        },
        "required": {
          "description": "required specifies the required parameters of the storage provider",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "credential": {
          "description": "credential specifies the credential fields of the storage provider",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "backupRepo": {
      "description": "backupRepo is the payload for KubeBlocks cluster backup repo",
      "type": "object",
      "required": [
        "name",
        "default",
        "status",
        "accessMethod",
        "storageProvider",
        "config",
        "environmentId",
        "environmentName",
        "createdAt"
      ],
      "properties": {
        "environmentId": {
          "description": "environmentId of the backupRepo",
          "type": "string",
          "format": "uuid"
        },
        "environmentName": {
          "description": "environmentName of the backupRepo",
          "type": "string"
        },
        "name": {
          "description": "name of the backupRepo",
          "type": "string"
        },
        "default": {
          "description": "default specifies whether the backupRepo is the default backupRepo",
          "type": "boolean"
        },
        "status": {
          "description": "status specifies the status of the backupRepo",
          "type": "string"
        },
        "storageProvider": {
          "description": "storageProvider specifies the storage provider of the backupRepo",
          "type": "string"
        },
        "accessMethod": {
          "description": "accessMethod specifies the access method of the backupRepo",
          "type": "string",
          "enum": [
            "Mount",
            "Tool"
          ]
        },
        "backupNums": {
          "description": "backupNums specifies the number of backups in the backupRepo",
          "type": "integer"
        },
        "totalSize": {
          "description": "totalSize specifies the total size of backups in the backupRepo",
          "type": "string"
        },
        "config": {
          "description": "config specifies the configuration of the backupRepo",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdAt": {
          "description": "createdAt specifies the creation time of the backupRepo",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "restoreCreate": {
      "description": "RestoreCreate is the payload to restore a KubeBlocks cluster",
      "type": "object",
      "required": [
        "clusterName",
        "backupId"
      ],
      "properties": {
        "clusterName": {
          "description": "New cluster name",
          "type": "string"
        },
        "backupId": {
          "description": "the id of backup to restore",
          "type": "integer"
        },
        "restoreTimeStr": {
          "description": "restoreTime point to restore",
          "type": "string"
        },
        "volumeRestorePolicy": {
          "description": "the volume claim restore policy, support values: [Serial, Parallel]",
          "type": "string",
          "enum": [
            "Serial",
            "Parallel"
          ],
          "default": "Serial"
        }
      }
    },
    "restoreList": {
      "description": "restoreList is a list of restore object",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of restore objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/restore"
          }
        }
      }
    },
    "restore": {
      "description": "create a KubeBlocks restore API",
      "type": "object",
      "required": [
        "clusterName",
        "componentName",
        "backupName"
      ],
      "properties": {
        "name": {
          "description": "kubeBlocks restore name",
          "type": "string"
        },
        "clusterName": {
          "description": "kubeBlocks cluster name",
          "type": "string"
        },
        "componentName": {
          "description": "component name of cluster",
          "type": "string"
        },
        "backupName": {
          "description": "backup name",
          "type": "string"
        },
        "restoreTime": {
          "description": "restore time",
          "type": "string"
        },
        "parameters": {
          "description": "restore parameters to inject env of the restore CR.",
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "restore status",
          "type": "object",
          "properties": {
            "phase": {
              "description": "restore phase",
              "type": "string"
            },
            "startTimestamp": {
              "description": "start time",
              "type": "string"
            },
            "completionTimestamp": {
              "description": "completion time",
              "type": "string"
            },
            "conditions": {
              "type": "array",
              "items": {
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "conditionType"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "action name"
                  },
                  "status": {
                    "type": "string",
                    "description": "action status, enum values: [Processing, Completed, Failed]"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "reconfigureCreate": {
      "description": "ReconfigureCreate is the payload to reconfigure a KubeBlocks cluster",
      "type": "object",
      "required": [
        "parameters"
      ],
      "properties": {
        "parameters": {
          "description": "Specify parameters list to be updated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "componentName": {
          "description": "Specify the name of Component to be updated",
          "type": "string"
        },
        "configSpecName": {
          "description": "Specify the name of the configuration template to be updated",
          "type": "string"
        },
        "configFileName": {
          "description": "Specify the name of the configuration file to be updated",
          "type": "string"
        }
      }
    },
    "opsRequestName": {
      "description": "OpsRequestName is the name of a KubeBlocks OpsRequest",
      "type": "object",
      "required": [
        "opsRequestName"
      ],
      "properties": {
        "opsRequestName": {
          "type": "string"
        }
      }
    },
    "opsRestart": {
      "description": "OpsRestart is the payload to restart a KubeBlocks cluster",
      "type": "object",
      "properties": {
        "componentNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "opsUpgrade": {
      "description": "OpsUpgrade is the payload to upgrade a KubeBlocks cluster",
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "opsVolumeExpand": {
      "description": "OpsVolumeExpand is the payload to expand volume for a KubeBlocks cluster",
      "type": "object",
      "required": [
        "storage"
      ],
      "properties": {
        "componentName": {
          "type": "string"
        },
        "volumeClaimTemplateNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "storage": {
          "type": "string"
        }
      }
    },
    "opsVScale": {
      "description": "OpsVScale is the payload to vertically scale a KubeBlocks cluster",
      "type": "object",
      "properties": {
        "componentName": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        }
      }
    },
    "opsHScale": {
      "description": "OpsHScale is the payload to horizontally scale a KubeBlocks cluster",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "componentName": {
          "type": "string"
        },
        "replicas": {
          "type": "integer"
        }
      }
    },
    "opsPromote": {
      "description": "OpsPromote is the payload to promote a KubeBlocks cluster",
      "type": "object",
      "properties": {
        "componentName": {
          "type": "string"
        },
        "instanceName": {
          "type": "string"
        },
        "oldPrimaryInstanceName": {
          "type": "string"
        }
      }
    },
    "opsExpose": {
      "description": "OpsExpose is the payload to expose a KubeBlocks cluster",
      "type": "object",
      "required": [
        "type",
        "enable"
      ],
      "properties": {
        "componentName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "vpc",
            "internet"
          ]
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "event id"
        },
        "clusterName": {
          "type": "string",
          "description": "cluster name"
        },
        "userName": {
          "type": "string",
          "description": "User display name, if the event is user-generated, null for event generated by system"
        },
        "source": {
          "type": "string",
          "description": "event source",
          "enum": [
            "user",
            "system"
          ]
        },
        "eventName": {
          "type": "string",
          "description": "Event name is OpsRequest name or cluster operation name"
        },
        "start": {
          "type": "string",
          "description": "event start time",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "description": "event end time",
          "format": "date-time"
        },
        "details": {
          "type": "string",
          "description": "Details will include the extra event info, such as update cluster which field, OpsRequest content etc"
        },
        "result": {
          "type": "string",
          "description": "result of the event",
          "enum": [
            "success",
            "failed"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "eventList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/event"
      }
    },
    "paramTplList": {
      "description": "paramTplList is a list of parameter templates",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of parameter templates objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/paramTplListItem"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "paramTplListItem": {
      "description": "parameter template information",
      "type": "object",
      "required": [
        "name",
        "family",
        "description",
        "partition"
      ],
      "properties": {
        "name": {
          "description": "Name of parameter template. Name must be unique within a Org",
          "type": "string"
        },
        "family": {
          "description": "Name of database with its version, eg: mysql8.0",
          "type": "string"
        },
        "description": {
          "description": "Description of parameter template",
          "type": "string"
        },
        "partition": {
          "description": "the template partition in listParamTpl request",
          "type": "string"
        },
        "createdAt": {
          "description": "CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "paramTplCreate": {
      "description": "parameter template create",
      "type": "object",
      "required": [
        "name",
        "family",
        "description"
      ],
      "properties": {
        "name": {
          "description": "Name of parameter template. Name must be unique within a Org",
          "type": "string",
          "maxLength": 64,
          "minLength": 3,
          "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$"
        },
        "family": {
          "description": "Name of database with its version, eg: mysql8.0",
          "type": "string"
        },
        "description": {
          "description": "Description of parameter template",
          "type": "string",
          "maxLength": 128,
          "minLength": 3
        }
      }
    },
    "paramTplCreateFromCluster": {
      "description": "parameter template create",
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "name": {
          "description": "Name of parameter template. Name must be unique within a Org",
          "type": "string",
          "maxLength": 64,
          "minLength": 3,
          "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$"
        },
        "description": {
          "description": "Description of parameter template",
          "type": "string",
          "maxLength": 128,
          "minLength": 3
        }
      }
    },
    "paramTplUpdate": {
      "description": "paramTplUpdate is the payload to update a parameter template",
      "type": "object",
      "properties": {
        "configFile": {
          "description": "Specify parameters belongs to which config file",
          "type": "string"
        },
        "parameters": {
          "description": "Specify parameters list to be updated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "paramTplGet": {
      "description": "paramTplGet is the response of get parameter template request",
      "type": "object",
      "required": [
        "name",
        "family",
        "description",
        "template",
        "constraint"
      ],
      "properties": {
        "name": {
          "description": "Name of parameter template. Name must be unique within a Org",
          "type": "string"
        },
        "family": {
          "description": "Name of database with its version, eg: mysql8.0",
          "type": "string"
        },
        "description": {
          "description": "Description of parameter template",
          "type": "string"
        },
        "template": {
          "description": "content of parameter template",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "constraint": {
          "description": "content of parameter constraint",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "paramTplApplToClusterList": {
      "description": "paramTplAPPLToClusterList is a list of parameter templates applicable to the cluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of parameter templates applicable to the cluster objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/paramTplApplToClusterListItem"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "paramTplApplToClusterListItem": {
      "description": "parameter template applicable to the cluster information",
      "type": "object",
      "required": [
        "name",
        "count",
        "needRestart",
        "partition"
      ],
      "properties": {
        "name": {
          "description": "Name of parameter template. Name must be unique within a Org",
          "type": "string"
        },
        "count": {
          "description": "The number of parameters in the parameter template",
          "type": "integer"
        },
        "needRestart": {
          "description": "whether to restart after applying this parameter template or not ",
          "type": "boolean"
        },
        "partition": {
          "description": "the template partition",
          "type": "string"
        }
      }
    },
    "tag": {
      "description": "tag info",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "The id of the tag",
          "type": "string",
          "format": "uint64"
        },
        "key": {
          "description": "the key of the tag",
          "type": "string"
        },
        "value": {
          "description": "The value corresponding to the key",
          "type": "string"
        }
      }
    },
    "tagCreate": {
      "description": "Tag create",
      "type": "object",
      "required": [
        "clusterId",
        "items"
      ],
      "properties": {
        "clusterId": {
          "description": "The cluster id corresponding to the tag",
          "type": "string",
          "format": "uint64"
        },
        "items": {
          "description": "The key value pair of the tag needed to create",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "tagUpdate": {
      "description": "Tag update",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "The key of the tag",
          "type": "string"
        },
        "value": {
          "description": "the value corresponding th the key",
          "type": "string"
        }
      }
    },
    "webhookConfig": {
      "description": "Webhook config of alert receiver",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "alertReceiver": {
      "description": "Alert receiver information",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "webhookConfig": {
          "$ref": "#/definitions/webhookConfig"
        },
        "userGroup": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uint64"
              }
            },
            "emailEnabled": {
              "type": "boolean"
            },
            "smsEnabled": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "alertReceiverList": {
      "description": "AlertReceiverList is a list of alert receivers",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of alert receiver objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertReceiver"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "alert": {
      "type": "object",
      "properties": {
        "startsAt": {
          "type": "string",
          "format": "date-time"
        },
        "endsAt": {
          "type": "string",
          "format": "date-time"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "resolved",
            "firing"
          ]
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "generatorURL": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        }
      }
    },
    "postableAlert": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "groupKey": {
          "type": "string"
        },
        "truncatedAlerts": {
          "type": "number"
        },
        "status": {
          "type": "string",
          "enum": [
            "resolved",
            "firing"
          ]
        },
        "receiver": {
          "type": "string"
        },
        "groupLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "commonLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "commonAnnotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "externalURL": {
          "type": "string"
        },
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alert"
          }
        }
      }
    },
    "alertSMTPConfig": {
      "description": "Alert smtp config",
      "type": "object",
      "required": [
        "smtp_smarthost",
        "smtp_auth_username",
        "smtp_auth_password",
        "smtp_from"
      ],
      "properties": {
        "smtp_smarthost": {
          "description": "The SMTP host through which emails are sent",
          "type": "string"
        },
        "smtp_auth_username": {
          "description": "SMTP authentication information",
          "type": "string"
        },
        "smtp_auth_password": {
          "description": "SMTP authentication information",
          "type": "string"
        },
        "smtp_from": {
          "description": "The sender's address",
          "type": "string"
        }
      }
    },
    "alertTemplate": {
      "description": "Alert template",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "emailSubject": {
          "type": "string"
        },
        "emailText": {
          "type": "string"
        },
        "feishuTitle": {
          "type": "string"
        },
        "feishuText": {
          "type": "string"
        }
      }
    },
    "alertTemplateList": {
      "description": "AlertTemplateList is a list of alert templates",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of alertTemplate objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertTemplate"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "tagCluster": {
      "type": "object",
      "properties": {
        "clusterId": {
          "description": "The cluster id corresponding to the tag",
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tag"
          }
        }
      }
    },
    "tagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagCluster"
      }
    },
    "sqlReqRes": {
      "type": "object",
      "properties": {
        "body": {
          "description": "SQL request or response body",
          "type": "string"
        }
      }
    },
    "tlsRequest": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable TLS or not",
          "type": "boolean"
        }
      }
    },
    "tlsCert": {
      "type": "object",
      "properties": {
        "componentName": {
          "description": "Component these certs belong to",
          "type": "string"
        },
        "caCert": {
          "description": "CA Certificate",
          "type": "string"
        },
        "clientCert": {
          "description": "Client Side Certificate",
          "type": "string"
        },
        "clientKey": {
          "description": "Client Side key",
          "type": "string"
        }
      }
    },
    "tlsCertList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tlsCert"
      }
    },
    "benchmarkList": {
      "description": "BenchmarkList is a list of benchmarks",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Items is the list of benchmark objects in the list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/benchmark"
          }
        },
        "pageResult": {
          "$ref": "#/definitions/pageResult"
        }
      }
    },
    "benchmark": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of benchmark",
          "type": "integer"
        },
        "name": {
          "description": "Name of benchmark",
          "type": "string"
        },
        "type": {
          "description": "Type of benchmark",
          "type": "string",
          "enum": [
            "pgbench",
            "sysbench",
            "tpcc",
            "tpch",
            "ycsb"
          ]
        },
        "config": {
          "description": "Config of benchmark",
          "type": "string"
        },
        "prepareLog": {
          "description": "the log of benchmark in prepare stage",
          "type": "string"
        },
        "runLog": {
          "description": "the log of benchmark in run stage",
          "type": "string"
        },
        "cleanupLog": {
          "description": "the log of benchmark in cleanup stage",
          "type": "string"
        },
        "cluster": {
          "description": "the cluster name",
          "type": "string"
        },
        "database": {
          "description": "the database name",
          "type": "string"
        },
        "status": {
          "description": "the status of benchmark",
          "type": "string",
          "enum": [
            "Pending",
            "Running",
            "Complete",
            "Failed"
          ]
        }
      }
    },
    "pgbench": {
      "type": "object",
      "required": [
        "username",
        "password",
        "address",
        "cluster",
        "database"
      ],
      "properties": {
        "step": {
          "description": "Step of sysbench",
          "type": "string",
          "default": "all",
          "enum": [
            "prepare",
            "run",
            "cleanup",
            "all"
          ]
        },
        "cpu": {
          "description": "the cpu limit for test container",
          "type": "string",
          "default": "1"
        },
        "memory": {
          "description": "the memory limit for test container",
          "type": "string",
          "default": "2Gi"
        },
        "name": {
          "description": "the name of benchmark",
          "type": "string"
        },
        "cluster": {
          "description": "the cluster name",
          "type": "string"
        },
        "database": {
          "description": "the database name",
          "type": "string"
        },
        "username": {
          "description": "Username for database",
          "type": "string"
        },
        "password": {
          "description": "Password for database",
          "type": "string"
        },
        "address": {
          "description": "Address for database",
          "type": "string"
        },
        "scale": {
          "description": "Scale of pgbench",
          "type": "integer",
          "default": 1
        },
        "clients": {
          "description": "Number of clients to run",
          "type": "integer",
          "default": 1
        },
        "threads": {
          "description": "Number of threads to use",
          "type": "integer",
          "default": 1
        },
        "duration": {
          "description": "the seconds of test duration",
          "type": "integer",
          "default": 60
        },
        "transactions": {
          "description": "Number of transactions each client runs",
          "type": "integer",
          "default": 0
        },
        "selectOnly": {
          "description": "Run select only test",
          "type": "boolean",
          "default": false
        }
      }
    },
    "sysbench": {
      "type": "object",
      "required": [
        "username",
        "password",
        "address",
        "cluster",
        "database"
      ],
      "properties": {
        "step": {
          "description": "Step of sysbench",
          "type": "string",
          "default": "all",
          "enum": [
            "prepare",
            "run",
            "cleanup",
            "all"
          ]
        },
        "cpu": {
          "description": "the cpu limit for test container",
          "type": "string",
          "default": "1"
        },
        "memory": {
          "description": "the memory limit for test container",
          "type": "string",
          "default": "2Gi"
        },
        "name": {
          "description": "the name of benchmark",
          "type": "string"
        },
        "cluster": {
          "description": "the cluster name",
          "type": "string"
        },
        "database": {
          "description": "the database name",
          "type": "string"
        },
        "threads": {
          "description": "Number of threads to use",
          "type": "integer",
          "default": 4
        },
        "duration": {
          "description": "the seconds of test duration",
          "type": "integer",
          "default": 60
        },
        "tableSize": {
          "description": "Number of rows per table",
          "type": "integer",
          "default": 25000
        },
        "tableNum": {
          "description": "Number of tables",
          "type": "integer",
          "default": 10
        },
        "testType": {
          "description": "Test type",
          "type": "string",
          "default": "oltp_read_write",
          "enum": [
            "oltp_delete",
            "oltp_insert",
            "oltp_point_select",
            "oltp_read_only",
            "oltp_read_write",
            "oltp_update_index",
            "oltp_update_non_index",
            "oltp_write_only",
            "select_random_points",
            "select_random_ranges",
            "bulk_insert",
            "oltp_read_write_pct"
          ]
        },
        "username": {
          "description": "Username for database",
          "type": "string"
        },
        "password": {
          "description": "Password for database",
          "type": "string"
        },
        "address": {
          "description": "Address for database",
          "type": "string"
        }
      }
    },
    "tpcc": {
      "type": "object",
      "required": [
        "username",
        "password",
        "address",
        "cluster",
        "database"
      ],
      "properties": {
        "step": {
          "description": "Step of sysbench",
          "type": "string",
          "default": "all",
          "enum": [
            "prepare",
            "run",
            "cleanup",
            "all"
          ]
        },
        "cpu": {
          "description": "the cpu limit for test container",
          "type": "string",
          "default": "1"
        },
        "memory": {
          "description": "the memory limit for test container",
          "type": "string",
          "default": "2Gi"
        },
        "name": {
          "description": "the name of benchmark",
          "type": "string"
        },
        "cluster": {
          "description": "the cluster name",
          "type": "string"
        },
        "database": {
          "description": "the database name",
          "type": "string"
        },
        "username": {
          "description": "Username for database",
          "type": "string"
        },
        "password": {
          "description": "Password for database",
          "type": "string"
        },
        "address": {
          "description": "Address for database",
          "type": "string"
        },
        "threads": {
          "description": "Number of threads to use",
          "type": "integer",
          "default": 1
        },
        "warehouses": {
          "description": "Number of warehouses",
          "type": "integer",
          "default": 1
        },
        "transactions": {
          "description": "Number of transactions each client runs",
          "type": "integer",
          "default": 0
        },
        "duration": {
          "description": "the minutes of test duration",
          "type": "integer",
          "default": 1
        },
        "limitTxPerMin": {
          "description": "limit the number of transactions per minute, 0 means no limit",
          "type": "integer",
          "default": 0
        },
        "newOrderWeight": {
          "description": "Percentage of new order transactions",
          "type": "integer",
          "default": 45
        },
        "paymentWeight": {
          "description": "Percentage of payment transactions",
          "type": "integer",
          "default": 43
        },
        "orderStatusWeight": {
          "description": "Percentage of order status transactions",
          "type": "integer",
          "default": 4
        },
        "deliveryWeight": {
          "description": "Percentage of delivery transactions",
          "type": "integer",
          "default": 4
        },
        "stockLevelWeight": {
          "description": "Percentage of stock level transactions",
          "type": "integer",
          "default": 4
        }
      }
    },
    "engine": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "description": "engine ID",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "engine Name",
          "type": "string"
        },
        "version": {
          "title": "Version",
          "description": "engine version",
          "type": "string"
        },
        "kbVersionConstraint": {
          "title": "kbVersionConstraint",
          "description": "KubeBlcoks version constrain",
          "type": "string"
        },
        "type": {
          "title": "Type",
          "description": "engine type",
          "type": "string",
          "enum": [
            "RDBMS",
            "search-engine",
            "key-value",
            "time-series",
            "streaming",
            "LLM",
            "vector",
            "document",
            "graph",
            "other"
          ]
        },
        "installed": {
          "type": "boolean",
          "description": "whether the engine is installed"
        },
        "status": {
          "type": "string",
          "description": "engine addon status in K8s",
          "enum": [
            "Disabled",
            "Enabled",
            "Failed",
            "Enabling",
            "Disabling"
          ]
        }
      }
    },
    "engineList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/engine"
      }
    }
  },
  "info": {
    "title": "KubeBlocks Cloud API",
    "version": "unversioned"
  },
  "paths": {
    "/api/v1/organizations": {
      "get": {
        "description": "List organizations of current user",
        "operationId": "listOrg",
        "parameters": [
          {
            "description": "The pagination token in the List request",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          },
          {
            "description": "The pagination size in the List request.",
            "in": "query",
            "name": "pageSize",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Organization",
        "operationId": "createOrg",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orgCreate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/org"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/api/v1/organizations/{orgName}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Org",
        "operationId": "deleteOrg",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Org",
        "operationId": "readOrg",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/org"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Org",
        "operationId": "patchOrg",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orgUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/org"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/org"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/members": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list members of the specified Org",
        "operationId": "listOrgMember",
        "parameters": [
          {
            "description": "The pagination token in the List request",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          },
          {
            "description": "The pagination size in the List request.",
            "in": "query",
            "name": "pageSize",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgMemberList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "member"
        ]
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "Add organization with specific role",
        "operationId": "addOrgMember",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/memberAdd"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgMember"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "member"
        ]
      },
      "parameters": [
        {
          "description": "Name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/members/{memberId}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified OrgMember",
        "operationId": "readOrgMember",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgMember"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "member"
        ]
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Org Member",
        "operationId": "deleteOrgMember",
        "parameters": [
          {
            "description": "Name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the member",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "member"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "ID of the member",
          "in": "path",
          "name": "memberId",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "Only authenticated organization admins can update the member's role",
        "operationId": "patchOrgMember",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orgMemberUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgMember"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "member"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/permissions": {
      "get": {
        "operationId": "listOrgMemberPermission",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "description": "The name of the organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "query",
            "description": "The ID of the member to list permissions for",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PermissionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/api/v1/invitations": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list the Invitation of specified Org or User",
        "operationId": "listInvitation",
        "parameters": [
          {
            "description": "The pagination token in the List request",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          },
          {
            "description": "The pagination size in the List request.",
            "in": "query",
            "name": "pageSize",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invitationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed",
          "in": "query",
          "name": "orgName",
          "type": "string"
        },
        {
          "description": "If 'true', then the output is pretty printed",
          "in": "query",
          "name": "userId",
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Invitation",
        "operationId": "createInvitation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/invitationCreate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invitation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      }
    },
    "/api/v1/invitations/{invitationId}": {
      "get": {
        "description": "read the specified Invitation for organization admin or invitee",
        "operationId": "readInvitation",
        "parameters": [
          {
            "description": "ID of the invitation",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invitation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      },
      "parameters": [
        {
          "description": "ID of the invitation",
          "in": "path",
          "name": "invitationId",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "delete the specified Invitation for organization admin",
        "operationId": "deleteInvitation",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      }
    },
    "/admin/v1/invitations/{invitationId}": {
      "get": {
        "description": "read the specified Invitation for system admin",
        "operationId": "readInvitationBySysAdmin",
        "parameters": [
          {
            "description": "ID of the invitation",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invitation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      },
      "parameters": [
        {
          "description": "ID of the invitation",
          "in": "path",
          "name": "invitationId",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/invitations/{invitationId}/accept": {
      "parameters": [
        {
          "description": "ID of the invitation",
          "in": "path",
          "name": "invitationId",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Invitation",
        "operationId": "acceptInvitation",
        "parameters": [
          {
            "description": "ID of the invitation",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      }
    },
    "/api/v1/invitations/{invitationId}/reject": {
      "parameters": [
        {
          "description": "ID of the invitation",
          "in": "path",
          "name": "invitationId",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Invitation",
        "operationId": "rejectInvitation",
        "parameters": [
          {
            "description": "ID of the invitation",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      }
    },
    "/api/v1/invitations/{invitationId}/resend": {
      "parameters": [
        {
          "description": "ID of the invitation",
          "in": "path",
          "name": "invitationId",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Invitation",
        "operationId": "resendInvitation",
        "parameters": [
          {
            "description": "ID of the invitation",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "invitation"
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "description": "read current login User",
        "operationId": "readUser",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "user"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified User. If you want to update phone number, you must request /api/v1/user/phone-verification-code first.",
        "operationId": "patchUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/password": {
      "patch": {
        "description": "Update user password.",
        "operationId": "updateUserPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string",
                  "description": "The new password for the user."
                }
              },
              "required": [
                "new_password"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Password updated successfully."
          },
          "400": {
            "description": "Bad request. The request body is missing or invalid."
          },
          "401": {
            "description": "Unauthorized. The user is not authenticated."
          },
          "403": {
            "description": "Forbidden. The user is not allowed to update the password."
          },
          "500": {
            "description": "Internal server error. Failed to update the password."
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/phone-verification-code": {
      "post": {
        "description": "to update user phone number, send verification code first",
        "operationId": "phoneVerification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "phoneNumber": {
                  "$ref": "#/definitions/phoneNumber"
                }
              },
              "required": [
                "phone_number"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Verification code sent to user's phone"
          },
          "default": {
            "description": "An error occurred, like the sms service is unavailable, user requests code too fast, etc.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/admin/v1/users": {
      "post": {
        "description": "create User",
        "operationId": "createUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userCreate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "Query User by ID or email",
        "operationId": "queryUser",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "description": "email of the user",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/admin/v1/users/{userId}": {
      "patch": {
        "description": "Update user external ID by admin",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userExternalIDUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/admin/v1/alertWebhook/{orgName}/{receiverId}": {
      "post": {
        "operationId": "alertWebhookProxy",
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postableAlert"
            }
          },
          {
            "description": "id of the alert receiver",
            "in": "path",
            "name": "receiverId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id of the alert receiver",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clouds": {
      "get": {
        "operationId": "listCloud",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cloudList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Environment Type",
            "in": "query",
            "name": "environmentType",
            "required": false,
            "type": "string",
            "enum": [
              "managed",
              "registered"
            ]
          }
        ],
        "tags": [
          "cloud"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/manifests": {
      "get": {
        "operationId": "ListEnvironmentManifest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kubernetesManifestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          },
          {
            "description": "query BackupPolicyTemplate",
            "in": "query",
            "name": "backuppolicytemplates",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "query ClusterDefinition",
            "in": "query",
            "name": "clusterdefinitions",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "query ClusterVersion",
            "in": "query",
            "name": "clusterversions",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "engine name",
            "in": "query",
            "name": "engine",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "cloud"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters": {
      "get": {
        "operationId": "listCluster",
        "description": "list clusters of the specified Org",
        "parameters": [
          {
            "description": "The clusterDefinitionn in the List request",
            "in": "query",
            "name": "clusterDefinition",
            "type": "string"
          },
          {
            "description": "Environment Type",
            "in": "query",
            "name": "environmentName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Environment Type",
            "in": "query",
            "name": "environmentType",
            "required": false,
            "type": "string",
            "enum": [
              "managed",
              "registered"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "cluster"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "createCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          }
        ],
        "tags": [
          "cluster"
        ]
      }
    },
    "/api/v2/organizations/{orgName}/clusters": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "createClusterV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clusterV2"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clusterV2"
            }
          }
        ],
        "tags": [
          "cluster"
        ]
      }
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}": {
      "get": {
        "operationId": "readClusterV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clusterV2"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "cluster"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Cluster",
        "operationId": "patchClusterV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clusterUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/clusterV2"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "cluster"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/pitr": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getRestoreTimeRange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/restore": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listClusterRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "operationId": "deleteRestoreObject",
        "parameters": [
          {
            "description": "name of the restore",
            "in": "query",
            "name": "restoreName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        }
      },
      "post": {
        "operationId": "doRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restore"
            }
          }
        ],
        "tags": [
          "cluster",
          "component"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/restore": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "restoreCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restoreCreate"
            }
          }
        ],
        "tags": [
          "cluster"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}": {
      "get": {
        "operationId": "readCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "cluster"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Cluster",
        "operationId": "patchCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clusterUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "cluster"
        ]
      },
      "delete": {
        "operationId": "deleteCluster",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "cluster"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/instances": {
      "get": {
        "operationId": "listInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instanceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "cluster"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/instances/{instanceName}/log": {
      "get": {
        "description": "read log of the specified cluster instance",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "getClusterInstanceLog",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "type": "string",
          "description": "name of the Pod",
          "name": "instanceName",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "description": "Return previous terminated container logs. Defaults to false.",
          "name": "previous",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
          "name": "sinceSeconds",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
          "name": "tailLines",
          "in": "query"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/backups": {
      "post": {
        "operationId": "createClusterBackup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backupCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/backupPolicy": {
      "get": {
        "operationId": "getClusterBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "description": "use volume snapshot to back up",
          "in": "query",
          "name": "useVolumeSnapshot",
          "type": "boolean",
          "default": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Backup Policy",
        "operationId": "patchBackupPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backupPolicy"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/backupPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "backup"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/restart": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "restartCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsRestart"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/upgrade": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "upgradeCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsUpgrade"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/volume-expand": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "clusterVolumeExpand",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsVolumeExpand"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/vscale": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "verticalScaleCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsVScale"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/hscale": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "horizontalScaleCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsHScale"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/promote": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "promoteCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsPromote"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/stop": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "stopCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/start": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "startCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/expose": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "exposeCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/opsExpose"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/reconfigure": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "reconfigureCluster",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reconfigureCreate"
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/custom-ops": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "customOps",
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/opsRequestName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "opsType": {
                  "description": "ops definition name.",
                  "type": "string"
                },
                "compName": {
                  "type": "string",
                  "description": "component name"
                },
                "params": {
                  "description": "custom ops parameters",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "opsrequest"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/opsrequests/{opsName}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a OpsRequest",
        "operationId": "deleteOps",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "opsrequest"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Opsrequest",
          "in": "path",
          "name": "opsName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "query",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/opsrequests/{opsName}/cancel": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "cancel a OpsRequest",
        "operationId": "cancelOps",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "opsrequest"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the OpsRequest",
          "in": "path",
          "name": "opsName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "description": "type of the OpsRequest",
          "in": "query",
          "name": "opsType",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}/accounts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list accounts in cluster",
        "operationId": "listAccounts",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "account"
        ]
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an account in cluster",
        "operationId": "createAccount",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "account"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/account"
          }
        }
      ]
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}/accounts/list": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "list accounts in cluster",
        "operationId": "listAccountsWithArgs",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "account"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "name": "body",
          "in": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/account"
          }
        }
      ]
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an account in cluster",
        "operationId": "deleteAccount",
        "parameters": [],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "account"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "accountName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/manifests/{manifestType}": {
      "get": {
        "operationId": "getClusterManifest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kubernetesManifestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "cluster"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the KubeBlocks cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Kubernetes manifest kind",
          "in": "path",
          "name": "manifestType",
          "required": true,
          "type": "string",
          "enum": [
            "service",
            "configmap",
            "secret",
            "event",
            "opsrequest"
          ]
        },
        {
          "description": "name of the Kubernetes manifest kind",
          "in": "query",
          "name": "opsType",
          "required": false,
          "type": "string",
          "enum": [
            "VerticalScaling",
            "HorizontalScaling",
            "VolumeExpansion",
            "Upgrade",
            "Reconfiguring",
            "Switchover",
            "Restart",
            "Stop",
            "Start",
            "Expose",
            "DataScript"
          ]
        },
        {
          "description": "name of the component",
          "in": "query",
          "name": "component",
          "required": false,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/metrics": {
      "get": {
        "description": "Query cluster metrics.",
        "operationId": "queryClusterMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/httpBody"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the cluster",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "metrics"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/vip-pool": {
      "get": {
        "operationId": "listVIPPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vipPoolList"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource."
          },
          "404": {
            "description": "Returned when the resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environemnt",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "vipPool"
        ]
      },
      "post": {
        "operationId": "createVIPPool",
        "responses": {
          "201": {
            "description": "Returned when environment is created successfully.",
            "schema": {
              "$ref": "#/definitions/vipPool"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environemnt",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vipPoolCreate"
            }
          }
        ],
        "tags": [
          "vipPool"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/vip-pool/{poolID}": {
      "delete": {
        "operationId": "deleteVIPPool",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environemnt",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          },
          {
            "description": "id of the VIP Pool",
            "in": "path",
            "name": "poolID",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "vipPool"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments": {
      "get": {
        "operationId": "listEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentList"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource."
          },
          "404": {
            "description": "Returned when the resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "type of the Environment",
            "in": "query",
            "name": "environmentType",
            "required": false,
            "type": "string",
            "enum": [
              "fullManaged",
              "managed",
              "registered"
            ]
          }
        ],
        "tags": [
          "environment"
        ]
      },
      "post": {
        "operationId": "createEnvironment",
        "responses": {
          "201": {
            "description": "Returned when environment is created successfully.",
            "schema": {
              "$ref": "#/definitions/environment"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentCreate"
            }
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/kubeconfig/status": {
      "post": {
        "operationId": "validateKubeConfig",
        "responses": {
          "201": {
            "description": "Returned when environment is validated successfully.",
            "schema": {
              "$ref": "#/definitions/environmentCondition"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentCreate"
            }
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/playground": {
      "get": {
        "operationId": "listPlaygroundEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentList"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource."
          },
          "404": {
            "description": "Returned when the resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}": {
      "get": {
        "operationId": "getEnvironemnt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environment"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "environment"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the Environemnt",
          "in": "path",
          "name": "environmentName",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Environemnt",
        "operationId": "patchEnvironemnt",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/environmentUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/environment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "environment"
        ]
      },
      "delete": {
        "operationId": "deleteEnvironemnt",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environemnt",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/status": {
      "get": {
        "operationId": "getEnvironmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentStatus"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/bootstrapManifests": {
      "get": {
        "operationId": "getEnvironmentBootstrapManifests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/httpBody"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/kubeconfig": {
      "get": {
        "operationId": "getEnvironmentKubeconfig",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/kubeblocks/install": {
      "post": {
        "operationId": "installKubeblocks",
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "NoPermission"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubeblocksCreate"
            }
          }
        ],
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/contexts": {
      "get": {
        "operationId": "listContext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contextList"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "context"
        ]
      },
      "post": {
        "operationId": "createContext",
        "responses": {
          "201": {
            "description": "Returned when edge is created successfully.",
            "schema": {
              "$ref": "#/definitions/context"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contextCreate"
            }
          }
        ],
        "tags": [
          "context"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/contexts/{contextName}": {
      "get": {
        "operationId": "getContext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/context"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Context",
            "in": "path",
            "name": "contextName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "context"
        ]
      },
      "delete": {
        "operationId": "deleteContext",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Context",
            "in": "path",
            "name": "contextName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "context"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/contexts/{contextName}/bootstrapManifests": {
      "get": {
        "operationId": "getContextBootstrapManifests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/httpBody"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Context",
            "in": "path",
            "name": "contextName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "context"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/contexts/{contextName}/kubeconfig": {
      "get": {
        "operationId": "getContextKubeconfig",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Context",
            "in": "path",
            "name": "contextName",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "context"
        ]
      }
    },
    "/admin/v1/accessreview": {
      "post": {
        "description": "accessreview checks whether or not the current user can perform an action",
        "operationId": "accessreview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accessreview"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accessreviewResp"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "accessreview"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/logs/running": {
      "get": {
        "description": "Query running logs of a cluster",
        "operationId": "queryRunningLogs",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "componentName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instanceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "nextStartTime": {
                      "type": "string"
                    },
                    "nextEndTime": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterlog"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/logs/slow": {
      "get": {
        "description": "Query slow logs of a cluster",
        "operationId": "querySlowLogs",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string"
                      },
                      "client": {
                        "type": "string"
                      },
                      "dbName": {
                        "type": "string"
                      },
                      "user": {
                        "type": "string"
                      },
                      "executionTime": {
                        "type": "integer"
                      },
                      "command": {
                        "type": "string"
                      },
                      "extra": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "nextStartTime": {
                      "type": "string"
                    },
                    "nextEndTime": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterlog"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/logs/audit": {
      "get": {
        "description": "Query audit logs of a cluster",
        "operationId": "queryAuditLogs",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string"
                      },
                      "client": {
                        "type": "string"
                      },
                      "dbName": {
                        "type": "string"
                      },
                      "user": {
                        "type": "string"
                      },
                      "executionTime": {
                        "type": "integer"
                      },
                      "command": {
                        "type": "string"
                      },
                      "extra": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "nextStartTime": {
                      "type": "string"
                    },
                    "nextEndTime": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterlog"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/logs/error": {
      "get": {
        "description": "Query error logs of a cluster",
        "operationId": "queryErrorLogs",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "componentName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instanceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "nextStartTime": {
                      "type": "string"
                    },
                    "nextEndTime": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterlog"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/backups": {
      "get": {
        "operationId": "listBackups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "cluster name of the Backup",
          "in": "query",
          "name": "clusterName",
          "required": false,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/backups/{backupId}": {
      "get": {
        "operationId": "getBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "id of the Backup",
          "in": "path",
          "name": "backupId",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "operationId": "deleteBackup",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/storageProvider": {
      "get": {
        "operationId": "listStorageProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "storage"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "id of the environment",
          "in": "query",
          "name": "environmentId",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/backupRepo": {
      "get": {
        "operationId": "listBackupRepos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupRepoList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the environment",
            "in": "query",
            "name": "environmentName",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "backup"
        ]
      },
      "post": {
        "operationId": "createBackupRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupRepo"
            }
          },
          "201": {
            "description": "Returned when edge is created successfully.",
            "schema": {
              "$ref": "#/definitions/backupRepo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backupRepoCreate"
            }
          }
        ],
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/backupRepo/{backupRepoName}": {
      "get": {
        "operationId": "getBackupRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupRepo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the BackupRepo",
          "in": "path",
          "name": "backupRepoName",
          "required": true,
          "type": "string"
        },
        {
          "description": "id of the environment",
          "in": "query",
          "name": "environmentId",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "operationId": "deleteBackupRepo",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "backup"
        ]
      },
      "post": {
        "operationId": "updateBackupRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/backupRepo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backupRepoUpdate"
            }
          }
        ],
        "tags": [
          "backup"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/events": {
      "get": {
        "description": "Query events of clusters",
        "operationId": "queryClusterEvents",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "description": "Organization Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterId",
            "in": "query",
            "description": "Cluster ID",
            "required": false,
            "type": "integer"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "eventName",
            "in": "query",
            "description": "Event Name",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "tags": [
          "event"
        ]
      }
    },
    "/api/v1/organizations/{organization}/environments/{environmentName}/nodes": {
      "get": {
        "description": "Get a list of nodes filtered by optional hostname",
        "operationId": "listNodes",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Name of the organization",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the Environment",
            "in": "path",
            "name": "environmentName",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostName",
            "in": "query",
            "description": "Hostname to filter by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes",
            "schema": {
              "$ref": "#/definitions/nodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "tags": [
          "environment"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/paramTpls": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listParamTpl",
        "parameters": [
          {
            "description": "the template partition in listParamTpl request",
            "in": "query",
            "name": "partition",
            "type": "string",
            "enum": [
              "default",
              "custom"
            ]
          },
          {
            "description": "Cluster Application Version",
            "in": "query",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "list parameter templates successfully",
            "schema": {
              "$ref": "#/definitions/paramTplList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      },
      "post": {
        "operationId": "createParamTpl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/paramTplCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "create parameter template successfully",
            "schema": {
              "$ref": "#/definitions/paramTplListItem"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/paramTpls/{paramTplName}": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the parameter template",
          "in": "path",
          "name": "paramTplName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "readParamTpl",
        "parameters": [
          {
            "description": "the template partition in read paramTpl request",
            "in": "query",
            "name": "partition",
            "type": "string",
            "enum": [
              "default",
              "custom"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "read parameter template successfully",
            "schema": {
              "$ref": "#/definitions/paramTplGet"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      },
      "delete": {
        "operationId": "deleteParamTpl",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "operationId": "patchParamTpl",
        "description": "partially update the parameter template",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/paramTplUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/paramTplListItem"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "paramTpl"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/clusters/{clusterName}/paramTpls": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getClusterParamTpls",
        "responses": {
          "200": {
            "description": "get parameter template applicable to the cluster successfully",
            "schema": {
              "$ref": "#/definitions/paramTplApplToClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      },
      "post": {
        "operationId": "createParamTplFromCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/paramTplCreateFromCluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "create parameter template from cluster successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "paramTpl"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/tags": {
      "post": {
        "responses": {
          "200": {
            "description": "create tag successfully",
            "schema": {
              "$ref": "#/definitions/tagCreate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "description": "create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "clusterId": {
                  "description": "The cluster id corresponding to the tag",
                  "type": "string",
                  "format": "uint64"
                },
                "items": {
                  "description": "The key value pair of the tag needed to create",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "tag"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterIds",
            "in": "query",
            "description": "Comma-separated list of cluster IDs",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "list tags successfully",
            "schema": {
              "$ref": "#/definitions/tagList"
            }
          }
        },
        "operationId": "getTags",
        "tags": [
          "tag"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/tags/{tagId}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a tag",
        "operationId": "deleteTagss",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "tag"
        ]
      },
      "patch": {
        "description": "Update tags",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tagUpdate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tag"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "tag"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/receivers": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "alert receiver category",
          "in": "query",
          "name": "category",
          "required": true,
          "type": "string",
          "enum": [
            "feishu",
            "wechat",
            "dingtalk",
            "receiver-group",
            "webhook"
          ]
        }
      ],
      "get": {
        "operationId": "listAlertReceivers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertReceiverList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      },
      "post": {
        "operationId": "createAlertReceiver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertReceiver"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertReceiver"
            }
          }
        ],
        "tags": [
          "alertConfig"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/receivers/{receiverId}": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "id of the alert receivers",
          "in": "path",
          "name": "receiverId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getAlertReceiver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertReceiver"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the alert receiver",
        "operationId": "patchAlertReceiver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertReceiver"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/alertReceiver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "alertConfig"
        ]
      },
      "delete": {
        "operationId": "deleteAlertReceiver",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      }
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}/runSQL": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        },
        {
          "description": "SQL to run",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/sqlReqRes"
          }
        }
      ],
      "post": {
        "operationId": "runSQLOnCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sqlReqRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "sqlEditor"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/resourceStats": {
      "get": {
        "summary": "Get resource statistics for a specific environment",
        "description": "Returns aggregated resource statistics for the specified environment within an organization.",
        "operationId": "getResourceStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the organization"
          },
          {
            "name": "environmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the environment"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/environmentResourceStats"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "tags": [
          "resourceStats"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/nodes/resourceStats": {
      "get": {
        "summary": "Get resource statistics of nodes for a specific environment",
        "description": "Returns aggregated resource statistics for the specified environment within an organization.",
        "operationId": "listNodesResourceStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the organization"
          },
          {
            "name": "environmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the environment"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeResourceStatsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "tags": [
          "resourceStats"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/nodes/{nodeName}/instances/resourceStats": {
      "get": {
        "summary": "Get resource statistics of instances for a specific node",
        "description": "Returns aggregated resource statistics for the specified node.",
        "operationId": "listInstancesResourceStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the organization"
          },
          {
            "name": "environmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the environment"
          },
          {
            "name": "nodeName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the node"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instanceResourceStatsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "tags": [
          "resourceStats"
        ]
      }
    },
    "/api/v2/organizations/{orgName}/clusters/{clusterName}/tls": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the cluster",
          "in": "path",
          "name": "clusterName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "tlsSwitcher",
        "parameters": [
          {
            "description": "Enable TLS or not",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tlsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "tls"
        ]
      },
      "get": {
        "operationId": "getTLSCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tlsCertList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "tls"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/engines": {
      "get": {
        "operationId": "listEngines in current env",
        "parameters": [
          {
            "description": "engine name",
            "in": "query",
            "name": "name",
            "type": "string",
            "required": false
          },
          {
            "description": "engine Type",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string",
            "enum": [
              "RDBMS",
              "search-engine",
              "key-value",
              "time-series",
              "streaming",
              "LLM",
              "vector",
              "document",
              "graph",
              "other"
            ]
          },
          {
            "description": "engine version",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "engine"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the EnvironmentName",
          "in": "path",
          "name": "environmentName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/engines/{engineName}": {
      "get": {
        "operationId": "get env engine by name",
        "parameters": [
          {
            "description": "engine version",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "engine"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the EnvironmentName",
          "in": "path",
          "name": "environmentName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the engine",
          "in": "path",
          "name": "engineName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/environments/{environmentName}/engines/{engineName}/{actionType}": {
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the EnvironmentName",
          "in": "path",
          "name": "environmentName",
          "required": true,
          "type": "string"
        },
        {
          "description": "name of the engine",
          "in": "path",
          "name": "engineName",
          "required": true,
          "type": "string"
        },
        {
          "description": "engine action type",
          "in": "path",
          "name": "actionType",
          "required": true,
          "type": "string",
          "enum": [
            "enable",
            "disable"
          ]
        }
      ],
      "post": {
        "operationId": "engine action",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engine"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": ["engine"]
      }
    },
    "/api/v1/alertSMTPConfig": {
      "get": {
        "operationId": "getAlertSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertSMTPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      },
      "post": {
        "operationId": "updateAlertSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertSMTPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertSMTPConfig"
            }
          }
        ],
        "tags": [
          "alertConfig"
        ]
      }
    },
    "/api/v1/alertTemplates": {
      "get": {
        "operationId": "listAlertTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      },
      "post": {
        "operationId": "createAlertTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertTemplate"
            }
          }
        ],
        "tags": [
          "alertConfig"
        ]
      }
    },
    "/api/v1/alertTemplates/{templateId}": {
      "parameters": [
        {
          "description": "id of the alert tmpl configuration",
          "in": "path",
          "name": "templateId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getAlertTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alertTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the alert receiver",
        "operationId": "patchAlertTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertTemplate"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/alertTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "alertConfig"
        ]
      },
      "delete": {
        "operationId": "deleteAlertTemplate",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "alertConfig"
        ]
      }
    },
    "/api/v1/organizations/{orgName}/benchmark": {
      "get": {
        "operationId": "listBenchmark",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/benchmarkList"
            }
          }
        },
        "tags": [
          "benchmark"
        ],
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the cluster",
            "in": "query",
            "name": "cluster",
            "required": false,
            "type": "string"
          },
          {
            "description": "type of the benchmark",
            "in": "query",
            "name": "benchType",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/api/v1/organizations/{orgName}/benchmark/{benchmarkId}": {
      "get": {
        "operationId": "getBenchmark",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/benchmark"
            }
          }
        },
        "tags": [
          "benchmark"
        ]
      },
      "delete": {
        "operationId": "deleteBenchmark",
        "responses": {
          "204": {
            "description": "Returned when project is deleted successfully.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "benchmark"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "description": "id of the benchmark",
          "in": "path",
          "name": "benchmarkId",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/v1/organizations/{orgName}/benchmark/pgbench": {
      "post": {
        "operationId": "createPgbench",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/benchmark"
            }
          }
        },
        "tags": [
          "benchmark"
        ],
        "parameters": [
          {
            "description": "name of the Org",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pgbench"
            }
          }
        ]
      }
    },
    "/api/v1/organizations/{orgName}/benchmark/sysbench": {
      "post": {
        "operationId": "createSysbench",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/benchmark"
            }
          }
        },
        "tags": [
          "benchmark"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/sysbench"
          }
        }
      ]
    },
    "/api/v1/organizations/{orgName}/benchmark/tpcc": {
      "post": {
        "operationId": "createTpcc",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/benchmark"
            }
          }
        },
        "tags": [
          "benchmark"
        ]
      },
      "parameters": [
        {
          "description": "name of the Org",
          "in": "path",
          "name": "orgName",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/tpcc"
          }
        }
      ]
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "in": "header",
      "name": "authorization",
      "type": "apiKey"
    }
  },
  "host": "127.0.0.1:8080",
  "swagger": "2.0"
}
