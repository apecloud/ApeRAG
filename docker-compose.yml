volumes:
  aperag-postgres-data: {}
  aperag-qdrant-data: {}
  aperag-redis-data: {}
  aperag-es-data: {}
  aperag-shared-data: {}

services:
  api: &api
    build:
      context: .
      dockerfile: ./Dockerfile
    image: ${REGISTRY:-docker.io}/apecloud/aperag:${VERSION:-latest}
    container_name: aperag-api
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
      qdrant:
        condition: service_started
      es:
        condition: service_healthy
    volumes:
      - .:/app:z
      - ~/.cache:/root/.cache
      - aperag-shared-data:/shared
    env_file:
      - .env
      - envs/docker.env.overrides
    environment:
      - DOCRAY_HOST=${DOCRAY_HOST}
    ports:
      - "8000:8000"
    entrypoint: /app/scripts/start-api.sh

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    image: ${REGISTRY:-docker.io}/apecloud/aperag-frontend:${VERSION:-latest}
    container_name: aperag-frontend
    depends_on:
      - api
    env_file:
      - frontend/deploy/env.local.template
    environment:
      - APERAG_CONSOLE_SERVICE_HOST=aperag-api
      - APERAG_CONSOLE_SERVICE_PORT=8000
    ports:
      - "3000:3000"

  celeryworker:
    image: ${REGISTRY:-docker.io}/apecloud/aperag:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: aperag-celeryworker
    depends_on:
      - redis
      - postgres
      - qdrant
      - es
    volumes:
      - .:/app:z
      - ~/.cache:/root/.cache
      - ./resources:/data/resources
      - aperag-shared-data:/shared
    env_file:
      - .env
      - envs/docker.env.overrides
    environment:
      - NODE_IP=aperag-celeryworker
      - DOCRAY_HOST=${DOCRAY_HOST}
    entrypoint: /app/scripts/start-celery-worker.sh

  celerybeat:
    image: ${REGISTRY:-docker.io}/apecloud/aperag:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: aperag-celerybeat
    env_file:
      - .env
      - envs/docker.env.overrides
    depends_on:
      - redis
      - postgres
    environment:
      - NODE_IP=aperag-celerybeat
    entrypoint: /app/scripts/start-celery-beat.sh

  flower:
    <<: *api
    image: ${REGISTRY:-docker.io}/apecloud/aperag:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: aperag-flower
    env_file:
      - .env
      - envs/docker.env.overrides
    ports:
      - "5555:5555"
    environment:
      - NODE_IP=aperag-flower
    entrypoint: /app/scripts/start-celery-flower.sh

  postgres:
    image: pgvector/pgvector:pg16
    container_name: aperag-postgres
    volumes:
      - aperag-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=aperag

  redis:
    image: redis:6
    container_name: aperag-redis
    volumes:
      - aperag-redis-data:/data
    ports:
      - "6379:6379"

  qdrant:
    image: qdrant/qdrant:v1.13.4
    container_name: aperag-qdrant
    volumes:
      - aperag-qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"

  es:
    image: elasticsearch:8.8.2
    container_name: aperag-es
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "xpack.security.enabled=false"
    volumes:
      - aperag-es-data:/usr/share/elasticsearch/data
      - ./scripts/init-es.sh:/usr/share/elasticsearch/bin/init-es.sh
    healthcheck:
      test: ["CMD-SHELL", "bash /usr/share/elasticsearch/bin/init-es.sh check"]
      interval: 10s
      timeout: 5s
      retries: 12 # 12 * 10s = 120s (2 minutes)
      start_period: 10s # Give ES some time to start up before first check
    command: bash /usr/share/elasticsearch/bin/init-es.sh
    restart: on-failure

  docray:
    image: ${REGISTRY:-docker.io}/apecloud/doc-ray:${DOCRAY_VERSION:-v0.1.0}
    container_name: aperag-docray
    ports:
      - "8265:8265"
      - "8639:8639"
    profiles: ["docray"]
    environment:
      - STANDALONE_MODE=true
    deploy:
      resources:
        reservations:
          memory: "8G"

  docray-gpu:
    image: ${REGISTRY:-docker.io}/apecloud/doc-ray:${DOCRAY_VERSION:-v0.1.0}
    container_name: aperag-docray-gpu
    ports:
      - "8265:8265"
      - "8639:8639"
    profiles: ["docray-gpu"]
    environment:
      - STANDALONE_MODE=true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
