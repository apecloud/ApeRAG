"""empty message

Revision ID: eac41afaa335
Revises: f88ca40f70ed
Create Date: 2025-06-10 13:22:13.164724

"""
from typing import Sequence, Union
from pathlib import Path

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eac41afaa335'
down_revision: Union[str, None] = 'f88ca40f70ed'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_unique_constraint('uq_collection_id', 'collection', ['id'])  # Already exists
    # ### end Alembic commands ###
    
    # Execute SQL file for model configs initialization
    current_dir = Path(__file__).parent  # Get directory of this migration file
    sql_file_path = current_dir / "../sql/model_configs_init.sql"
    
    if sql_file_path.exists():
        with open(sql_file_path, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # Parse and execute SQL statements properly
        statements = []
        current_statement = []
        
        for line in sql_content.split('\n'):
            line = line.strip()
            
            # Skip empty lines and comments
            if not line or line.startswith('--'):
                continue
                
            current_statement.append(line)
            
            # If line ends with semicolon, it's the end of a statement
            if line.endswith(';'):
                statement = ' '.join(current_statement)
                if statement.strip() and statement.strip() != ';':
                    statements.append(statement)
                current_statement = []
        
        # Execute each statement
        for statement in statements:
            statement = statement.strip()
            if statement and statement not in ['BEGIN;', 'COMMIT;']:
                op.execute(sa.text(statement))
                
    else:
        raise FileNotFoundError(f"SQL file not found: {sql_file_path}")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint('uq_collection_id', 'collection', type_='unique')  # Not needed
    # ### end Alembic commands ###
    
    # Note: This migration adds model configuration data.
    # Downgrade would require custom SQL to remove the data if needed.
    pass
