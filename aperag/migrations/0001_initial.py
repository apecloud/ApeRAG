# Copyright 2025 ApeCloud, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 5.0.14 on 2025-05-30 06:04

import aperag.db.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ApiKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.ApiKey.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        default=aperag.db.models.ApiKey.generate_key,
                        editable=False,
                        max_length=40,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                (
                    "description",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("DELETED", "Deleted")],
                        default="ACTIVE",
                        max_length=16,
                    ),
                ),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Bot",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.Bot.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                ("title", models.CharField(max_length=256)),
                (
                    "type",
                    models.CharField(
                        choices=[("knowledge", "Knowledge"), ("common", "Common")],
                        default="knowledge",
                        max_length=16,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("DELETED", "Deleted")],
                        max_length=16,
                    ),
                ),
                ("config", models.TextField()),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BotCollectionRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bot_id", models.CharField(max_length=24)),
                ("collection_id", models.CharField(max_length=24)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Chat",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.Chat.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                (
                    "peer_type",
                    models.CharField(
                        choices=[
                            ("system", "System"),
                            ("feishu", "Feishu"),
                            ("weixin", "Weixin"),
                            ("weixin_official", "Weixin Official"),
                            ("web", "Web"),
                            ("dingtalk", "Dingtalk"),
                        ],
                        default="system",
                        max_length=16,
                    ),
                ),
                ("peer_id", models.CharField(max_length=256, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("DELETED", "Deleted")],
                        max_length=16,
                    ),
                ),
                ("bot_id", models.CharField(max_length=24)),
                ("title", models.TextField()),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.Collection.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True, null=True)),
                ("user", models.CharField(max_length=256)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INACTIVE", "Inactive"),
                            ("ACTIVE", "Active"),
                            ("DELETED", "Deleted"),
                        ],
                        max_length=16,
                    ),
                ),
                (
                    "type",
                    models.CharField(choices=[("document", "Document")], max_length=16),
                ),
                ("config", models.TextField()),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CollectionSyncHistory",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.CollectionSyncHistory.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                ("collection_id", models.CharField(max_length=24)),
                ("total_documents", models.PositiveIntegerField(default=0)),
                ("new_documents", models.PositiveIntegerField(default=0)),
                ("deleted_documents", models.PositiveIntegerField(default=0)),
                ("modified_documents", models.PositiveIntegerField(default=0)),
                ("processing_documents", models.PositiveIntegerField(default=0)),
                ("pending_documents", models.PositiveIntegerField(default=0)),
                ("failed_documents", models.PositiveIntegerField(default=0)),
                ("successful_documents", models.PositiveIntegerField(default=0)),
                ("total_documents_to_sync", models.PositiveIntegerField(default=0)),
                ("execution_time", models.DurationField(null=True)),
                ("start_time", models.DateTimeField()),
                ("task_context", models.JSONField(default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("RUNNING", "Running"),
                            ("CANCELED", "Canceled"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="RUNNING",
                        max_length=16,
                    ),
                ),
                ("gmt_created", models.DateTimeField(auto_now_add=True, null=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True, null=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=256, unique=True)),
                ("value", models.TextField()),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.Document.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("user", models.CharField(max_length=256)),
                ("config", models.TextField(null=True)),
                ("collection_id", models.CharField(max_length=24, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETE", "Complete"),
                            ("FAILED", "Failed"),
                            ("DELETING", "Deleting"),
                            ("DELETED", "Deleted"),
                        ],
                        max_length=16,
                    ),
                ),
                (
                    "vector_index_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETE", "Complete"),
                            ("FAILED", "Failed"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="PENDING",
                        max_length=16,
                    ),
                ),
                (
                    "fulltext_index_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETE", "Complete"),
                            ("FAILED", "Failed"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="PENDING",
                        max_length=16,
                    ),
                ),
                (
                    "graph_index_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETE", "Complete"),
                            ("FAILED", "Failed"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="PENDING",
                        max_length=16,
                    ),
                ),
                ("size", models.BigIntegerField()),
                ("object_path", models.CharField(max_length=1024, null=True)),
                ("relate_ids", models.TextField()),
                ("metadata", models.TextField(default="{}")),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.Invitation.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_by", models.CharField(max_length=256)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("rw", "Rw"), ("ro", "Ro")],
                        default="ro",
                        max_length=16,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MessageFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                (
                    "collection_id",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                ("chat_id", models.CharField(max_length=24)),
                ("message_id", models.CharField(max_length=256)),
                (
                    "type",
                    models.CharField(
                        choices=[("good", "Good"), ("bad", "Bad")],
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("Harmful", "Harmful"),
                            ("Unsafe", "Unsafe"),
                            ("Fake", "Fake"),
                            ("Unhelpful", "Unhelpful"),
                            ("Other", "Other"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("message", models.TextField(blank=True, null=True)),
                ("question", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETE", "Complete"),
                            ("FAILED", "Failed"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("original_answer", models.TextField(blank=True, null=True)),
                ("revised_answer", models.TextField(blank=True, null=True)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ModelServiceProvider",
            fields=[
                (
                    "name",
                    models.CharField(
                        default=aperag.db.models.ModelServiceProvider.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("DELETED", "Deleted"),
                        ],
                        max_length=16,
                    ),
                ),
                ("dialect", models.CharField(default="openai", max_length=32)),
                ("base_url", models.CharField(blank=True, max_length=256, null=True)),
                ("api_key", models.CharField(max_length=256)),
                ("extra", models.TextField(null=True)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SearchTestHistory",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=aperag.db.models.SearchTestHistory.generate_id,
                        editable=False,
                        max_length=24,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                ("collection_id", models.CharField(max_length=24, null=True)),
                ("query", models.TextField()),
                ("vector_search", models.JSONField(blank=True, null=True)),
                ("fulltext_search", models.JSONField(blank=True, null=True)),
                ("graph_search", models.JSONField(blank=True, null=True)),
                ("items", models.JSONField(default=list)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserQuota",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.CharField(max_length=256)),
                ("key", models.CharField(max_length=256)),
                ("value", models.PositiveIntegerField(default=0)),
                ("gmt_created", models.DateTimeField(auto_now_add=True)),
                ("gmt_updated", models.DateTimeField(auto_now=True)),
                ("gmt_deleted", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("rw", "Rw"), ("ro", "Ro")],
                        default="ro",
                        max_length=16,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="botcollectionrelation",
            constraint=models.UniqueConstraint(
                condition=models.Q(("gmt_deleted__isnull", True)),
                fields=("bot_id", "collection_id"),
                name="unique_active_bot_collection",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="chat",
            unique_together={("bot_id", "peer_type", "peer_id")},
        ),
        migrations.AlterUniqueTogether(
            name="document",
            unique_together={("collection_id", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="messagefeedback",
            unique_together={("chat_id", "message_id")},
        ),
    ]
