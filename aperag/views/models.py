# generated by datamodel-codegen:
#   filename:  openapi.merged.yaml
#   timestamp: 2025-04-15T06:48:24+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal, Optional

from pydantic import BaseModel, Field


class SuccessResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response code, 0 for success', example=0
    )
    data: Optional[dict[str, Any]] = Field(
        None, description='Response data, structure varies by API'
    )
    page_number: Optional[int] = Field(
        None, description='Current page number', example=1
    )
    page_size: Optional[int] = Field(
        None, description='Number of items per page', example=10
    )
    count: Optional[int] = Field(None, description='Total number of items', example=100)


class Bot(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    type: Optional[Literal['knowledge', 'common']] = None
    collection_ids: Optional[list[str]] = None
    created: Optional[datetime] = None
    updated: Optional[datetime] = None


class FailResponse(BaseModel):
    code: Optional[int] = Field(None, description='Error code', example=1001)
    message: Optional[str] = Field(
        None, description='Error message', example='Invalid request'
    )


class BotCreate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    type: Optional[Literal['knowledge', 'common']] = None
    config: Optional[str] = None
    collection_ids: Optional[list[str]] = None


class BotUpdate(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    type: Optional[Literal['knowledge', 'common']] = None
    config: Optional[str] = None
    collection_ids: Optional[list[str]] = None


class Local(BaseModel):
    path: Optional[str] = None


class Bucket(BaseModel):
    bucket: Optional[str] = None
    dir: Optional[str] = None


class Oss(BaseModel):
    access_key_id: Optional[str] = None
    access_key_secret: Optional[str] = None
    buckets: Optional[list[Bucket]] = None
    bucket: Optional[str] = None
    endpoint: Optional[str] = None
    region: Optional[str] = None
    dir: Optional[str] = None


class S3(BaseModel):
    access_key_id: Optional[str] = None
    access_key_secret: Optional[str] = None
    buckets: Optional[list[dict[str, Any]]] = None
    bucket: Optional[str] = None
    region: Optional[str] = None
    dir: Optional[str] = None


class Ftp(BaseModel):
    path: Optional[str] = None
    host: Optional[str] = None
    port: Optional[float] = None
    username: Optional[str] = None


class Email(BaseModel):
    pop_server: Optional[str] = None
    port: Optional[float] = None
    email_address: Optional[str] = None
    email_password: Optional[str] = None
    detect_spam: Optional[bool] = None


class Url(BaseModel):
    url: Optional[str] = None
    name: Optional[str] = None


class Feishu(BaseModel):
    app_id: Optional[str] = None
    app_secret: Optional[str] = None
    space_id: Optional[str] = None
    node_id: Optional[str] = None
    method: Optional[str] = None
    target_format: Optional[str] = None


class CollectionSource(BaseModel):
    category: Optional[
        Literal[
            'upload', 'tencent', 'oss', 'local', 's3', 'ftp', 'email', 'url', 'github'
        ]
    ] = None
    upload: Optional[dict[str, Any]] = None
    local: Optional[Local] = None
    oss: Optional[Oss] = None
    s3: Optional[S3] = None
    ftp: Optional[Ftp] = None
    email: Optional[Email] = None
    url: Optional[Url] = None
    feishu: Optional[Feishu] = None


class Collection(BaseModel):
    """
    Collection is a collection of documents
    """

    id: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    config: Optional[str] = None
    source: Optional[CollectionSource] = None
    status: Optional[Literal['ACTIVE', 'INACTIVE', 'DELETED', 'QUESTION_PENDING']] = (
        None
    )
    created: Optional[datetime] = None
    updated: Optional[datetime] = None


class CollectionCreate(BaseModel):
    title: Optional[str] = None
    type: Optional[str] = None
    description: Optional[str] = None
    config: Optional[str] = None
    source: Optional[CollectionSource] = None


class CollectionUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    config: Optional[str] = None
    source: Optional[CollectionSource] = None


class Document(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    status: Optional[
        Literal[
            'PENDING', 'RUNNING', 'COMPLETE', 'FAILED', 'DELETING', 'DELETED', 'WARNING'
        ]
    ] = None
    config: Optional[str] = None
    size: Optional[float] = None
    created: Optional[datetime] = None
    updated: Optional[datetime] = None
    sensitive_info: Optional[list[str]] = None


class DocumentCreate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    source: Optional[str] = None
    collection_id: Optional[str] = None


class DocumentUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    source: Optional[str] = None


class Question(BaseModel):
    id: Optional[str] = None
    content: Optional[str] = None
    collection_id: Optional[str] = None
    status: Optional[Literal['pending', 'processing', 'completed', 'failed']] = None
    created: Optional[datetime] = None
    updated: Optional[datetime] = None


class QuestionUpdate(BaseModel):
    content: Optional[str] = None


class Chat(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    collection_id: Optional[str] = None
    status: Optional[Literal['active', 'archived']] = None
    created: Optional[datetime] = None
    updated: Optional[datetime] = None


class ChatCreate(BaseModel):
    title: Optional[str] = None
    collection_id: Optional[str] = None


class ChatUpdate(BaseModel):
    title: Optional[str] = None
    status: Optional[Literal['active', 'archived']] = None


class Feedback(BaseModel):
    upvote: Optional[int] = None
    downvote: Optional[int] = None
    revised_answer: Optional[str] = None


class ApiKey(BaseModel):
    id: Optional[str] = None
    key: Optional[str] = None


class UserInfo(BaseModel):
    is_admin: Optional[bool] = None


class Model(BaseModel):
    value: Optional[str] = None
    label: Optional[str] = None
    enabled: Optional[bool] = None
    memory: Optional[bool] = None
    free_tier: Optional[bool] = None
    endpoint: Optional[str] = None
    default_token: Optional[bool] = None
    prompt_template: Optional[str] = None
    context_window: Optional[int] = None
    temperature: Optional[float] = None
    similarity_score_threshold: Optional[float] = None
    similarity_topk: Optional[int] = None
    family_name: Optional[str] = None
    family_label: Optional[str] = None


class Auth(BaseModel):
    type: Optional[Literal['none', 'auth0', 'authing', 'logto']] = None
    auth_domain: Optional[str] = None
    auth_app_id: Optional[str] = None


class Config(BaseModel):
    auth: Optional[Auth] = None
    public_ips: Optional[list[str]] = None


class PromptTemplate(BaseModel):
    name: Optional[str] = None
    prompt: Optional[str] = None
    description: Optional[str] = None
